
The_Safe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000500e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  0000500e  000050a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000f0  008000f0  00005132  2**0
                  ALLOC
  3 .stab         00003f24  00000000  00000000  00005134  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000132a  00000000  00000000  00009058  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a382  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a4c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a632  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c27b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d166  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000df14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e301  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eacf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3f       	cpi	r26, 0xFE	; 254
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 27 	call	0x4efc	; 0x4efc <main>
      8a:	0c 94 05 28 	jmp	0x500a	; 0x500a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ce 27 	jmp	0x4f9c	; 0x4f9c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ec       	ldi	r26, 0xC9	; 201
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ea 27 	jmp	0x4fd4	; 0x4fd4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f6 27 	jmp	0x4fec	; 0x4fec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f6 27 	jmp	0x4fec	; 0x4fec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ce 27 	jmp	0x4f9c	; 0x4f9c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ec       	ldi	r24, 0xC9	; 201
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ea 27 	jmp	0x4fd4	; 0x4fd4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f6 27 	jmp	0x4fec	; 0x4fec <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f6 27 	jmp	0x4fec	; 0x4fec <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 da 27 	jmp	0x4fb4	; 0x4fb4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f6 27 	jmp	0x4fec	; 0x4fec <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 de 27 	jmp	0x4fbc	; 0x4fbc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fa 27 	jmp	0x4ff4	; 0x4ff4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_interface.h"
#include "CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to low for command*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_LOW);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	62 e0       	ldi	r22, 0x02	; 2
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

	/*Set RW pin to low for write*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	63 e0       	ldi	r22, 0x03	; 3
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

	/*Set command to data pins*/
	DIO_vidSetPortVal(CLCD_DATA_PORT,Copy_u8Command);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_vidSetPortVal>

	/*Send enable pulse*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	64 e0       	ldi	r22, 0x04	; 4
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	64 e0       	ldi	r22, 0x04	; 4
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>
}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to high for data*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_HIGH);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	62 e0       	ldi	r22, 0x02	; 2
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

	/*Set RW pin to low for write*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_LOW);
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	63 e0       	ldi	r22, 0x03	; 3
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

	/*Set Data to data pins*/
	DIO_vidSetPortVal(CLCD_DATA_PORT,Copy_u8Data);
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_vidSetPortVal>

	/*Send enable pulse*/
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_HIGH);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	64 e0       	ldi	r22, 0x04	; 4
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_vidSetPinVal(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_LOW);
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	64 e0       	ldi	r22, 0x04	; 4
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>
}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	2e 97       	sbiw	r28, 0x0e	; 14
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8b 87       	std	Y+11, r24	; 0x0b
     ddc:	9c 87       	std	Y+12, r25	; 0x0c
     dde:	ad 87       	std	Y+13, r26	; 0x0d
     de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	a9 87       	std	Y+9, r26	; 0x09
     e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <CLCD_voidInit+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <CLCD_voidInit+0xc6>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <CLCD_voidInit+0xb4>
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <CLCD_voidInit+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <CLCD_voidInit+0xf0>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set command: 2 lines, 5*8 Font size*/
	CLCD_voidSendCommand(0b00111000);
     eb6:	88 e3       	ldi	r24, 0x38	; 56
     eb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*Display on off control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
     ebc:	8c e0       	ldi	r24, 0x0C	; 12
     ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*Clear display*/
	CLCD_voidSendCommand(1);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     ec8:	2e 96       	adiw	r28, 0x0e	; 14
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <CLCD_vidSendString>:

void CLCD_vidSendString(const char *Copy_u8String)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <CLCD_vidSendString+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9b 83       	std	Y+3, r25	; 0x03
     ee8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator = 0 ;
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <CLCD_vidSendString+0x30>
	while(Copy_u8String[Local_u8Iterator] != '\0')
	{
		CLCD_voidSendData(Copy_u8String[Local_u8Iterator]) ;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	fc 01       	movw	r30, r24
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	80 81       	ld	r24, Z
     f00:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Local_u8Iterator ++ ;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_vidSendString(const char *Copy_u8String)
{
	u8 Local_u8Iterator = 0 ;
	while(Copy_u8String[Local_u8Iterator] != '\0')
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	fc 01       	movw	r30, r24
     f16:	e2 0f       	add	r30, r18
     f18:	f3 1f       	adc	r31, r19
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	39 f7       	brne	.-50     	; 0xeee <CLCD_vidSendString+0x14>
	{
		CLCD_voidSendData(Copy_u8String[Local_u8Iterator]) ;
		Local_u8Iterator ++ ;
	}
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <CLCD_GoToXY>:

void CLCD_GoToXY(u8 xPos , u8 yPos)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <CLCD_GoToXY+0x6>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	8a 83       	std	Y+2, r24	; 0x02
     f3a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAMaddress = 0 ;
     f3c:	19 82       	std	Y+1, r1	; 0x01
	if (xPos == 0)
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	88 23       	and	r24, r24
     f42:	19 f4       	brne	.+6      	; 0xf4a <CLCD_GoToXY+0x1e>
	{
		Local_u8DDRAMaddress = yPos;
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	06 c0       	rjmp	.+12     	; 0xf56 <CLCD_GoToXY+0x2a>
	}
	else if (xPos == 1)
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	19 f4       	brne	.+6      	; 0xf56 <CLCD_GoToXY+0x2a>
	{
		Local_u8DDRAMaddress =yPos + 0x40 ;
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	80 5c       	subi	r24, 0xC0	; 192
     f54:	89 83       	std	Y+1, r24	; 0x01
	}

	CLCD_voidSendCommand(Local_u8DDRAMaddress + 128);
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	80 58       	subi	r24, 0x80	; 128
     f5a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

}
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8 *Copy_u8Pattern , u8 Copy_u8PatternNumber , u8 xPos , u8 yPos)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	27 97       	sbiw	r28, 0x07	; 7
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	9c 83       	std	Y+4, r25	; 0x04
     f80:	8b 83       	std	Y+3, r24	; 0x03
     f82:	6d 83       	std	Y+5, r22	; 0x05
     f84:	4e 83       	std	Y+6, r20	; 0x06
     f86:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMaddress = 0  , Local_u8Iterator ;
     f88:	1a 82       	std	Y+2, r1	; 0x02

	/*Calculate CGRAM Address whose each location is 8 bytes*/
	Local_u8CGRAMaddress = Copy_u8PatternNumber * 8 ;
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	88 2f       	mov	r24, r24
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	8a 83       	std	Y+2, r24	; 0x02

	/*Send CGRAM address command to LCD*/
	CLCD_voidSendCommand(Local_u8CGRAMaddress + 64);
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	80 5c       	subi	r24, 0xC0	; 192
     fa2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/*Write the Pattern into CGRAM*/
	for (Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
     fa6:	19 82       	std	Y+1, r1	; 0x01
     fa8:	0e c0       	rjmp	.+28     	; 0xfc6 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8Iterator]);
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	fc 01       	movw	r30, r24
     fb6:	e2 0f       	add	r30, r18
     fb8:	f3 1f       	adc	r31, r19
     fba:	80 81       	ld	r24, Z
     fbc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>

	/*Send CGRAM address command to LCD*/
	CLCD_voidSendCommand(Local_u8CGRAMaddress + 64);

	/*Write the Pattern into CGRAM*/
	for (Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator ++)
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	88 30       	cpi	r24, 0x08	; 8
     fca:	78 f3       	brcs	.-34     	; 0xfaa <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8Iterator]);
	}

	/*go back to DDRAM to Display the pattern*/
	CLCD_GoToXY(xPos , yPos);
     fcc:	8e 81       	ldd	r24, Y+6	; 0x06
     fce:	6f 81       	ldd	r22, Y+7	; 0x07
     fd0:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>

	/*Display data written in CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
}
     fda:	27 96       	adiw	r28, 0x07	; 7
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <CLCD_write_Number>:
	}*/

//}

void CLCD_write_Number(u16 Copy_u16DecNum)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <CLCD_write_Number+0x6>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <CLCD_write_Number+0x8>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	9c 83       	std	Y+4, r25	; 0x04
     ffa:	8b 83       	std	Y+3, r24	; 0x03
	static u8 arr_Two_Digits[2] ;
	static u8 arr_Three_Digits[3] ;
	static u8 arr_Four_Digits[4] ;
	u8 index = 0 ;
     ffc:	1a 82       	std	Y+2, r1	; 0x02
	u8 mod ;

	if (Copy_u16DecNum >9 && Copy_u16DecNum <= 99)
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	9c 81       	ldd	r25, Y+4	; 0x04
    1002:	8a 30       	cpi	r24, 0x0A	; 10
    1004:	91 05       	cpc	r25, r1
    1006:	90 f1       	brcs	.+100    	; 0x106c <CLCD_write_Number+0x80>
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	84 36       	cpi	r24, 0x64	; 100
    100e:	91 05       	cpc	r25, r1
    1010:	68 f5       	brcc	.+90     	; 0x106c <CLCD_write_Number+0x80>
    1012:	1d c0       	rjmp	.+58     	; 0x104e <CLCD_write_Number+0x62>
	{
		while (Copy_u16DecNum > 0)
		{
			mod = Copy_u16DecNum  % 10 ;
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	2a e0       	ldi	r18, 0x0A	; 10
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	b9 01       	movw	r22, r18
    101e:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__udivmodhi4>
    1022:	89 83       	std	Y+1, r24	; 0x01
			arr_Two_Digits[index] = mod ;
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	fc 01       	movw	r30, r24
    102c:	e9 50       	subi	r30, 0x09	; 9
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	80 83       	st	Z, r24
			Copy_u16DecNum /=10 ;
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	2a e0       	ldi	r18, 0x0A	; 10
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	b9 01       	movw	r22, r18
    103e:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__udivmodhi4>
    1042:	cb 01       	movw	r24, r22
    1044:	9c 83       	std	Y+4, r25	; 0x04
    1046:	8b 83       	std	Y+3, r24	; 0x03
			index ++ ;
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0 ;
	u8 mod ;

	if (Copy_u16DecNum >9 && Copy_u16DecNum <= 99)
	{
		while (Copy_u16DecNum > 0)
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	f9 f6       	brne	.-66     	; 0x1014 <CLCD_write_Number+0x28>
			arr_Two_Digits[index] = mod ;
			Copy_u16DecNum /=10 ;
			index ++ ;
		}

		CLCD_voidSendData(arr_Two_Digits[1] + '0') ;
    1056:	80 91 f8 00 	lds	r24, 0x00F8
    105a:	80 5d       	subi	r24, 0xD0	; 208
    105c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendData(arr_Two_Digits[0] + '0') ;
    1060:	80 91 f7 00 	lds	r24, 0x00F7
    1064:	80 5d       	subi	r24, 0xD0	; 208
    1066:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    106a:	89 c0       	rjmp	.+274    	; 0x117e <CLCD_write_Number+0x192>
	}
	else if (Copy_u16DecNum > 99 && Copy_u16DecNum <= 999)
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	84 36       	cpi	r24, 0x64	; 100
    1072:	91 05       	cpc	r25, r1
    1074:	c0 f1       	brcs	.+112    	; 0x10e6 <CLCD_write_Number+0xfa>
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	23 e0       	ldi	r18, 0x03	; 3
    107c:	88 3e       	cpi	r24, 0xE8	; 232
    107e:	92 07       	cpc	r25, r18
    1080:	90 f5       	brcc	.+100    	; 0x10e6 <CLCD_write_Number+0xfa>
    1082:	1d c0       	rjmp	.+58     	; 0x10be <CLCD_write_Number+0xd2>
	{
		while (Copy_u16DecNum > 0)
		{
			mod = Copy_u16DecNum  % 10 ;
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	2a e0       	ldi	r18, 0x0A	; 10
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	b9 01       	movw	r22, r18
    108e:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__udivmodhi4>
    1092:	89 83       	std	Y+1, r24	; 0x01
			arr_Three_Digits[index] = mod ;
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	fc 01       	movw	r30, r24
    109c:	ec 50       	subi	r30, 0x0C	; 12
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	80 83       	st	Z, r24
			Copy_u16DecNum /=10 ;
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	9c 81       	ldd	r25, Y+4	; 0x04
    10a8:	2a e0       	ldi	r18, 0x0A	; 10
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	b9 01       	movw	r22, r18
    10ae:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__udivmodhi4>
    10b2:	cb 01       	movw	r24, r22
    10b4:	9c 83       	std	Y+4, r25	; 0x04
    10b6:	8b 83       	std	Y+3, r24	; 0x03
			index ++ ;
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	8f 5f       	subi	r24, 0xFF	; 255
    10bc:	8a 83       	std	Y+2, r24	; 0x02
		CLCD_voidSendData(arr_Two_Digits[1] + '0') ;
		CLCD_voidSendData(arr_Two_Digits[0] + '0') ;
	}
	else if (Copy_u16DecNum > 99 && Copy_u16DecNum <= 999)
	{
		while (Copy_u16DecNum > 0)
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	9c 81       	ldd	r25, Y+4	; 0x04
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	f9 f6       	brne	.-66     	; 0x1084 <CLCD_write_Number+0x98>
			arr_Three_Digits[index] = mod ;
			Copy_u16DecNum /=10 ;
			index ++ ;
		}

		CLCD_voidSendData(arr_Three_Digits[2] + '0') ;
    10c6:	80 91 f6 00 	lds	r24, 0x00F6
    10ca:	80 5d       	subi	r24, 0xD0	; 208
    10cc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendData(arr_Three_Digits[1] + '0') ;
    10d0:	80 91 f5 00 	lds	r24, 0x00F5
    10d4:	80 5d       	subi	r24, 0xD0	; 208
    10d6:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendData(arr_Three_Digits[0] + '0') ;
    10da:	80 91 f4 00 	lds	r24, 0x00F4
    10de:	80 5d       	subi	r24, 0xD0	; 208
    10e0:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    10e4:	4c c0       	rjmp	.+152    	; 0x117e <CLCD_write_Number+0x192>
	}
	else if (Copy_u16DecNum > 999 && Copy_u16DecNum <= 9999)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	23 e0       	ldi	r18, 0x03	; 3
    10ec:	88 3e       	cpi	r24, 0xE8	; 232
    10ee:	92 07       	cpc	r25, r18
    10f0:	e8 f1       	brcs	.+122    	; 0x116c <CLCD_write_Number+0x180>
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	27 e2       	ldi	r18, 0x27	; 39
    10f8:	80 31       	cpi	r24, 0x10	; 16
    10fa:	92 07       	cpc	r25, r18
    10fc:	b8 f5       	brcc	.+110    	; 0x116c <CLCD_write_Number+0x180>
    10fe:	1d c0       	rjmp	.+58     	; 0x113a <CLCD_write_Number+0x14e>
	{
		while (Copy_u16DecNum > 0)
		{
			mod = Copy_u16DecNum  % 10 ;
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	2a e0       	ldi	r18, 0x0A	; 10
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	b9 01       	movw	r22, r18
    110a:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__udivmodhi4>
    110e:	89 83       	std	Y+1, r24	; 0x01
			arr_Four_Digits[index] = mod ;
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	88 2f       	mov	r24, r24
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	fc 01       	movw	r30, r24
    1118:	e0 51       	subi	r30, 0x10	; 16
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	80 83       	st	Z, r24
			Copy_u16DecNum /=10 ;
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	2a e0       	ldi	r18, 0x0A	; 10
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	b9 01       	movw	r22, r18
    112a:	0e 94 ba 27 	call	0x4f74	; 0x4f74 <__udivmodhi4>
    112e:	cb 01       	movw	r24, r22
    1130:	9c 83       	std	Y+4, r25	; 0x04
    1132:	8b 83       	std	Y+3, r24	; 0x03
			index ++ ;
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	8f 5f       	subi	r24, 0xFF	; 255
    1138:	8a 83       	std	Y+2, r24	; 0x02
		CLCD_voidSendData(arr_Three_Digits[1] + '0') ;
		CLCD_voidSendData(arr_Three_Digits[0] + '0') ;
	}
	else if (Copy_u16DecNum > 999 && Copy_u16DecNum <= 9999)
	{
		while (Copy_u16DecNum > 0)
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	f9 f6       	brne	.-66     	; 0x1100 <CLCD_write_Number+0x114>
			arr_Four_Digits[index] = mod ;
			Copy_u16DecNum /=10 ;
			index ++ ;
		}

		CLCD_voidSendData(arr_Four_Digits[3] + '0') ;
    1142:	80 91 f3 00 	lds	r24, 0x00F3
    1146:	80 5d       	subi	r24, 0xD0	; 208
    1148:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendData(arr_Four_Digits[2] + '0') ;
    114c:	80 91 f2 00 	lds	r24, 0x00F2
    1150:	80 5d       	subi	r24, 0xD0	; 208
    1152:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendData(arr_Four_Digits[1] + '0') ;
    1156:	80 91 f1 00 	lds	r24, 0x00F1
    115a:	80 5d       	subi	r24, 0xD0	; 208
    115c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		CLCD_voidSendData(arr_Four_Digits[0] + '0') ;
    1160:	80 91 f0 00 	lds	r24, 0x00F0
    1164:	80 5d       	subi	r24, 0xD0	; 208
    1166:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    116a:	09 c0       	rjmp	.+18     	; 0x117e <CLCD_write_Number+0x192>
	}
	else if (Copy_u16DecNum >= 0 && Copy_u16DecNum <= 9)
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	8a 30       	cpi	r24, 0x0A	; 10
    1172:	91 05       	cpc	r25, r1
    1174:	20 f4       	brcc	.+8      	; 0x117e <CLCD_write_Number+0x192>
	{
		CLCD_voidSendData(Copy_u16DecNum + '0') ;
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	80 5d       	subi	r24, 0xD0	; 208
    117a:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	}
}
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <DIO_vidSetPinVal>:
#include "Bit_Math.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"
/**************FUNCTION IMPLEMENTATION************/
void DIO_vidSetPinVal(u8 portId, u8 pinId, u8 val)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	27 97       	sbiw	r28, 0x07	; 7
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	6a 83       	std	Y+2, r22	; 0x02
    11a4:	4b 83       	std	Y+3, r20	; 0x03
	if ((portId <= DIO_PORTD) && (pinId <= DIO_PIN7))//the range is right
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	84 30       	cpi	r24, 0x04	; 4
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <DIO_vidSetPinVal+0x22>
    11ac:	ee c0       	rjmp	.+476    	; 0x138a <DIO_vidSetPinVal+0x1fe>
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	88 30       	cpi	r24, 0x08	; 8
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <DIO_vidSetPinVal+0x2a>
    11b4:	ea c0       	rjmp	.+468    	; 0x138a <DIO_vidSetPinVal+0x1fe>
	{ if (val == DIO_HIGH)
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	09 f0       	breq	.+2      	; 0x11be <DIO_vidSetPinVal+0x32>
    11bc:	6f c0       	rjmp	.+222    	; 0x129c <DIO_vidSetPinVal+0x110>
	{
		switch(portId)
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3f 83       	std	Y+7, r19	; 0x07
    11c6:	2e 83       	std	Y+6, r18	; 0x06
    11c8:	8e 81       	ldd	r24, Y+6	; 0x06
    11ca:	9f 81       	ldd	r25, Y+7	; 0x07
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	91 05       	cpc	r25, r1
    11d0:	49 f1       	breq	.+82     	; 0x1224 <DIO_vidSetPinVal+0x98>
    11d2:	2e 81       	ldd	r18, Y+6	; 0x06
    11d4:	3f 81       	ldd	r19, Y+7	; 0x07
    11d6:	22 30       	cpi	r18, 0x02	; 2
    11d8:	31 05       	cpc	r19, r1
    11da:	2c f4       	brge	.+10     	; 0x11e6 <DIO_vidSetPinVal+0x5a>
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	61 f0       	breq	.+24     	; 0x11fc <DIO_vidSetPinVal+0x70>
    11e4:	d2 c0       	rjmp	.+420    	; 0x138a <DIO_vidSetPinVal+0x1fe>
    11e6:	2e 81       	ldd	r18, Y+6	; 0x06
    11e8:	3f 81       	ldd	r19, Y+7	; 0x07
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	71 f1       	breq	.+92     	; 0x124c <DIO_vidSetPinVal+0xc0>
    11f0:	8e 81       	ldd	r24, Y+6	; 0x06
    11f2:	9f 81       	ldd	r25, Y+7	; 0x07
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	91 05       	cpc	r25, r1
    11f8:	e9 f1       	breq	.+122    	; 0x1274 <DIO_vidSetPinVal+0xe8>
    11fa:	c7 c0       	rjmp	.+398    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		{
		case DIO_PORTA: SET_BIT(pinId,PORTA_REG);break;
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_vidSetPinVal+0x8e>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_vidSetPinVal+0x8a>
    121e:	84 2b       	or	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	b3 c0       	rjmp	.+358    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTB: SET_BIT(pinId,PORTB_REG);break;
    1224:	a8 e3       	ldi	r26, 0x38	; 56
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e8 e3       	ldi	r30, 0x38	; 56
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_vidSetPinVal+0xb6>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_vidSetPinVal+0xb2>
    1246:	84 2b       	or	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	9f c0       	rjmp	.+318    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTC: SET_BIT(pinId,PORTC_REG);break;
    124c:	a5 e3       	ldi	r26, 0x35	; 53
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e3       	ldi	r30, 0x35	; 53
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_vidSetPinVal+0xde>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_vidSetPinVal+0xda>
    126e:	84 2b       	or	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	8b c0       	rjmp	.+278    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTD: SET_BIT(pinId,PORTD_REG);break;
    1274:	a2 e3       	ldi	r26, 0x32	; 50
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e2 e3       	ldi	r30, 0x32	; 50
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_vidSetPinVal+0x106>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_vidSetPinVal+0x102>
    1296:	84 2b       	or	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	77 c0       	rjmp	.+238    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		}
	}
	else if (val == DIO_LOW)
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	88 23       	and	r24, r24
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <DIO_vidSetPinVal+0x118>
    12a2:	73 c0       	rjmp	.+230    	; 0x138a <DIO_vidSetPinVal+0x1fe>
	{
		switch(portId)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	3d 83       	std	Y+5, r19	; 0x05
    12ac:	2c 83       	std	Y+4, r18	; 0x04
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	9d 81       	ldd	r25, Y+5	; 0x05
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	91 05       	cpc	r25, r1
    12b6:	59 f1       	breq	.+86     	; 0x130e <DIO_vidSetPinVal+0x182>
    12b8:	2c 81       	ldd	r18, Y+4	; 0x04
    12ba:	3d 81       	ldd	r19, Y+5	; 0x05
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	2c f4       	brge	.+10     	; 0x12cc <DIO_vidSetPinVal+0x140>
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	69 f0       	breq	.+26     	; 0x12e4 <DIO_vidSetPinVal+0x158>
    12ca:	5f c0       	rjmp	.+190    	; 0x138a <DIO_vidSetPinVal+0x1fe>
    12cc:	2c 81       	ldd	r18, Y+4	; 0x04
    12ce:	3d 81       	ldd	r19, Y+5	; 0x05
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	89 f1       	breq	.+98     	; 0x1338 <DIO_vidSetPinVal+0x1ac>
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	91 05       	cpc	r25, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <DIO_vidSetPinVal+0x156>
    12e0:	40 c0       	rjmp	.+128    	; 0x1362 <DIO_vidSetPinVal+0x1d6>
    12e2:	53 c0       	rjmp	.+166    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		{
		case DIO_PORTA: CLR_BIT(pinId,PORTA_REG);break;
    12e4:	ab e3       	ldi	r26, 0x3B	; 59
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	eb e3       	ldi	r30, 0x3B	; 59
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_vidSetPinVal+0x176>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_vidSetPinVal+0x172>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
    130c:	3e c0       	rjmp	.+124    	; 0x138a <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTB: CLR_BIT(pinId,PORTB_REG);break;
    130e:	a8 e3       	ldi	r26, 0x38	; 56
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e8 e3       	ldi	r30, 0x38	; 56
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_vidSetPinVal+0x1a0>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_vidSetPinVal+0x19c>
    1330:	80 95       	com	r24
    1332:	84 23       	and	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	29 c0       	rjmp	.+82     	; 0x138a <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTC: CLR_BIT(pinId,PORTC_REG);break;
    1338:	a5 e3       	ldi	r26, 0x35	; 53
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e5 e3       	ldi	r30, 0x35	; 53
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_vidSetPinVal+0x1ca>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_vidSetPinVal+0x1c6>
    135a:	80 95       	com	r24
    135c:	84 23       	and	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	14 c0       	rjmp	.+40     	; 0x138a <DIO_vidSetPinVal+0x1fe>
		case DIO_PORTD: CLR_BIT(pinId,PORTD_REG);break;
    1362:	a2 e3       	ldi	r26, 0x32	; 50
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_vidSetPinVal+0x1f4>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_vidSetPinVal+0x1f0>
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	8c 93       	st	X, r24
	else//for future development
	{
		// Report Error
	}

}
    138a:	27 96       	adiw	r28, 0x07	; 7
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <DIO_vidSetPinDir>:
void DIO_vidSetPinDir(u8 portId, u8 pinId, u8 dir)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	27 97       	sbiw	r28, 0x07	; 7
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	6a 83       	std	Y+2, r22	; 0x02
    13b4:	4b 83       	std	Y+3, r20	; 0x03
	if ((portId <= DIO_PORTD) && (pinId <= DIO_PIN7))
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	84 30       	cpi	r24, 0x04	; 4
    13ba:	08 f0       	brcs	.+2      	; 0x13be <DIO_vidSetPinDir+0x22>
    13bc:	ee c0       	rjmp	.+476    	; 0x159a <DIO_vidSetPinDir+0x1fe>
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	88 30       	cpi	r24, 0x08	; 8
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <DIO_vidSetPinDir+0x2a>
    13c4:	ea c0       	rjmp	.+468    	; 0x159a <DIO_vidSetPinDir+0x1fe>
	{ if (dir == DIO_OUTPUT)
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	09 f0       	breq	.+2      	; 0x13ce <DIO_vidSetPinDir+0x32>
    13cc:	6f c0       	rjmp	.+222    	; 0x14ac <DIO_vidSetPinDir+0x110>
	{
		switch(portId)
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	3f 83       	std	Y+7, r19	; 0x07
    13d6:	2e 83       	std	Y+6, r18	; 0x06
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	91 05       	cpc	r25, r1
    13e0:	49 f1       	breq	.+82     	; 0x1434 <DIO_vidSetPinDir+0x98>
    13e2:	2e 81       	ldd	r18, Y+6	; 0x06
    13e4:	3f 81       	ldd	r19, Y+7	; 0x07
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <DIO_vidSetPinDir+0x5a>
    13ec:	8e 81       	ldd	r24, Y+6	; 0x06
    13ee:	9f 81       	ldd	r25, Y+7	; 0x07
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	61 f0       	breq	.+24     	; 0x140c <DIO_vidSetPinDir+0x70>
    13f4:	d2 c0       	rjmp	.+420    	; 0x159a <DIO_vidSetPinDir+0x1fe>
    13f6:	2e 81       	ldd	r18, Y+6	; 0x06
    13f8:	3f 81       	ldd	r19, Y+7	; 0x07
    13fa:	22 30       	cpi	r18, 0x02	; 2
    13fc:	31 05       	cpc	r19, r1
    13fe:	71 f1       	breq	.+92     	; 0x145c <DIO_vidSetPinDir+0xc0>
    1400:	8e 81       	ldd	r24, Y+6	; 0x06
    1402:	9f 81       	ldd	r25, Y+7	; 0x07
    1404:	83 30       	cpi	r24, 0x03	; 3
    1406:	91 05       	cpc	r25, r1
    1408:	e9 f1       	breq	.+122    	; 0x1484 <DIO_vidSetPinDir+0xe8>
    140a:	c7 c0       	rjmp	.+398    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		{
		case DIO_PORTA: SET_BIT(pinId,DDRA_REG);break;
    140c:	aa e3       	ldi	r26, 0x3A	; 58
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ea e3       	ldi	r30, 0x3A	; 58
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_vidSetPinDir+0x8e>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_vidSetPinDir+0x8a>
    142e:	84 2b       	or	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	b3 c0       	rjmp	.+358    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTB: SET_BIT(pinId,DDRB_REG);break;
    1434:	a7 e3       	ldi	r26, 0x37	; 55
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e7 e3       	ldi	r30, 0x37	; 55
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <DIO_vidSetPinDir+0xb6>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <DIO_vidSetPinDir+0xb2>
    1456:	84 2b       	or	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	9f c0       	rjmp	.+318    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTC: SET_BIT(pinId,DDRC_REG);break;
    145c:	a4 e3       	ldi	r26, 0x34	; 52
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e4 e3       	ldi	r30, 0x34	; 52
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_vidSetPinDir+0xde>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_vidSetPinDir+0xda>
    147e:	84 2b       	or	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	8b c0       	rjmp	.+278    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTD: SET_BIT(pinId,DDRD_REG);break;
    1484:	a1 e3       	ldi	r26, 0x31	; 49
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e1 e3       	ldi	r30, 0x31	; 49
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_vidSetPinDir+0x106>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_vidSetPinDir+0x102>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	77 c0       	rjmp	.+238    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		}
	}
	else if (dir == DIO_INPUT)
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	88 23       	and	r24, r24
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <DIO_vidSetPinDir+0x118>
    14b2:	73 c0       	rjmp	.+230    	; 0x159a <DIO_vidSetPinDir+0x1fe>
	{
		switch(portId)
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3d 83       	std	Y+5, r19	; 0x05
    14bc:	2c 83       	std	Y+4, r18	; 0x04
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	59 f1       	breq	.+86     	; 0x151e <DIO_vidSetPinDir+0x182>
    14c8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ca:	3d 81       	ldd	r19, Y+5	; 0x05
    14cc:	22 30       	cpi	r18, 0x02	; 2
    14ce:	31 05       	cpc	r19, r1
    14d0:	2c f4       	brge	.+10     	; 0x14dc <DIO_vidSetPinDir+0x140>
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	9d 81       	ldd	r25, Y+5	; 0x05
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	69 f0       	breq	.+26     	; 0x14f4 <DIO_vidSetPinDir+0x158>
    14da:	5f c0       	rjmp	.+190    	; 0x159a <DIO_vidSetPinDir+0x1fe>
    14dc:	2c 81       	ldd	r18, Y+4	; 0x04
    14de:	3d 81       	ldd	r19, Y+5	; 0x05
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	89 f1       	breq	.+98     	; 0x1548 <DIO_vidSetPinDir+0x1ac>
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	91 05       	cpc	r25, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <DIO_vidSetPinDir+0x156>
    14f0:	40 c0       	rjmp	.+128    	; 0x1572 <DIO_vidSetPinDir+0x1d6>
    14f2:	53 c0       	rjmp	.+166    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		{
		case DIO_PORTA: CLR_BIT(pinId,DDRA_REG);break;
    14f4:	aa e3       	ldi	r26, 0x3A	; 58
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	ea e3       	ldi	r30, 0x3A	; 58
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_vidSetPinDir+0x176>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_vidSetPinDir+0x172>
    1516:	80 95       	com	r24
    1518:	84 23       	and	r24, r20
    151a:	8c 93       	st	X, r24
    151c:	3e c0       	rjmp	.+124    	; 0x159a <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTB: CLR_BIT(pinId,DDRB_REG);break;
    151e:	a7 e3       	ldi	r26, 0x37	; 55
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e7 e3       	ldi	r30, 0x37	; 55
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_vidSetPinDir+0x1a0>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_vidSetPinDir+0x19c>
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	29 c0       	rjmp	.+82     	; 0x159a <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTC: CLR_BIT(pinId,DDRC_REG);break;
    1548:	a4 e3       	ldi	r26, 0x34	; 52
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e4 e3       	ldi	r30, 0x34	; 52
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_vidSetPinDir+0x1ca>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_vidSetPinDir+0x1c6>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	14 c0       	rjmp	.+40     	; 0x159a <DIO_vidSetPinDir+0x1fe>
		case DIO_PORTD: CLR_BIT(pinId,DDRD_REG);break;
    1572:	a1 e3       	ldi	r26, 0x31	; 49
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e1 e3       	ldi	r30, 0x31	; 49
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_vidSetPinDir+0x1f4>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_vidSetPinDir+0x1f0>
    1594:	80 95       	com	r24
    1596:	84 23       	and	r24, r20
    1598:	8c 93       	st	X, r24
	else
	{
		// Report Error
	}

}
    159a:	27 96       	adiw	r28, 0x07	; 7
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <DIO_vidSetPortVal>:
void DIO_vidSetPortVal(u8 portId, u8 portval)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <DIO_vidSetPortVal+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <DIO_vidSetPortVal+0x8>
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	6a 83       	std	Y+2, r22	; 0x02
	if (portId <= DIO_PORTD)
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	84 30       	cpi	r24, 0x04	; 4
    15c0:	90 f5       	brcc	.+100    	; 0x1626 <DIO_vidSetPortVal+0x7a>
	{
		switch(portId)
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3c 83       	std	Y+4, r19	; 0x04
    15ca:	2b 83       	std	Y+3, r18	; 0x03
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	d1 f0       	breq	.+52     	; 0x160a <DIO_vidSetPortVal+0x5e>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	2c f4       	brge	.+10     	; 0x15ea <DIO_vidSetPortVal+0x3e>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	61 f0       	breq	.+24     	; 0x1600 <DIO_vidSetPortVal+0x54>
    15e8:	1e c0       	rjmp	.+60     	; 0x1626 <DIO_vidSetPortVal+0x7a>
    15ea:	2b 81       	ldd	r18, Y+3	; 0x03
    15ec:	3c 81       	ldd	r19, Y+4	; 0x04
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	81 f0       	breq	.+32     	; 0x1614 <DIO_vidSetPortVal+0x68>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	83 30       	cpi	r24, 0x03	; 3
    15fa:	91 05       	cpc	r25, r1
    15fc:	81 f0       	breq	.+32     	; 0x161e <DIO_vidSetPortVal+0x72>
    15fe:	13 c0       	rjmp	.+38     	; 0x1626 <DIO_vidSetPortVal+0x7a>
		{
		case DIO_PORTA: PORTA_REG = portval;break;
    1600:	eb e3       	ldi	r30, 0x3B	; 59
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	80 83       	st	Z, r24
    1608:	0e c0       	rjmp	.+28     	; 0x1626 <DIO_vidSetPortVal+0x7a>
		case DIO_PORTB: PORTB_REG = portval;break;
    160a:	e8 e3       	ldi	r30, 0x38	; 56
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	80 83       	st	Z, r24
    1612:	09 c0       	rjmp	.+18     	; 0x1626 <DIO_vidSetPortVal+0x7a>
		case DIO_PORTC: PORTC_REG = portval;break;
    1614:	e5 e3       	ldi	r30, 0x35	; 53
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	80 83       	st	Z, r24
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <DIO_vidSetPortVal+0x7a>
		case DIO_PORTD: PORTD_REG = portval;break;
    161e:	e2 e3       	ldi	r30, 0x32	; 50
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	80 83       	st	Z, r24
		}
	}
}
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <DIO_vidSetPortDir>:

void DIO_vidSetPortDir(u8 portId, u8 portdir)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <DIO_vidSetPortDir+0x6>
    163a:	00 d0       	rcall	.+0      	; 0x163c <DIO_vidSetPortDir+0x8>
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	6a 83       	std	Y+2, r22	; 0x02
	if (portId <= DIO_PORTD)
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	84 30       	cpi	r24, 0x04	; 4
    1648:	90 f5       	brcc	.+100    	; 0x16ae <DIO_vidSetPortDir+0x7a>
	{
		switch(portId)
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3c 83       	std	Y+4, r19	; 0x04
    1652:	2b 83       	std	Y+3, r18	; 0x03
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	d1 f0       	breq	.+52     	; 0x1692 <DIO_vidSetPortDir+0x5e>
    165e:	2b 81       	ldd	r18, Y+3	; 0x03
    1660:	3c 81       	ldd	r19, Y+4	; 0x04
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	2c f4       	brge	.+10     	; 0x1672 <DIO_vidSetPortDir+0x3e>
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	61 f0       	breq	.+24     	; 0x1688 <DIO_vidSetPortDir+0x54>
    1670:	1e c0       	rjmp	.+60     	; 0x16ae <DIO_vidSetPortDir+0x7a>
    1672:	2b 81       	ldd	r18, Y+3	; 0x03
    1674:	3c 81       	ldd	r19, Y+4	; 0x04
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	81 f0       	breq	.+32     	; 0x169c <DIO_vidSetPortDir+0x68>
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	83 30       	cpi	r24, 0x03	; 3
    1682:	91 05       	cpc	r25, r1
    1684:	81 f0       	breq	.+32     	; 0x16a6 <DIO_vidSetPortDir+0x72>
    1686:	13 c0       	rjmp	.+38     	; 0x16ae <DIO_vidSetPortDir+0x7a>
		{
		case DIO_PORTA: DDRA_REG = portdir;break;
    1688:	ea e3       	ldi	r30, 0x3A	; 58
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	80 83       	st	Z, r24
    1690:	0e c0       	rjmp	.+28     	; 0x16ae <DIO_vidSetPortDir+0x7a>
		case DIO_PORTB: DDRB_REG = portdir;break;
    1692:	e7 e3       	ldi	r30, 0x37	; 55
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	80 83       	st	Z, r24
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <DIO_vidSetPortDir+0x7a>
		case DIO_PORTC: DDRC_REG = portdir;break;
    169c:	e4 e3       	ldi	r30, 0x34	; 52
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	80 83       	st	Z, r24
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <DIO_vidSetPortDir+0x7a>
		case DIO_PORTD: DDRD_REG = portdir;break;
    16a6:	e1 e3       	ldi	r30, 0x31	; 49
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	80 83       	st	Z, r24
		}
	}
}
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 portId, u8 pinId , u8 *Ret_val)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	27 97       	sbiw	r28, 0x07	; 7
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	8a 83       	std	Y+2, r24	; 0x02
    16d2:	6b 83       	std	Y+3, r22	; 0x03
    16d4:	5d 83       	std	Y+5, r21	; 0x05
    16d6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0 ;
    16d8:	19 82       	std	Y+1, r1	; 0x01

	if ((Ret_val != NULL) && (pinId <= DIO_PIN7))
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	9d 81       	ldd	r25, Y+5	; 0x05
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <DIO_u8GetPinVal+0x28>
    16e2:	78 c0       	rjmp	.+240    	; 0x17d4 <DIO_u8GetPinVal+0x118>
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	88 30       	cpi	r24, 0x08	; 8
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <DIO_u8GetPinVal+0x30>
    16ea:	74 c0       	rjmp	.+232    	; 0x17d4 <DIO_u8GetPinVal+0x118>
	{
		switch(portId)
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	3f 83       	std	Y+7, r19	; 0x07
    16f4:	2e 83       	std	Y+6, r18	; 0x06
    16f6:	4e 81       	ldd	r20, Y+6	; 0x06
    16f8:	5f 81       	ldd	r21, Y+7	; 0x07
    16fa:	41 30       	cpi	r20, 0x01	; 1
    16fc:	51 05       	cpc	r21, r1
    16fe:	59 f1       	breq	.+86     	; 0x1756 <DIO_u8GetPinVal+0x9a>
    1700:	8e 81       	ldd	r24, Y+6	; 0x06
    1702:	9f 81       	ldd	r25, Y+7	; 0x07
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	91 05       	cpc	r25, r1
    1708:	34 f4       	brge	.+12     	; 0x1716 <DIO_u8GetPinVal+0x5a>
    170a:	2e 81       	ldd	r18, Y+6	; 0x06
    170c:	3f 81       	ldd	r19, Y+7	; 0x07
    170e:	21 15       	cp	r18, r1
    1710:	31 05       	cpc	r19, r1
    1712:	69 f0       	breq	.+26     	; 0x172e <DIO_u8GetPinVal+0x72>
    1714:	5c c0       	rjmp	.+184    	; 0x17ce <DIO_u8GetPinVal+0x112>
    1716:	4e 81       	ldd	r20, Y+6	; 0x06
    1718:	5f 81       	ldd	r21, Y+7	; 0x07
    171a:	42 30       	cpi	r20, 0x02	; 2
    171c:	51 05       	cpc	r21, r1
    171e:	79 f1       	breq	.+94     	; 0x177e <DIO_u8GetPinVal+0xc2>
    1720:	8e 81       	ldd	r24, Y+6	; 0x06
    1722:	9f 81       	ldd	r25, Y+7	; 0x07
    1724:	83 30       	cpi	r24, 0x03	; 3
    1726:	91 05       	cpc	r25, r1
    1728:	09 f4       	brne	.+2      	; 0x172c <DIO_u8GetPinVal+0x70>
    172a:	3d c0       	rjmp	.+122    	; 0x17a6 <DIO_u8GetPinVal+0xea>
    172c:	50 c0       	rjmp	.+160    	; 0x17ce <DIO_u8GetPinVal+0x112>
		{
		case DIO_PORTA: *Ret_val = GET_BIT(pinId,PINA_REG);break;
    172e:	e9 e3       	ldi	r30, 0x39	; 57
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a9 01       	movw	r20, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_u8GetPinVal+0x8a>
    1742:	55 95       	asr	r21
    1744:	47 95       	ror	r20
    1746:	8a 95       	dec	r24
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_u8GetPinVal+0x86>
    174a:	ca 01       	movw	r24, r20
    174c:	81 70       	andi	r24, 0x01	; 1
    174e:	ec 81       	ldd	r30, Y+4	; 0x04
    1750:	fd 81       	ldd	r31, Y+5	; 0x05
    1752:	80 83       	st	Z, r24
    1754:	41 c0       	rjmp	.+130    	; 0x17d8 <DIO_u8GetPinVal+0x11c>
		case DIO_PORTB: *Ret_val = GET_BIT(pinId,PINB_REG);break;
    1756:	e6 e3       	ldi	r30, 0x36	; 54
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a9 01       	movw	r20, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <DIO_u8GetPinVal+0xb2>
    176a:	55 95       	asr	r21
    176c:	47 95       	ror	r20
    176e:	8a 95       	dec	r24
    1770:	e2 f7       	brpl	.-8      	; 0x176a <DIO_u8GetPinVal+0xae>
    1772:	ca 01       	movw	r24, r20
    1774:	81 70       	andi	r24, 0x01	; 1
    1776:	ec 81       	ldd	r30, Y+4	; 0x04
    1778:	fd 81       	ldd	r31, Y+5	; 0x05
    177a:	80 83       	st	Z, r24
    177c:	2d c0       	rjmp	.+90     	; 0x17d8 <DIO_u8GetPinVal+0x11c>
		case DIO_PORTC: *Ret_val = GET_BIT(pinId,PINC_REG);break;
    177e:	e3 e3       	ldi	r30, 0x33	; 51
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a9 01       	movw	r20, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_u8GetPinVal+0xda>
    1792:	55 95       	asr	r21
    1794:	47 95       	ror	r20
    1796:	8a 95       	dec	r24
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_u8GetPinVal+0xd6>
    179a:	ca 01       	movw	r24, r20
    179c:	81 70       	andi	r24, 0x01	; 1
    179e:	ec 81       	ldd	r30, Y+4	; 0x04
    17a0:	fd 81       	ldd	r31, Y+5	; 0x05
    17a2:	80 83       	st	Z, r24
    17a4:	19 c0       	rjmp	.+50     	; 0x17d8 <DIO_u8GetPinVal+0x11c>
		case DIO_PORTD: *Ret_val = GET_BIT(pinId,PIND_REG);break;
    17a6:	e0 e3       	ldi	r30, 0x30	; 48
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a9 01       	movw	r20, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_u8GetPinVal+0x102>
    17ba:	55 95       	asr	r21
    17bc:	47 95       	ror	r20
    17be:	8a 95       	dec	r24
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_u8GetPinVal+0xfe>
    17c2:	ca 01       	movw	r24, r20
    17c4:	81 70       	andi	r24, 0x01	; 1
    17c6:	ec 81       	ldd	r30, Y+4	; 0x04
    17c8:	fd 81       	ldd	r31, Y+5	; 0x05
    17ca:	80 83       	st	Z, r24
    17cc:	05 c0       	rjmp	.+10     	; 0x17d8 <DIO_u8GetPinVal+0x11c>
		default : Local_u8ErrorState = 1 ;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_u8GetPinVal+0x11c>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17da:	27 96       	adiw	r28, 0x07	; 7
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <EXTI_Int0_Inti>:
void (*EXTI_PvINT0Func)(void) = NULL_Pointer;
void (*EXTI_PvINT2Func)(void) = NULL_Pointer;

#if EXTI_Int_Src == INT_0
void EXTI_Int0_Inti(void)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
#elif INT0_sense == On_change
	SET_BIT(ISC00,MCUCR);
	CLR_BIT(ISC01,MCUCR);

#elif INT0_sense == Falling_Edge
	CLR_BIT(ISC00,MCUCR);
    17f4:	a5 e5       	ldi	r26, 0x55	; 85
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e5 e5       	ldi	r30, 0x55	; 85
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8e 7f       	andi	r24, 0xFE	; 254
    1800:	8c 93       	st	X, r24
	SET_BIT(ISC01,MCUCR);
    1802:	a5 e5       	ldi	r26, 0x55	; 85
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e5 e5       	ldi	r30, 0x55	; 85
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	82 60       	ori	r24, 0x02	; 2
    180e:	8c 93       	st	X, r24

#endif

  /*INT0 Enable*/
#if INT0_State == ENABLED
	SET_BIT(INT_0,GICR);
    1810:	ab e5       	ldi	r26, 0x5B	; 91
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	eb e5       	ldi	r30, 0x5B	; 91
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	80 64       	ori	r24, 0x40	; 64
    181c:	8c 93       	st	X, r24
#elif INT0_State == DISABLED
	CLR_BIT(INT_0,GICR);
#else
#error "Wrong State"
#endif
}
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <INT0_Interrupt_State>:

u8 INT0_Interrupt_State(u8 Copy_State)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <INT0_Interrupt_State+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <INT0_Interrupt_State+0x8>
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState = OK;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_State)
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3c 83       	std	Y+4, r19	; 0x04
    183e:	2b 83       	std	Y+3, r18	; 0x03
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	69 f0       	breq	.+26     	; 0x1862 <INT0_Interrupt_State+0x3e>
    1848:	2b 81       	ldd	r18, Y+3	; 0x03
    184a:	3c 81       	ldd	r19, Y+4	; 0x04
    184c:	21 30       	cpi	r18, 0x01	; 1
    184e:	31 05       	cpc	r19, r1
    1850:	81 f4       	brne	.+32     	; 0x1872 <INT0_Interrupt_State+0x4e>
	{
	case ENABLED :
		SET_BIT(INT_0,GICR);
    1852:	ab e5       	ldi	r26, 0x5B	; 91
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	eb e5       	ldi	r30, 0x5B	; 91
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	80 64       	ori	r24, 0x40	; 64
    185e:	8c 93       	st	X, r24
    1860:	0a c0       	rjmp	.+20     	; 0x1876 <INT0_Interrupt_State+0x52>
		break;
	case DISABLED :
		CLR_BIT(INT_0,GICR);
    1862:	ab e5       	ldi	r26, 0x5B	; 91
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	eb e5       	ldi	r30, 0x5B	; 91
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8f 7b       	andi	r24, 0xBF	; 191
    186e:	8c 93       	st	X, r24
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <INT0_Interrupt_State+0x52>
		break;
	default :
		Local_ErrorState = NOK;
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState ;
    1876:	89 81       	ldd	r24, Y+1	; 0x01
}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <INT0_Sense_Control>:

u8 INT0_Sense_Control(u8 Copy_Sense_Control)
{
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <INT0_Sense_Control+0x6>
    188c:	00 d0       	rcall	.+0      	; 0x188e <INT0_Sense_Control+0x8>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState = OK;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_Sense_Control)
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	3c 83       	std	Y+4, r19	; 0x04
    18a0:	2b 83       	std	Y+3, r18	; 0x03
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	82 30       	cpi	r24, 0x02	; 2
    18a8:	91 05       	cpc	r25, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <INT0_Sense_Control+0x28>
    18ac:	43 c0       	rjmp	.+134    	; 0x1934 <INT0_Sense_Control+0xae>
    18ae:	2b 81       	ldd	r18, Y+3	; 0x03
    18b0:	3c 81       	ldd	r19, Y+4	; 0x04
    18b2:	23 30       	cpi	r18, 0x03	; 3
    18b4:	31 05       	cpc	r19, r1
    18b6:	34 f4       	brge	.+12     	; 0x18c4 <INT0_Sense_Control+0x3e>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	91 05       	cpc	r25, r1
    18c0:	51 f1       	breq	.+84     	; 0x1916 <INT0_Sense_Control+0x90>
    18c2:	47 c0       	rjmp	.+142    	; 0x1952 <INT0_Sense_Control+0xcc>
    18c4:	2b 81       	ldd	r18, Y+3	; 0x03
    18c6:	3c 81       	ldd	r19, Y+4	; 0x04
    18c8:	23 30       	cpi	r18, 0x03	; 3
    18ca:	31 05       	cpc	r19, r1
    18cc:	31 f0       	breq	.+12     	; 0x18da <INT0_Sense_Control+0x54>
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	91 05       	cpc	r25, r1
    18d6:	81 f0       	breq	.+32     	; 0x18f8 <INT0_Sense_Control+0x72>
    18d8:	3c c0       	rjmp	.+120    	; 0x1952 <INT0_Sense_Control+0xcc>
	{
	case Low_Level :
		CLR_BIT(ISC00,MCUCR);
    18da:	a5 e5       	ldi	r26, 0x55	; 85
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e5 e5       	ldi	r30, 0x55	; 85
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8e 7f       	andi	r24, 0xFE	; 254
    18e6:	8c 93       	st	X, r24
		CLR_BIT(ISC01,MCUCR);
    18e8:	a5 e5       	ldi	r26, 0x55	; 85
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e5 e5       	ldi	r30, 0x55	; 85
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	8d 7f       	andi	r24, 0xFD	; 253
    18f4:	8c 93       	st	X, r24
    18f6:	2f c0       	rjmp	.+94     	; 0x1956 <INT0_Sense_Control+0xd0>
		break;
	case On_change :
		SET_BIT(ISC00,MCUCR);
    18f8:	a5 e5       	ldi	r26, 0x55	; 85
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e5 e5       	ldi	r30, 0x55	; 85
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	81 60       	ori	r24, 0x01	; 1
    1904:	8c 93       	st	X, r24
		CLR_BIT(ISC01,MCUCR);
    1906:	a5 e5       	ldi	r26, 0x55	; 85
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e5 e5       	ldi	r30, 0x55	; 85
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	8d 7f       	andi	r24, 0xFD	; 253
    1912:	8c 93       	st	X, r24
    1914:	20 c0       	rjmp	.+64     	; 0x1956 <INT0_Sense_Control+0xd0>
		break;
	case Falling_Edge :
		CLR_BIT(ISC00,MCUCR);
    1916:	a5 e5       	ldi	r26, 0x55	; 85
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e5 e5       	ldi	r30, 0x55	; 85
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	8e 7f       	andi	r24, 0xFE	; 254
    1922:	8c 93       	st	X, r24
		SET_BIT(ISC01,MCUCR);
    1924:	a5 e5       	ldi	r26, 0x55	; 85
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e5 e5       	ldi	r30, 0x55	; 85
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	82 60       	ori	r24, 0x02	; 2
    1930:	8c 93       	st	X, r24
    1932:	11 c0       	rjmp	.+34     	; 0x1956 <INT0_Sense_Control+0xd0>
		break;
	case Rising_Edge :
		SET_BIT(ISC00,MCUCR);
    1934:	a5 e5       	ldi	r26, 0x55	; 85
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e5 e5       	ldi	r30, 0x55	; 85
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	81 60       	ori	r24, 0x01	; 1
    1940:	8c 93       	st	X, r24
		SET_BIT(ISC01,MCUCR);
    1942:	a5 e5       	ldi	r26, 0x55	; 85
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e5 e5       	ldi	r30, 0x55	; 85
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	82 60       	ori	r24, 0x02	; 2
    194e:	8c 93       	st	X, r24
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <INT0_Sense_Control+0xd0>
		break;
	default :
		Local_ErrorState = NOK;
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState ;
    1956:	89 81       	ldd	r24, Y+1	; 0x01
}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <EXTI_INT0SetCallBack>:
#endif
}
#endif

u8 EXTI_INT0SetCallBack(void (*Copy_PvINT0Func)(void))
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <EXTI_INT0SetCallBack+0x6>
    196c:	0f 92       	push	r0
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	9b 83       	std	Y+3, r25	; 0x03
    1974:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState = OK;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_PvINT0Func != NULL_Pointer)
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	9b 81       	ldd	r25, Y+3	; 0x03
    197e:	83 30       	cpi	r24, 0x03	; 3
    1980:	91 05       	cpc	r25, r1
    1982:	39 f0       	breq	.+14     	; 0x1992 <EXTI_INT0SetCallBack+0x2c>
	{
		EXTI_PvINT0Func = Copy_PvINT0Func;
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	9b 81       	ldd	r25, Y+3	; 0x03
    1988:	90 93 d2 00 	sts	0x00D2, r25
    198c:	80 93 d1 00 	sts	0x00D1, r24
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <EXTI_INT0SetCallBack+0x30>
	}
	else
	{
		Local_ErrorState = NULL_Pointer ;
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState ;
    1996:	89 81       	ldd	r24, Y+1	; 0x01
}
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <EXTI_INT2SetCallBack>:


u8 EXTI_INT2SetCallBack(void (*Copy_PvINT2Func)(void))
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <EXTI_INT2SetCallBack+0x6>
    19aa:	0f 92       	push	r0
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	9b 83       	std	Y+3, r25	; 0x03
    19b2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState = OK;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_PvINT2Func != NULL_Pointer)
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	9b 81       	ldd	r25, Y+3	; 0x03
    19bc:	83 30       	cpi	r24, 0x03	; 3
    19be:	91 05       	cpc	r25, r1
    19c0:	39 f0       	breq	.+14     	; 0x19d0 <EXTI_INT2SetCallBack+0x2c>
	{
		EXTI_PvINT2Func = Copy_PvINT2Func;
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	9b 81       	ldd	r25, Y+3	; 0x03
    19c6:	90 93 d4 00 	sts	0x00D4, r25
    19ca:	80 93 d3 00 	sts	0x00D3, r24
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <EXTI_INT2SetCallBack+0x30>
	}
	else
	{
		Local_ErrorState = NULL_Pointer ;
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState ;
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <__vector_1>:


void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    19e2:	1f 92       	push	r1
    19e4:	0f 92       	push	r0
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	0f 92       	push	r0
    19ea:	11 24       	eor	r1, r1
    19ec:	2f 93       	push	r18
    19ee:	3f 93       	push	r19
    19f0:	4f 93       	push	r20
    19f2:	5f 93       	push	r21
    19f4:	6f 93       	push	r22
    19f6:	7f 93       	push	r23
    19f8:	8f 93       	push	r24
    19fa:	9f 93       	push	r25
    19fc:	af 93       	push	r26
    19fe:	bf 93       	push	r27
    1a00:	ef 93       	push	r30
    1a02:	ff 93       	push	r31
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_PvINT0Func != NULL_Pointer)
    1a0c:	80 91 d1 00 	lds	r24, 0x00D1
    1a10:	90 91 d2 00 	lds	r25, 0x00D2
    1a14:	83 30       	cpi	r24, 0x03	; 3
    1a16:	91 05       	cpc	r25, r1
    1a18:	29 f0       	breq	.+10     	; 0x1a24 <__vector_1+0x42>
	{
		EXTI_PvINT0Func();
    1a1a:	e0 91 d1 00 	lds	r30, 0x00D1
    1a1e:	f0 91 d2 00 	lds	r31, 0x00D2
    1a22:	09 95       	icall
	}
	else
	{
		/*Do no thing*/
	}
}
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	ff 91       	pop	r31
    1a2a:	ef 91       	pop	r30
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	7f 91       	pop	r23
    1a36:	6f 91       	pop	r22
    1a38:	5f 91       	pop	r21
    1a3a:	4f 91       	pop	r20
    1a3c:	3f 91       	pop	r19
    1a3e:	2f 91       	pop	r18
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <__vector_3>:

void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	0f 92       	push	r0
    1a52:	11 24       	eor	r1, r1
    1a54:	2f 93       	push	r18
    1a56:	3f 93       	push	r19
    1a58:	4f 93       	push	r20
    1a5a:	5f 93       	push	r21
    1a5c:	6f 93       	push	r22
    1a5e:	7f 93       	push	r23
    1a60:	8f 93       	push	r24
    1a62:	9f 93       	push	r25
    1a64:	af 93       	push	r26
    1a66:	bf 93       	push	r27
    1a68:	ef 93       	push	r30
    1a6a:	ff 93       	push	r31
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_PvINT2Func != NULL_Pointer)
    1a74:	80 91 d3 00 	lds	r24, 0x00D3
    1a78:	90 91 d4 00 	lds	r25, 0x00D4
    1a7c:	83 30       	cpi	r24, 0x03	; 3
    1a7e:	91 05       	cpc	r25, r1
    1a80:	29 f0       	breq	.+10     	; 0x1a8c <__vector_3+0x42>
	{
		EXTI_PvINT2Func();
    1a82:	e0 91 d3 00 	lds	r30, 0x00D3
    1a86:	f0 91 d4 00 	lds	r31, 0x00D4
    1a8a:	09 95       	icall
	}
	else
	{
		/*Do no thing*/
	}
}
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	7f 91       	pop	r23
    1a9e:	6f 91       	pop	r22
    1aa0:	5f 91       	pop	r21
    1aa2:	4f 91       	pop	r20
    1aa4:	3f 91       	pop	r19
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	0f 90       	pop	r0
    1aae:	1f 90       	pop	r1
    1ab0:	18 95       	reti

00001ab2 <GLOBAL_Init>:

#include "avr/delay.h"


void GLOBAL_Init(void)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
#if Status == ENABLED
	SET_BIT(I,SREG);
    1aba:	af e5       	ldi	r26, 0x5F	; 95
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	ef e5       	ldi	r30, 0x5F	; 95
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	80 68       	ori	r24, 0x80	; 128
    1ac6:	8c 93       	st	X, r24
#elif Status == DISABLED
	CLR_BIT(I,SREG);
#endif
}
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <Enable_Global_Interrupt>:


void Enable_Global_Interrupt()
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(I,SREG);
    1ad6:	af e5       	ldi	r26, 0x5F	; 95
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	ef e5       	ldi	r30, 0x5F	; 95
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	80 68       	ori	r24, 0x80	; 128
    1ae2:	8c 93       	st	X, r24

}
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <Disable_Global_Interrupt>:


void Disable_Global_Interrupt()
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(I,SREG);
    1af2:	af e5       	ldi	r26, 0x5F	; 95
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	ef e5       	ldi	r30, 0x5F	; 95
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8f 77       	andi	r24, 0x7F	; 127
    1afe:	8c 93       	st	X, r24
}
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <KPD_GetKeyPressed>:
#include "KPD_private.h"



u8 KPD_GetKeyPressed(void)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <KPD_GetKeyPressed+0x6>
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <KPD_GetKeyPressed+0x8>
    1b0e:	0f 92       	push	r0
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	u8 pressed_key =KPD_NOT_PRESSED_KEY;
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	8b 83       	std	Y+3, r24	; 0x03

	static u8 KPD_Arr[KPD_NUM_ROWS][KPD_NUM_COLS] = KPD_ARR_VAL;

	static u8 KPD_COL_Arr[KPD_NUM_COLS] = {KPD_COL0_PIN , KPD_COL1_PIN ,  KPD_COL2_PIN , KPD_COL3_PIN};
	static u8 KPD_ROW_Arr[KPD_NUM_ROWS] = {KPD_ROW0_PIN ,KPD_ROW1_PIN ,KPD_ROW2_PIN , KPD_ROW3_PIN};
	for(col=0 ; col<KPD_NUM_COLS ; col++)
    1b18:	19 82       	std	Y+1, r1	; 0x01
    1b1a:	5e c0       	rjmp	.+188    	; 0x1bd8 <KPD_GetKeyPressed+0xd2>
	{
		/*Activate Current Col*/
		DIO_vidSetPinVal(KPD_PORT,KPD_COL_Arr[col],DIO_LOW);
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	88 2f       	mov	r24, r24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	fc 01       	movw	r30, r24
    1b24:	e7 52       	subi	r30, 0x27	; 39
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	90 81       	ld	r25, Z
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	69 2f       	mov	r22, r25
    1b2e:	40 e0       	ldi	r20, 0x00	; 0
    1b30:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

		for(row = 0 ; row < KPD_NUM_ROWS ; row++)
    1b34:	1a 82       	std	Y+2, r1	; 0x02
    1b36:	3d c0       	rjmp	.+122    	; 0x1bb2 <KPD_GetKeyPressed+0xac>
		{
			/*Read Current Row*/
			DIO_u8GetPinVal(KPD_PORT,KPD_ROW_Arr[row] , &Local_State) ;
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	fc 01       	movw	r30, r24
    1b40:	eb 52       	subi	r30, 0x2B	; 43
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	90 81       	ld	r25, Z
    1b46:	9e 01       	movw	r18, r28
    1b48:	2c 5f       	subi	r18, 0xFC	; 252
    1b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	69 2f       	mov	r22, r25
    1b50:	a9 01       	movw	r20, r18
    1b52:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <DIO_u8GetPinVal>

			if (DIO_LOW == Local_State)
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	88 23       	and	r24, r24
    1b5a:	41 f5       	brne	.+80     	; 0x1bac <KPD_GetKeyPressed+0xa6>
			{
				pressed_key = KPD_Arr[row][col];
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	48 2f       	mov	r20, r24
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	ca 01       	movw	r24, r20
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	82 0f       	add	r24, r18
    1b74:	93 1f       	adc	r25, r19
    1b76:	fc 01       	movw	r30, r24
    1b78:	e3 52       	subi	r30, 0x23	; 35
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	80 81       	ld	r24, Z
    1b7e:	8b 83       	std	Y+3, r24	; 0x03
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <KPD_GetKeyPressed+0x9a>

				/*Polling if he still push button read it again*/
				while(DIO_LOW == Local_State)
				{
					DIO_u8GetPinVal(KPD_PORT,KPD_ROW_Arr[row] , &Local_State);
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	fc 01       	movw	r30, r24
    1b8a:	eb 52       	subi	r30, 0x2B	; 43
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	90 81       	ld	r25, Z
    1b90:	9e 01       	movw	r18, r28
    1b92:	2c 5f       	subi	r18, 0xFC	; 252
    1b94:	3f 4f       	sbci	r19, 0xFF	; 255
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	69 2f       	mov	r22, r25
    1b9a:	a9 01       	movw	r20, r18
    1b9c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <DIO_u8GetPinVal>
			if (DIO_LOW == Local_State)
			{
				pressed_key = KPD_Arr[row][col];

				/*Polling if he still push button read it again*/
				while(DIO_LOW == Local_State)
    1ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba2:	88 23       	and	r24, r24
    1ba4:	71 f3       	breq	.-36     	; 0x1b82 <KPD_GetKeyPressed+0x7c>
				{
					DIO_u8GetPinVal(KPD_PORT,KPD_ROW_Arr[row] , &Local_State);
				}
				return pressed_key;
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
    1baa:	1c c0       	rjmp	.+56     	; 0x1be4 <KPD_GetKeyPressed+0xde>
	for(col=0 ; col<KPD_NUM_COLS ; col++)
	{
		/*Activate Current Col*/
		DIO_vidSetPinVal(KPD_PORT,KPD_COL_Arr[col],DIO_LOW);

		for(row = 0 ; row < KPD_NUM_ROWS ; row++)
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	8f 5f       	subi	r24, 0xFF	; 255
    1bb0:	8a 83       	std	Y+2, r24	; 0x02
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	84 30       	cpi	r24, 0x04	; 4
    1bb6:	08 f4       	brcc	.+2      	; 0x1bba <KPD_GetKeyPressed+0xb4>
    1bb8:	bf cf       	rjmp	.-130    	; 0x1b38 <KPD_GetKeyPressed+0x32>
				return pressed_key;

			}
		}
		/*Deactivate Current Col*/
		DIO_vidSetPinVal(KPD_PORT,KPD_COL_Arr[col],DIO_HIGH);
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	e7 52       	subi	r30, 0x27	; 39
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	90 81       	ld	r25, Z
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	69 2f       	mov	r22, r25
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

	static u8 KPD_Arr[KPD_NUM_ROWS][KPD_NUM_COLS] = KPD_ARR_VAL;

	static u8 KPD_COL_Arr[KPD_NUM_COLS] = {KPD_COL0_PIN , KPD_COL1_PIN ,  KPD_COL2_PIN , KPD_COL3_PIN};
	static u8 KPD_ROW_Arr[KPD_NUM_ROWS] = {KPD_ROW0_PIN ,KPD_ROW1_PIN ,KPD_ROW2_PIN , KPD_ROW3_PIN};
	for(col=0 ; col<KPD_NUM_COLS ; col++)
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	8f 5f       	subi	r24, 0xFF	; 255
    1bd6:	89 83       	std	Y+1, r24	; 0x01
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	08 f4       	brcc	.+2      	; 0x1be0 <KPD_GetKeyPressed+0xda>
    1bde:	9e cf       	rjmp	.-196    	; 0x1b1c <KPD_GetKeyPressed+0x16>
			}
		}
		/*Deactivate Current Col*/
		DIO_vidSetPinVal(KPD_PORT,KPD_COL_Arr[col],DIO_HIGH);
	}
	return pressed_key;
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <TWI_VoidMasterInit>:
#include "TWI_Ptivate.h"
#include "TWI_CFG.h"
#include "TWI_Interface.h"

void TWI_VoidMasterInit (u8 Copy_u8SlaveAddress)
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	0f 92       	push	r0
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	89 83       	std	Y+1, r24	; 0x01
	/*Set CLock Freq to 400kbps*/
	TWDR = 2 ;
    1c02:	e3 e2       	ldi	r30, 0x23	; 35
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	80 83       	st	Z, r24

	CLR_BIT(TWPS0 , TWSR);
    1c0a:	a1 e2       	ldi	r26, 0x21	; 33
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e1 e2       	ldi	r30, 0x21	; 33
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	8e 7f       	andi	r24, 0xFE	; 254
    1c16:	8c 93       	st	X, r24
	CLR_BIT(TWPS1 , TWSR);
    1c18:	a1 e2       	ldi	r26, 0x21	; 33
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e1 e2       	ldi	r30, 0x21	; 33
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	8d 7f       	andi	r24, 0xFD	; 253
    1c24:	8c 93       	st	X, r24

	/*Initialize The Node Address*/
	if (Copy_u8SlaveAddress != 0)
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	88 23       	and	r24, r24
    1c2a:	29 f0       	breq	.+10     	; 0x1c36 <TWI_VoidMasterInit+0x40>
	{
		TWAR = Copy_u8SlaveAddress << 1;
    1c2c:	e2 e2       	ldi	r30, 0x22	; 34
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	88 0f       	add	r24, r24
    1c34:	80 83       	st	Z, r24
	}

	/*Enable TWI*/
	SET_BIT(TWEN , TWCR);
    1c36:	a6 e5       	ldi	r26, 0x56	; 86
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e6 e5       	ldi	r30, 0x56	; 86
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	84 60       	ori	r24, 0x04	; 4
    1c42:	8c 93       	st	X, r24
}
    1c44:	0f 90       	pop	r0
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <TWI_VoidSlaveInit>:
void TWI_VoidSlaveInit (u8 Copy_u8SlaveAddress)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	0f 92       	push	r0
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	89 83       	std	Y+1, r24	; 0x01
	/*Initialize The Node Address*/
	TWAR = Copy_u8SlaveAddress << 1;
    1c58:	e2 e2       	ldi	r30, 0x22	; 34
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	88 0f       	add	r24, r24
    1c60:	80 83       	st	Z, r24

	/*Enable TWI*/
	SET_BIT(TWEN , TWCR);
    1c62:	a6 e5       	ldi	r26, 0x56	; 86
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e6 e5       	ldi	r30, 0x56	; 86
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	84 60       	ori	r24, 0x04	; 4
    1c6e:	8c 93       	st	X, r24

}
    1c70:	0f 90       	pop	r0
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <TWI_SendStatrtCondition>:
TWI_ErrStatus TWI_SendStatrtCondition (void)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	0f 92       	push	r0
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_ErrorStatus = NoError ;
    1c82:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition*/
	SET_BIT(TWSTA , TWCR);
    1c84:	a6 e5       	ldi	r26, 0x56	; 86
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e6 e5       	ldi	r30, 0x56	; 86
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	80 62       	ori	r24, 0x20	; 32
    1c90:	8c 93       	st	X, r24

	/*Clear The Interrupt flag To Start Previous Operation*/
	SET_BIT(TWINT , TWCR);
    1c92:	a6 e5       	ldi	r26, 0x56	; 86
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e6 e5       	ldi	r30, 0x56	; 86
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	80 68       	ori	r24, 0x80	; 128
    1c9e:	8c 93       	st	X, r24

	/*Wait Until Interrupt Flag Is raised Again and Previous operation Is Complete*/
	while (GET_BIT(TWINT , TWCR) != 0);
    1ca0:	e6 e5       	ldi	r30, 0x56	; 86
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	88 23       	and	r24, r24
    1ca8:	dc f3       	brlt	.-10     	; 0x1ca0 <TWI_SendStatrtCondition+0x28>

	if ((TWSR & 0xf8) != 0x08)
    1caa:	e1 e2       	ldi	r30, 0x21	; 33
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	88 7f       	andi	r24, 0xF8	; 248
    1cb6:	90 70       	andi	r25, 0x00	; 0
    1cb8:	88 30       	cpi	r24, 0x08	; 8
    1cba:	91 05       	cpc	r25, r1
    1cbc:	11 f0       	breq	.+4      	; 0x1cc2 <TWI_SendStatrtCondition+0x4a>
	{
		Local_ErrorStatus = StartConditError ;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	89 83       	std	Y+1, r24	; 0x01
		/*Do No Thing*/
	}



	return Local_ErrorStatus ;
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc4:	0f 90       	pop	r0
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <TWI_SendRepeatedStart>:
TWI_ErrStatus TWI_SendRepeatedStart (void)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	0f 92       	push	r0
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_ErrorStatus = NoError ;
    1cd6:	19 82       	std	Y+1, r1	; 0x01

	/*Send Start Condition*/
	SET_BIT(TWSTA , TWCR);
    1cd8:	a6 e5       	ldi	r26, 0x56	; 86
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e6 e5       	ldi	r30, 0x56	; 86
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	80 62       	ori	r24, 0x20	; 32
    1ce4:	8c 93       	st	X, r24

	/*Clear The Interrupt flag To Start Previous Operation*/
	SET_BIT(TWINT , TWCR);
    1ce6:	a6 e5       	ldi	r26, 0x56	; 86
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e6 e5       	ldi	r30, 0x56	; 86
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	80 68       	ori	r24, 0x80	; 128
    1cf2:	8c 93       	st	X, r24

	/*Wait Until Interrupt Flag Is raised Again and Previous operation Is Complete*/
	while (GET_BIT(TWINT , TWCR) != 0);
    1cf4:	e6 e5       	ldi	r30, 0x56	; 86
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	88 23       	and	r24, r24
    1cfc:	dc f3       	brlt	.-10     	; 0x1cf4 <TWI_SendRepeatedStart+0x28>

	if ((TWSR & 0xf8) != 0x10)
    1cfe:	e1 e2       	ldi	r30, 0x21	; 33
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	88 2f       	mov	r24, r24
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	88 7f       	andi	r24, 0xF8	; 248
    1d0a:	90 70       	andi	r25, 0x00	; 0
    1d0c:	80 31       	cpi	r24, 0x10	; 16
    1d0e:	91 05       	cpc	r25, r1
    1d10:	11 f0       	breq	.+4      	; 0x1d16 <TWI_SendRepeatedStart+0x4a>
	{
		Local_ErrorStatus = RepeatedStartError ;
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do No Thing*/
	}

	return Local_ErrorStatus ;
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <TWI_SendSlaveAddressWithWrite>:
TWI_ErrStatus TWI_SendSlaveAddressWithWrite (u8 Copy_u8SlaveAddress)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <TWI_SendSlaveAddressWithWrite+0x6>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrorStatus = NoError ;
    1d2c:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The Start Condition bit*/
	CLR_BIT(TWSTA , TWCR);
    1d2e:	a6 e5       	ldi	r26, 0x56	; 86
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e6 e5       	ldi	r30, 0x56	; 86
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	8f 7d       	andi	r24, 0xDF	; 223
    1d3a:	8c 93       	st	X, r24

	/*Set Slave Address In the 7 MSB*/
	TWDR = Copy_u8SlaveAddress << 1 ;
    1d3c:	e3 e2       	ldi	r30, 0x23	; 35
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	88 0f       	add	r24, r24
    1d44:	80 83       	st	Z, r24

	/*For Write Request*/
	CLR_BIT(0,TWDR);
    1d46:	a3 e2       	ldi	r26, 0x23	; 35
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e3 e2       	ldi	r30, 0x23	; 35
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	8e 7f       	andi	r24, 0xFE	; 254
    1d52:	8c 93       	st	X, r24

	if ((TWSR & 0xf8) != 0x18)
    1d54:	e1 e2       	ldi	r30, 0x21	; 33
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	88 7f       	andi	r24, 0xF8	; 248
    1d60:	90 70       	andi	r25, 0x00	; 0
    1d62:	88 31       	cpi	r24, 0x18	; 24
    1d64:	91 05       	cpc	r25, r1
    1d66:	11 f0       	breq	.+4      	; 0x1d6c <TWI_SendSlaveAddressWithWrite+0x4c>
	{
		Local_ErrorStatus = SendSlaveAddressWithWriteErr ;
    1d68:	83 e0       	ldi	r24, 0x03	; 3
    1d6a:	89 83       	std	Y+1, r24	; 0x01
		/*Do No Thing*/
	}



	return Local_ErrorStatus ;
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <TWI_SendSlaveAddressWithRead>:
TWI_ErrStatus TWI_SendSlaveAddressWithRead (u8 Copy_u8SlaveAddress)
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <TWI_SendSlaveAddressWithRead+0x6>
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrorStatus = NoError ;
    1d84:	19 82       	std	Y+1, r1	; 0x01

	/*Clear The Start Condition bit*/
	CLR_BIT(TWSTA , TWCR);
    1d86:	a6 e5       	ldi	r26, 0x56	; 86
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e6 e5       	ldi	r30, 0x56	; 86
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	8f 7d       	andi	r24, 0xDF	; 223
    1d92:	8c 93       	st	X, r24

	/*Set Slave Address In the 7 MSB*/
	TWDR = Copy_u8SlaveAddress << 1 ;
    1d94:	e3 e2       	ldi	r30, 0x23	; 35
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	88 0f       	add	r24, r24
    1d9c:	80 83       	st	Z, r24

	/*For Read Request*/
	SET_BIT(0,TWDR);
    1d9e:	a3 e2       	ldi	r26, 0x23	; 35
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e3 e2       	ldi	r30, 0x23	; 35
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	81 60       	ori	r24, 0x01	; 1
    1daa:	8c 93       	st	X, r24

	if ((TWSR & 0xf8) != 0x40)
    1dac:	e1 e2       	ldi	r30, 0x21	; 33
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	88 7f       	andi	r24, 0xF8	; 248
    1db8:	90 70       	andi	r25, 0x00	; 0
    1dba:	80 34       	cpi	r24, 0x40	; 64
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	11 f0       	breq	.+4      	; 0x1dc4 <TWI_SendSlaveAddressWithRead+0x4c>
	{
		Local_ErrorStatus = SendSlaveAddressWithReadErr ;
    1dc0:	84 e0       	ldi	r24, 0x04	; 4
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do No Thing*/
	}
	return Local_ErrorStatus ;
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <TWI_MasterWriteDataByte>:
TWI_ErrStatus TWI_MasterWriteDataByte (u8 Copy_u8DataByte)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <TWI_MasterWriteDataByte+0x6>
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrorStatus = NoError ;
    1ddc:	19 82       	std	Y+1, r1	; 0x01

	/*Write The Data Byte*/
	TWDR = Copy_u8DataByte ;
    1dde:	e3 e2       	ldi	r30, 0x23	; 35
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	80 83       	st	Z, r24

	/*Clear The Interrupt Flag To Start The Previous operation*/
	SET_BIT(TWINT , TWCR);
    1de6:	a6 e5       	ldi	r26, 0x56	; 86
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e6 e5       	ldi	r30, 0x56	; 86
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	80 68       	ori	r24, 0x80	; 128
    1df2:	8c 93       	st	X, r24

	/*Wait Until Interrupt Flag Is raised Again and Previous operation Is Complete*/
	while (GET_BIT(TWINT , TWCR) != 0);
    1df4:	e6 e5       	ldi	r30, 0x56	; 86
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	88 23       	and	r24, r24
    1dfc:	dc f3       	brlt	.-10     	; 0x1df4 <TWI_MasterWriteDataByte+0x24>

	if ((TWSR & 0xf8) != 0x28)
    1dfe:	e1 e2       	ldi	r30, 0x21	; 33
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	88 7f       	andi	r24, 0xF8	; 248
    1e0a:	90 70       	andi	r25, 0x00	; 0
    1e0c:	88 32       	cpi	r24, 0x28	; 40
    1e0e:	91 05       	cpc	r25, r1
    1e10:	11 f0       	breq	.+4      	; 0x1e16 <TWI_MasterWriteDataByte+0x46>
	{
		Local_ErrorStatus = WriteDataByteErr ;
    1e12:	85 e0       	ldi	r24, 0x05	; 5
    1e14:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do No Thing*/
	}
	return Local_ErrorStatus ;
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <TWI_MasterReadDataByte>:
TWI_ErrStatus TWI_MasterReadDataByte (u8 *Copy_u8DataByte)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <TWI_MasterReadDataByte+0x6>
    1e28:	0f 92       	push	r0
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	9b 83       	std	Y+3, r25	; 0x03
    1e30:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_ErrorStatus = NoError ;
    1e32:	19 82       	std	Y+1, r1	; 0x01

	/*Enable Master Generating ACK Bit*/
	SET_BIT(TWEA , TWCR);
    1e34:	a6 e5       	ldi	r26, 0x56	; 86
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e6 e5       	ldi	r30, 0x56	; 86
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	80 64       	ori	r24, 0x40	; 64
    1e40:	8c 93       	st	X, r24

	/*Clear The Interrupt Flag To Start The Previous operation*/
	SET_BIT(TWINT , TWCR);
    1e42:	a6 e5       	ldi	r26, 0x56	; 86
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e6 e5       	ldi	r30, 0x56	; 86
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	80 68       	ori	r24, 0x80	; 128
    1e4e:	8c 93       	st	X, r24

	/*Wait Until Interrupt Flag Is raised Again and Previous operation Is Complete*/
	while (GET_BIT(TWINT , TWCR) != 0);
    1e50:	e6 e5       	ldi	r30, 0x56	; 86
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	88 23       	and	r24, r24
    1e58:	dc f3       	brlt	.-10     	; 0x1e50 <TWI_MasterReadDataByte+0x2e>

	if ((TWSR & 0xf8) != 0x50)
    1e5a:	e1 e2       	ldi	r30, 0x21	; 33
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	88 2f       	mov	r24, r24
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	88 7f       	andi	r24, 0xF8	; 248
    1e66:	90 70       	andi	r25, 0x00	; 0
    1e68:	80 35       	cpi	r24, 0x50	; 80
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	19 f0       	breq	.+6      	; 0x1e74 <TWI_MasterReadDataByte+0x52>
	{
		Local_ErrorStatus = ReadDataByteErr ;
    1e6e:	86 e0       	ldi	r24, 0x06	; 6
    1e70:	89 83       	std	Y+1, r24	; 0x01
    1e72:	06 c0       	rjmp	.+12     	; 0x1e80 <TWI_MasterReadDataByte+0x5e>
	}
	else
	{
		/*Read The Received Data*/
		*Copy_u8DataByte = TWDR ;
    1e74:	e3 e2       	ldi	r30, 0x23	; 35
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e7e:	80 83       	st	Z, r24
	}
	return Local_ErrorStatus ;
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <TWI_SendStopCondition>:
void TWI_SendStopCondition (void)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
	/*Generate Stop Condition On the Bus*/
	SET_BIT(TWSTO , TWCR);
    1e96:	a6 e5       	ldi	r26, 0x56	; 86
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e6 e5       	ldi	r30, 0x56	; 86
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	80 61       	ori	r24, 0x10	; 16
    1ea2:	8c 93       	st	X, r24

	/*Clear The Interrupt Flag To Start The Previous operation*/
	SET_BIT(TWINT , TWCR);
    1ea4:	a6 e5       	ldi	r26, 0x56	; 86
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e6 e5       	ldi	r30, 0x56	; 86
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	80 68       	ori	r24, 0x80	; 128
    1eb0:	8c 93       	st	X, r24
}
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <EEPROM_voidSendDataByte>:

void EEPROM_voidSendDataByte (u32 Copy_u8Data ,u16 Copy_u16Address)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <EEPROM_voidSendDataByte+0x6>
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <EEPROM_voidSendDataByte+0x8>
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <EEPROM_voidSendDataByte+0xa>
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	69 83       	std	Y+1, r22	; 0x01
    1ec8:	7a 83       	std	Y+2, r23	; 0x02
    1eca:	8b 83       	std	Y+3, r24	; 0x03
    1ecc:	9c 83       	std	Y+4, r25	; 0x04
    1ece:	5e 83       	std	Y+6, r21	; 0x06
    1ed0:	4d 83       	std	Y+5, r20	; 0x05
	TWI_SendStatrtCondition();
    1ed2:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <TWI_SendStatrtCondition>

	TWI_SendSlaveAddressWithWrite(0b1010000 | A2 << 2 | Copy_u16Address >> 8);
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eda:	89 2f       	mov	r24, r25
    1edc:	99 27       	eor	r25, r25
    1ede:	84 65       	ori	r24, 0x54	; 84
    1ee0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <TWI_SendSlaveAddressWithWrite>
	TWI_MasterWriteDataByte((u8)Copy_u16Address);
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <TWI_MasterWriteDataByte>
	TWI_MasterWriteDataByte(Copy_u8Data);
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <TWI_MasterWriteDataByte>

	TWI_SendStopCondition();
    1ef0:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <TWI_SendStopCondition>
}
    1ef4:	26 96       	adiw	r28, 0x06	; 6
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <EEPROM_voidReadDataByte>:

void EEPROM_voidReadDataByte (u32 *Copy_u8Data ,u16 Copy_u16Address)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <EEPROM_voidReadDataByte+0x6>
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <EEPROM_voidReadDataByte+0x8>
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	7c 83       	std	Y+4, r23	; 0x04
    1f18:	6b 83       	std	Y+3, r22	; 0x03
	TWI_SendStatrtCondition();
    1f1a:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <TWI_SendStatrtCondition>

	TWI_SendSlaveAddressWithWrite(0b1010000 | A2 << 2 | Copy_u16Address >> 8);
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	9c 81       	ldd	r25, Y+4	; 0x04
    1f22:	89 2f       	mov	r24, r25
    1f24:	99 27       	eor	r25, r25
    1f26:	84 65       	ori	r24, 0x54	; 84
    1f28:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <TWI_SendSlaveAddressWithWrite>
	TWI_MasterWriteDataByte((u8)Copy_u16Address);
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <TWI_MasterWriteDataByte>

	TWI_SendRepeatedStart();
    1f32:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <TWI_SendRepeatedStart>

	TWI_SendSlaveAddressWithRead(0b1010000 | A2 << 2 | Copy_u16Address >> 8);
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	89 2f       	mov	r24, r25
    1f3c:	99 27       	eor	r25, r25
    1f3e:	84 65       	ori	r24, 0x54	; 84
    1f40:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_SendSlaveAddressWithRead>
	TWI_MasterReadDataByte(Copy_u8Data);
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	9a 81       	ldd	r25, Y+2	; 0x02
    1f48:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <TWI_MasterReadDataByte>

	TWI_SendStopCondition();
    1f4c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <TWI_SendStopCondition>
}
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <TheSafe_vidInit>:
u8 NumberOfTries = 3 ;
u8 CheckPassLcdLocation = 11 ;

void TheSafe_Reset(void) ;
void TheSafe_vidInit(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
	/*Set Data Port As Output*/
	DIO_vidSetPortDir(DIO_PORTC , 0b11111111);
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	6f ef       	ldi	r22, 0xFF	; 255
    1f6a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_vidSetPortDir>
	/*Set Control Port As Output*/
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN2 , DIO_OUTPUT);
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	62 e0       	ldi	r22, 0x02	; 2
    1f72:	41 e0       	ldi	r20, 0x01	; 1
    1f74:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN3 , DIO_OUTPUT);
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	63 e0       	ldi	r22, 0x03	; 3
    1f7c:	41 e0       	ldi	r20, 0x01	; 1
    1f7e:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>
	DIO_vidSetPinDir(DIO_PORTA , DIO_PIN4 , DIO_OUTPUT);
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	64 e0       	ldi	r22, 0x04	; 4
    1f86:	41 e0       	ldi	r20, 0x01	; 1
    1f88:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>

	/*Make Col As output and Rows as Input*/
	DIO_vidSetPortDir(DIO_PORTB , 0b00001111);
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	6f e0       	ldi	r22, 0x0F	; 15
    1f90:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_vidSetPortDir>

	/*Initial Value for Keypad*/
	DIO_vidSetPortVal(DIO_PORTB , 0b11111111);
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	6f ef       	ldi	r22, 0xFF	; 255
    1f98:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_vidSetPortVal>

	/*Make INT0 PIN as Input*/
	DIO_vidSetPinDir(DIO_PORTD , DIO_PIN2 , DIO_INPUT);
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	62 e0       	ldi	r22, 0x02	; 2
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 ce 09 	call	0x139c	; 0x139c <DIO_vidSetPinDir>

	DIO_vidSetPinVal(DIO_PORTD , DIO_PIN2 ,DIO_HIGH);
    1fa6:	83 e0       	ldi	r24, 0x03	; 3
    1fa8:	62 e0       	ldi	r22, 0x02	; 2
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 c6 08 	call	0x118c	; 0x118c <DIO_vidSetPinVal>

	EXTI_INT0SetCallBack(&TheSafe_Reset);
    1fb0:	84 e7       	ldi	r24, 0x74	; 116
    1fb2:	97 e2       	ldi	r25, 0x27	; 39
    1fb4:	0e 94 b3 0c 	call	0x1966	; 0x1966 <EXTI_INT0SetCallBack>

	EXTI_Int0_Inti();
    1fb8:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <EXTI_Int0_Inti>

	/*Initialize LCD*/
	CLCD_voidInit();
    1fbc:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidInit>

	Enable_Global_Interrupt();
    1fc0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <Enable_Global_Interrupt>
}
    1fc4:	cf 91       	pop	r28
    1fc6:	df 91       	pop	r29
    1fc8:	08 95       	ret

00001fca <TheSafe_Set_VidPassword>:
void TheSafe_Set_VidPassword()
{
    1fca:	0f 93       	push	r16
    1fcc:	1f 93       	push	r17
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	ca 5a       	subi	r28, 0xAA	; 170
    1fd8:	d0 40       	sbci	r29, 0x00	; 0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
	u8 key;
	u8 Lcd_Location = 9 ;
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e7 55       	subi	r30, 0x57	; 87
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	89 e0       	ldi	r24, 0x09	; 9
    1fec:	80 83       	st	Z, r24

	CLCD_vidSendString("Set Pass:");
    1fee:	80 e6       	ldi	r24, 0x60	; 96
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
    1ff6:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <TheSafe_Set_VidPassword+0x157c>
	while (Lcd_Location <=12)
	{
		do
		{
			if (Reset_System_Flag == 1)
    1ffa:	80 91 f9 00 	lds	r24, 0x00F9
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	09 f0       	breq	.+2      	; 0x2004 <TheSafe_Set_VidPassword+0x3a>
    2002:	cf c0       	rjmp	.+414    	; 0x21a2 <TheSafe_Set_VidPassword+0x1d8>
			{
				Lcd_Location = 8 ;
    2004:	fe 01       	movw	r30, r28
    2006:	e7 55       	subi	r30, 0x57	; 87
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	88 e0       	ldi	r24, 0x08	; 8
    200c:	80 83       	st	Z, r24
				Reset_System_Flag = 0 ;
    200e:	10 92 f9 00 	sts	0x00F9, r1
				CheckPassLcdLocation = 10 ;
    2012:	8a e0       	ldi	r24, 0x0A	; 10
    2014:	80 93 ee 00 	sts	0x00EE, r24
				NumberOfTries = 3 ;
    2018:	83 e0       	ldi	r24, 0x03	; 3
    201a:	80 93 ed 00 	sts	0x00ED, r24
				CLCD_voidSendCommand(1);
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
				CLCD_vidSendString("Reset System");
    2024:	8a e6       	ldi	r24, 0x6A	; 106
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
    202c:	fe 01       	movw	r30, r28
    202e:	eb 55       	subi	r30, 0x5B	; 91
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	aa ef       	ldi	r26, 0xFA	; 250
    2038:	b3 e4       	ldi	r27, 0x43	; 67
    203a:	80 83       	st	Z, r24
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	a2 83       	std	Z+2, r26	; 0x02
    2040:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2042:	8e 01       	movw	r16, r28
    2044:	0f 55       	subi	r16, 0x5F	; 95
    2046:	1f 4f       	sbci	r17, 0xFF	; 255
    2048:	fe 01       	movw	r30, r28
    204a:	eb 55       	subi	r30, 0x5B	; 91
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	60 81       	ld	r22, Z
    2050:	71 81       	ldd	r23, Z+1	; 0x01
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	4a ef       	ldi	r20, 0xFA	; 250
    205c:	54 e4       	ldi	r21, 0x44	; 68
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	f8 01       	movw	r30, r16
    2068:	80 83       	st	Z, r24
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	a2 83       	std	Z+2, r26	; 0x02
    206e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2070:	fe 01       	movw	r30, r28
    2072:	ef 55       	subi	r30, 0x5F	; 95
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	44 f4       	brge	.+16     	; 0x209e <TheSafe_Set_VidPassword+0xd4>
		__ticks = 1;
    208e:	fe 01       	movw	r30, r28
    2090:	e1 56       	subi	r30, 0x61	; 97
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	80 83       	st	Z, r24
    209c:	64 c0       	rjmp	.+200    	; 0x2166 <TheSafe_Set_VidPassword+0x19c>
	else if (__tmp > 65535)
    209e:	fe 01       	movw	r30, r28
    20a0:	ef 55       	subi	r30, 0x5F	; 95
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	60 81       	ld	r22, Z
    20a6:	71 81       	ldd	r23, Z+1	; 0x01
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	0c f0       	brlt	.+2      	; 0x20be <TheSafe_Set_VidPassword+0xf4>
    20bc:	43 c0       	rjmp	.+134    	; 0x2144 <TheSafe_Set_VidPassword+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20be:	fe 01       	movw	r30, r28
    20c0:	eb 55       	subi	r30, 0x5B	; 91
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	60 81       	ld	r22, Z
    20c6:	71 81       	ldd	r23, Z+1	; 0x01
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e2       	ldi	r20, 0x20	; 32
    20d2:	51 e4       	ldi	r21, 0x41	; 65
    20d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8e 01       	movw	r16, r28
    20de:	01 56       	subi	r16, 0x61	; 97
    20e0:	1f 4f       	sbci	r17, 0xFF	; 255
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	f8 01       	movw	r30, r16
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	80 83       	st	Z, r24
    20f4:	1f c0       	rjmp	.+62     	; 0x2134 <TheSafe_Set_VidPassword+0x16a>
    20f6:	fe 01       	movw	r30, r28
    20f8:	e3 56       	subi	r30, 0x63	; 99
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	88 ec       	ldi	r24, 0xC8	; 200
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	91 83       	std	Z+1, r25	; 0x01
    2102:	80 83       	st	Z, r24
    2104:	fe 01       	movw	r30, r28
    2106:	e3 56       	subi	r30, 0x63	; 99
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	91 81       	ldd	r25, Z+1	; 0x01
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <TheSafe_Set_VidPassword+0x144>
    2112:	fe 01       	movw	r30, r28
    2114:	e3 56       	subi	r30, 0x63	; 99
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211c:	de 01       	movw	r26, r28
    211e:	a1 56       	subi	r26, 0x61	; 97
    2120:	bf 4f       	sbci	r27, 0xFF	; 255
    2122:	fe 01       	movw	r30, r28
    2124:	e1 56       	subi	r30, 0x61	; 97
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	80 81       	ld	r24, Z
    212a:	91 81       	ldd	r25, Z+1	; 0x01
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	11 96       	adiw	r26, 0x01	; 1
    2130:	9c 93       	st	X, r25
    2132:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	fe 01       	movw	r30, r28
    2136:	e1 56       	subi	r30, 0x61	; 97
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	d1 f6       	brne	.-76     	; 0x20f6 <TheSafe_Set_VidPassword+0x12c>
    2142:	27 c0       	rjmp	.+78     	; 0x2192 <TheSafe_Set_VidPassword+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2144:	8e 01       	movw	r16, r28
    2146:	01 56       	subi	r16, 0x61	; 97
    2148:	1f 4f       	sbci	r17, 0xFF	; 255
    214a:	fe 01       	movw	r30, r28
    214c:	ef 55       	subi	r30, 0x5F	; 95
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	f8 01       	movw	r30, r16
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	80 83       	st	Z, r24
    2166:	de 01       	movw	r26, r28
    2168:	a5 56       	subi	r26, 0x65	; 101
    216a:	bf 4f       	sbci	r27, 0xFF	; 255
    216c:	fe 01       	movw	r30, r28
    216e:	e1 56       	subi	r30, 0x61	; 97
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	8d 93       	st	X+, r24
    2178:	9c 93       	st	X, r25
    217a:	fe 01       	movw	r30, r28
    217c:	e5 56       	subi	r30, 0x65	; 101
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 81       	ld	r24, Z
    2182:	91 81       	ldd	r25, Z+1	; 0x01
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <TheSafe_Set_VidPassword+0x1ba>
    2188:	fe 01       	movw	r30, r28
    218a:	e5 56       	subi	r30, 0x65	; 101
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 83       	st	Z, r24
				_delay_ms(500);
				CLCD_voidSendCommand(1);
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
				CLCD_vidSendString("Set Pass:");
    2198:	80 e6       	ldi	r24, 0x60	; 96
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
    21a0:	0d c0       	rjmp	.+26     	; 0x21bc <TheSafe_Set_VidPassword+0x1f2>
				break ;
			}
			else
			{
				key = KPD_GetKeyPressed() ;
    21a2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <KPD_GetKeyPressed>
    21a6:	fe 01       	movw	r30, r28
    21a8:	e6 55       	subi	r30, 0x56	; 86
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	80 83       	st	Z, r24
			}
		}while (key == 0xff);
    21ae:	fe 01       	movw	r30, r28
    21b0:	e6 55       	subi	r30, 0x56	; 86
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	80 81       	ld	r24, Z
    21b6:	8f 3f       	cpi	r24, 0xFF	; 255
    21b8:	09 f4       	brne	.+2      	; 0x21bc <TheSafe_Set_VidPassword+0x1f2>
    21ba:	1f cf       	rjmp	.-450    	; 0x1ffa <TheSafe_Set_VidPassword+0x30>

		if(key == 0)
    21bc:	fe 01       	movw	r30, r28
    21be:	e6 55       	subi	r30, 0x56	; 86
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 81       	ld	r24, Z
    21c4:	88 23       	and	r24, r24
    21c6:	09 f0       	breq	.+2      	; 0x21ca <TheSafe_Set_VidPassword+0x200>
    21c8:	0c c1       	rjmp	.+536    	; 0x23e2 <TheSafe_Set_VidPassword+0x418>
		{
			CLCD_GoToXY(0,Lcd_Location) ;
    21ca:	fe 01       	movw	r30, r28
    21cc:	e7 55       	subi	r30, 0x57	; 87
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	60 81       	ld	r22, Z
    21d4:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_voidSendData(key + '0');
    21d8:	fe 01       	movw	r30, r28
    21da:	e6 55       	subi	r30, 0x56	; 86
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	80 5d       	subi	r24, 0xD0	; 208
    21e2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    21e6:	fe 01       	movw	r30, r28
    21e8:	e9 56       	subi	r30, 0x69	; 105
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	aa ef       	ldi	r26, 0xFA	; 250
    21f2:	b3 e4       	ldi	r27, 0x43	; 67
    21f4:	80 83       	st	Z, r24
    21f6:	91 83       	std	Z+1, r25	; 0x01
    21f8:	a2 83       	std	Z+2, r26	; 0x02
    21fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	8e 01       	movw	r16, r28
    21fe:	0d 56       	subi	r16, 0x6D	; 109
    2200:	1f 4f       	sbci	r17, 0xFF	; 255
    2202:	fe 01       	movw	r30, r28
    2204:	e9 56       	subi	r30, 0x69	; 105
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	60 81       	ld	r22, Z
    220a:	71 81       	ldd	r23, Z+1	; 0x01
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4a ef       	ldi	r20, 0xFA	; 250
    2216:	54 e4       	ldi	r21, 0x44	; 68
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	f8 01       	movw	r30, r16
    2222:	80 83       	st	Z, r24
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	a2 83       	std	Z+2, r26	; 0x02
    2228:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    222a:	fe 01       	movw	r30, r28
    222c:	ed 56       	subi	r30, 0x6D	; 109
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	60 81       	ld	r22, Z
    2232:	71 81       	ldd	r23, Z+1	; 0x01
    2234:	82 81       	ldd	r24, Z+2	; 0x02
    2236:	93 81       	ldd	r25, Z+3	; 0x03
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e8       	ldi	r20, 0x80	; 128
    223e:	5f e3       	ldi	r21, 0x3F	; 63
    2240:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2244:	88 23       	and	r24, r24
    2246:	44 f4       	brge	.+16     	; 0x2258 <TheSafe_Set_VidPassword+0x28e>
		__ticks = 1;
    2248:	fe 01       	movw	r30, r28
    224a:	ef 56       	subi	r30, 0x6F	; 111
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	80 83       	st	Z, r24
    2256:	64 c0       	rjmp	.+200    	; 0x2320 <TheSafe_Set_VidPassword+0x356>
	else if (__tmp > 65535)
    2258:	fe 01       	movw	r30, r28
    225a:	ed 56       	subi	r30, 0x6D	; 109
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	3f ef       	ldi	r19, 0xFF	; 255
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	57 e4       	ldi	r21, 0x47	; 71
    226e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	0c f0       	brlt	.+2      	; 0x2278 <TheSafe_Set_VidPassword+0x2ae>
    2276:	43 c0       	rjmp	.+134    	; 0x22fe <TheSafe_Set_VidPassword+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2278:	fe 01       	movw	r30, r28
    227a:	e9 56       	subi	r30, 0x69	; 105
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	8e 01       	movw	r16, r28
    2298:	0f 56       	subi	r16, 0x6F	; 111
    229a:	1f 4f       	sbci	r17, 0xFF	; 255
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	f8 01       	movw	r30, r16
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	1f c0       	rjmp	.+62     	; 0x22ee <TheSafe_Set_VidPassword+0x324>
    22b0:	fe 01       	movw	r30, r28
    22b2:	e1 57       	subi	r30, 0x71	; 113
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	88 ec       	ldi	r24, 0xC8	; 200
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	91 83       	std	Z+1, r25	; 0x01
    22bc:	80 83       	st	Z, r24
    22be:	fe 01       	movw	r30, r28
    22c0:	e1 57       	subi	r30, 0x71	; 113
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	80 81       	ld	r24, Z
    22c6:	91 81       	ldd	r25, Z+1	; 0x01
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <TheSafe_Set_VidPassword+0x2fe>
    22cc:	fe 01       	movw	r30, r28
    22ce:	e1 57       	subi	r30, 0x71	; 113
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	91 83       	std	Z+1, r25	; 0x01
    22d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	de 01       	movw	r26, r28
    22d8:	af 56       	subi	r26, 0x6F	; 111
    22da:	bf 4f       	sbci	r27, 0xFF	; 255
    22dc:	fe 01       	movw	r30, r28
    22de:	ef 56       	subi	r30, 0x6F	; 111
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	11 96       	adiw	r26, 0x01	; 1
    22ea:	9c 93       	st	X, r25
    22ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ee:	fe 01       	movw	r30, r28
    22f0:	ef 56       	subi	r30, 0x6F	; 111
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	d1 f6       	brne	.-76     	; 0x22b0 <TheSafe_Set_VidPassword+0x2e6>
    22fc:	27 c0       	rjmp	.+78     	; 0x234c <TheSafe_Set_VidPassword+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fe:	8e 01       	movw	r16, r28
    2300:	0f 56       	subi	r16, 0x6F	; 111
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	fe 01       	movw	r30, r28
    2306:	ed 56       	subi	r30, 0x6D	; 109
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	60 81       	ld	r22, Z
    230c:	71 81       	ldd	r23, Z+1	; 0x01
    230e:	82 81       	ldd	r24, Z+2	; 0x02
    2310:	93 81       	ldd	r25, Z+3	; 0x03
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	f8 01       	movw	r30, r16
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	de 01       	movw	r26, r28
    2322:	a3 57       	subi	r26, 0x73	; 115
    2324:	bf 4f       	sbci	r27, 0xFF	; 255
    2326:	fe 01       	movw	r30, r28
    2328:	ef 56       	subi	r30, 0x6F	; 111
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	8d 93       	st	X+, r24
    2332:	9c 93       	st	X, r25
    2334:	fe 01       	movw	r30, r28
    2336:	e3 57       	subi	r30, 0x73	; 115
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 81       	ld	r24, Z
    233c:	91 81       	ldd	r25, Z+1	; 0x01
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	f1 f7       	brne	.-4      	; 0x233e <TheSafe_Set_VidPassword+0x374>
    2342:	fe 01       	movw	r30, r28
    2344:	e3 57       	subi	r30, 0x73	; 115
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	80 83       	st	Z, r24
			_delay_ms(500);
			CLCD_GoToXY(0,Lcd_Location) ;
    234c:	fe 01       	movw	r30, r28
    234e:	e7 55       	subi	r30, 0x57	; 87
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	60 81       	ld	r22, Z
    2356:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString("*");
    235a:	87 e7       	ldi	r24, 0x77	; 119
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			if (Lcd_Location == 9)
    2362:	fe 01       	movw	r30, r28
    2364:	e7 55       	subi	r30, 0x57	; 87
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	80 81       	ld	r24, Z
    236a:	89 30       	cpi	r24, 0x09	; 9
    236c:	91 f4       	brne	.+36     	; 0x2392 <TheSafe_Set_VidPassword+0x3c8>
			{
				Password = key ;
    236e:	fe 01       	movw	r30, r28
    2370:	e6 55       	subi	r30, 0x56	; 86
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	80 81       	ld	r24, Z
    2376:	88 2f       	mov	r24, r24
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	a0 e0       	ldi	r26, 0x00	; 0
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	80 93 fa 00 	sts	0x00FA, r24
    2382:	90 93 fb 00 	sts	0x00FB, r25
    2386:	a0 93 fc 00 	sts	0x00FC, r26
    238a:	b0 93 fd 00 	sts	0x00FD, r27
    238e:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
			else
			{
				Password = (Password * 10) + key ;
    2392:	80 91 fa 00 	lds	r24, 0x00FA
    2396:	90 91 fb 00 	lds	r25, 0x00FB
    239a:	a0 91 fc 00 	lds	r26, 0x00FC
    239e:	b0 91 fd 00 	lds	r27, 0x00FD
    23a2:	2a e0       	ldi	r18, 0x0A	; 10
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	50 e0       	ldi	r21, 0x00	; 0
    23aa:	bc 01       	movw	r22, r24
    23ac:	cd 01       	movw	r24, r26
    23ae:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    23b2:	9b 01       	movw	r18, r22
    23b4:	ac 01       	movw	r20, r24
    23b6:	fe 01       	movw	r30, r28
    23b8:	e6 55       	subi	r30, 0x56	; 86
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 81       	ld	r24, Z
    23be:	88 2f       	mov	r24, r24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	a0 e0       	ldi	r26, 0x00	; 0
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	82 0f       	add	r24, r18
    23c8:	93 1f       	adc	r25, r19
    23ca:	a4 1f       	adc	r26, r20
    23cc:	b5 1f       	adc	r27, r21
    23ce:	80 93 fa 00 	sts	0x00FA, r24
    23d2:	90 93 fb 00 	sts	0x00FB, r25
    23d6:	a0 93 fc 00 	sts	0x00FC, r26
    23da:	b0 93 fd 00 	sts	0x00FD, r27
    23de:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
		}
		else if(key == 1)
    23e2:	fe 01       	movw	r30, r28
    23e4:	e6 55       	subi	r30, 0x56	; 86
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	81 30       	cpi	r24, 0x01	; 1
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <TheSafe_Set_VidPassword+0x426>
    23ee:	0c c1       	rjmp	.+536    	; 0x2608 <TheSafe_Set_VidPassword+0x63e>
		{
			CLCD_GoToXY(0,Lcd_Location) ;
    23f0:	fe 01       	movw	r30, r28
    23f2:	e7 55       	subi	r30, 0x57	; 87
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	60 81       	ld	r22, Z
    23fa:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_voidSendData(key + '0');
    23fe:	fe 01       	movw	r30, r28
    2400:	e6 55       	subi	r30, 0x56	; 86
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	80 5d       	subi	r24, 0xD0	; 208
    2408:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    240c:	fe 01       	movw	r30, r28
    240e:	e7 57       	subi	r30, 0x77	; 119
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	aa ef       	ldi	r26, 0xFA	; 250
    2418:	b3 e4       	ldi	r27, 0x43	; 67
    241a:	80 83       	st	Z, r24
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	a2 83       	std	Z+2, r26	; 0x02
    2420:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	8e 01       	movw	r16, r28
    2424:	0b 57       	subi	r16, 0x7B	; 123
    2426:	1f 4f       	sbci	r17, 0xFF	; 255
    2428:	fe 01       	movw	r30, r28
    242a:	e7 57       	subi	r30, 0x77	; 119
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	60 81       	ld	r22, Z
    2430:	71 81       	ldd	r23, Z+1	; 0x01
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	93 81       	ldd	r25, Z+3	; 0x03
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	4a ef       	ldi	r20, 0xFA	; 250
    243c:	54 e4       	ldi	r21, 0x44	; 68
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	f8 01       	movw	r30, r16
    2448:	80 83       	st	Z, r24
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	a2 83       	std	Z+2, r26	; 0x02
    244e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2450:	fe 01       	movw	r30, r28
    2452:	eb 57       	subi	r30, 0x7B	; 123
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	60 81       	ld	r22, Z
    2458:	71 81       	ldd	r23, Z+1	; 0x01
    245a:	82 81       	ldd	r24, Z+2	; 0x02
    245c:	93 81       	ldd	r25, Z+3	; 0x03
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e8       	ldi	r20, 0x80	; 128
    2464:	5f e3       	ldi	r21, 0x3F	; 63
    2466:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    246a:	88 23       	and	r24, r24
    246c:	44 f4       	brge	.+16     	; 0x247e <TheSafe_Set_VidPassword+0x4b4>
		__ticks = 1;
    246e:	fe 01       	movw	r30, r28
    2470:	ed 57       	subi	r30, 0x7D	; 125
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
    247c:	64 c0       	rjmp	.+200    	; 0x2546 <TheSafe_Set_VidPassword+0x57c>
	else if (__tmp > 65535)
    247e:	fe 01       	movw	r30, r28
    2480:	eb 57       	subi	r30, 0x7B	; 123
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	60 81       	ld	r22, Z
    2486:	71 81       	ldd	r23, Z+1	; 0x01
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2498:	18 16       	cp	r1, r24
    249a:	0c f0       	brlt	.+2      	; 0x249e <TheSafe_Set_VidPassword+0x4d4>
    249c:	43 c0       	rjmp	.+134    	; 0x2524 <TheSafe_Set_VidPassword+0x55a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249e:	fe 01       	movw	r30, r28
    24a0:	e7 57       	subi	r30, 0x77	; 119
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	60 81       	ld	r22, Z
    24a6:	71 81       	ldd	r23, Z+1	; 0x01
    24a8:	82 81       	ldd	r24, Z+2	; 0x02
    24aa:	93 81       	ldd	r25, Z+3	; 0x03
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e2       	ldi	r20, 0x20	; 32
    24b2:	51 e4       	ldi	r21, 0x41	; 65
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	8e 01       	movw	r16, r28
    24be:	0d 57       	subi	r16, 0x7D	; 125
    24c0:	1f 4f       	sbci	r17, 0xFF	; 255
    24c2:	bc 01       	movw	r22, r24
    24c4:	cd 01       	movw	r24, r26
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	f8 01       	movw	r30, r16
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24
    24d4:	1f c0       	rjmp	.+62     	; 0x2514 <TheSafe_Set_VidPassword+0x54a>
    24d6:	fe 01       	movw	r30, r28
    24d8:	ef 57       	subi	r30, 0x7F	; 127
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	88 ec       	ldi	r24, 0xC8	; 200
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
    24e4:	fe 01       	movw	r30, r28
    24e6:	ef 57       	subi	r30, 0x7F	; 127
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <TheSafe_Set_VidPassword+0x524>
    24f2:	fe 01       	movw	r30, r28
    24f4:	ef 57       	subi	r30, 0x7F	; 127
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	91 83       	std	Z+1, r25	; 0x01
    24fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fc:	de 01       	movw	r26, r28
    24fe:	ad 57       	subi	r26, 0x7D	; 125
    2500:	bf 4f       	sbci	r27, 0xFF	; 255
    2502:	fe 01       	movw	r30, r28
    2504:	ed 57       	subi	r30, 0x7D	; 125
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	80 81       	ld	r24, Z
    250a:	91 81       	ldd	r25, Z+1	; 0x01
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	11 96       	adiw	r26, 0x01	; 1
    2510:	9c 93       	st	X, r25
    2512:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2514:	fe 01       	movw	r30, r28
    2516:	ed 57       	subi	r30, 0x7D	; 125
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	d1 f6       	brne	.-76     	; 0x24d6 <TheSafe_Set_VidPassword+0x50c>
    2522:	27 c0       	rjmp	.+78     	; 0x2572 <TheSafe_Set_VidPassword+0x5a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2524:	8e 01       	movw	r16, r28
    2526:	0d 57       	subi	r16, 0x7D	; 125
    2528:	1f 4f       	sbci	r17, 0xFF	; 255
    252a:	fe 01       	movw	r30, r28
    252c:	eb 57       	subi	r30, 0x7B	; 123
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	82 81       	ldd	r24, Z+2	; 0x02
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	f8 01       	movw	r30, r16
    2542:	91 83       	std	Z+1, r25	; 0x01
    2544:	80 83       	st	Z, r24
    2546:	de 01       	movw	r26, r28
    2548:	a1 58       	subi	r26, 0x81	; 129
    254a:	bf 4f       	sbci	r27, 0xFF	; 255
    254c:	fe 01       	movw	r30, r28
    254e:	ed 57       	subi	r30, 0x7D	; 125
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	8d 93       	st	X+, r24
    2558:	9c 93       	st	X, r25
    255a:	fe 01       	movw	r30, r28
    255c:	e1 58       	subi	r30, 0x81	; 129
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	80 81       	ld	r24, Z
    2562:	91 81       	ldd	r25, Z+1	; 0x01
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <TheSafe_Set_VidPassword+0x59a>
    2568:	fe 01       	movw	r30, r28
    256a:	e1 58       	subi	r30, 0x81	; 129
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	80 83       	st	Z, r24
			_delay_ms(500);
			CLCD_GoToXY(0,Lcd_Location) ;
    2572:	fe 01       	movw	r30, r28
    2574:	e7 55       	subi	r30, 0x57	; 87
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	60 81       	ld	r22, Z
    257c:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString("*");
    2580:	87 e7       	ldi	r24, 0x77	; 119
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			if (Lcd_Location == 9)
    2588:	fe 01       	movw	r30, r28
    258a:	e7 55       	subi	r30, 0x57	; 87
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	89 30       	cpi	r24, 0x09	; 9
    2592:	91 f4       	brne	.+36     	; 0x25b8 <TheSafe_Set_VidPassword+0x5ee>
			{
				Password = key ;
    2594:	fe 01       	movw	r30, r28
    2596:	e6 55       	subi	r30, 0x56	; 86
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 81       	ld	r24, Z
    259c:	88 2f       	mov	r24, r24
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a0 e0       	ldi	r26, 0x00	; 0
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	80 93 fa 00 	sts	0x00FA, r24
    25a8:	90 93 fb 00 	sts	0x00FB, r25
    25ac:	a0 93 fc 00 	sts	0x00FC, r26
    25b0:	b0 93 fd 00 	sts	0x00FD, r27
    25b4:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
			else
			{
				Password = (Password * 10) + key ;
    25b8:	80 91 fa 00 	lds	r24, 0x00FA
    25bc:	90 91 fb 00 	lds	r25, 0x00FB
    25c0:	a0 91 fc 00 	lds	r26, 0x00FC
    25c4:	b0 91 fd 00 	lds	r27, 0x00FD
    25c8:	2a e0       	ldi	r18, 0x0A	; 10
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    25d8:	9b 01       	movw	r18, r22
    25da:	ac 01       	movw	r20, r24
    25dc:	fe 01       	movw	r30, r28
    25de:	e6 55       	subi	r30, 0x56	; 86
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	80 81       	ld	r24, Z
    25e4:	88 2f       	mov	r24, r24
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	a0 e0       	ldi	r26, 0x00	; 0
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	82 0f       	add	r24, r18
    25ee:	93 1f       	adc	r25, r19
    25f0:	a4 1f       	adc	r26, r20
    25f2:	b5 1f       	adc	r27, r21
    25f4:	80 93 fa 00 	sts	0x00FA, r24
    25f8:	90 93 fb 00 	sts	0x00FB, r25
    25fc:	a0 93 fc 00 	sts	0x00FC, r26
    2600:	b0 93 fd 00 	sts	0x00FD, r27
    2604:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
		}
		else if(key == 2)
    2608:	fe 01       	movw	r30, r28
    260a:	e6 55       	subi	r30, 0x56	; 86
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	82 30       	cpi	r24, 0x02	; 2
    2612:	09 f0       	breq	.+2      	; 0x2616 <TheSafe_Set_VidPassword+0x64c>
    2614:	0a c1       	rjmp	.+532    	; 0x282a <TheSafe_Set_VidPassword+0x860>
		{
			CLCD_GoToXY(0,Lcd_Location) ;
    2616:	fe 01       	movw	r30, r28
    2618:	e7 55       	subi	r30, 0x57	; 87
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	60 81       	ld	r22, Z
    2620:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_voidSendData(key + '0');
    2624:	fe 01       	movw	r30, r28
    2626:	e6 55       	subi	r30, 0x56	; 86
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 81       	ld	r24, Z
    262c:	80 5d       	subi	r24, 0xD0	; 208
    262e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    2632:	fe 01       	movw	r30, r28
    2634:	e5 58       	subi	r30, 0x85	; 133
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	aa ef       	ldi	r26, 0xFA	; 250
    263e:	b3 e4       	ldi	r27, 0x43	; 67
    2640:	80 83       	st	Z, r24
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	a2 83       	std	Z+2, r26	; 0x02
    2646:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2648:	8e 01       	movw	r16, r28
    264a:	09 58       	subi	r16, 0x89	; 137
    264c:	1f 4f       	sbci	r17, 0xFF	; 255
    264e:	fe 01       	movw	r30, r28
    2650:	e5 58       	subi	r30, 0x85	; 133
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4a ef       	ldi	r20, 0xFA	; 250
    2662:	54 e4       	ldi	r21, 0x44	; 68
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	f8 01       	movw	r30, r16
    266e:	80 83       	st	Z, r24
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	a2 83       	std	Z+2, r26	; 0x02
    2674:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2676:	fe 01       	movw	r30, r28
    2678:	e9 58       	subi	r30, 0x89	; 137
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e8       	ldi	r20, 0x80	; 128
    268a:	5f e3       	ldi	r21, 0x3F	; 63
    268c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2690:	88 23       	and	r24, r24
    2692:	44 f4       	brge	.+16     	; 0x26a4 <TheSafe_Set_VidPassword+0x6da>
		__ticks = 1;
    2694:	fe 01       	movw	r30, r28
    2696:	eb 58       	subi	r30, 0x8B	; 139
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	80 83       	st	Z, r24
    26a2:	64 c0       	rjmp	.+200    	; 0x276c <TheSafe_Set_VidPassword+0x7a2>
	else if (__tmp > 65535)
    26a4:	fe 01       	movw	r30, r28
    26a6:	e9 58       	subi	r30, 0x89	; 137
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	60 81       	ld	r22, Z
    26ac:	71 81       	ldd	r23, Z+1	; 0x01
    26ae:	82 81       	ldd	r24, Z+2	; 0x02
    26b0:	93 81       	ldd	r25, Z+3	; 0x03
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	3f ef       	ldi	r19, 0xFF	; 255
    26b6:	4f e7       	ldi	r20, 0x7F	; 127
    26b8:	57 e4       	ldi	r21, 0x47	; 71
    26ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26be:	18 16       	cp	r1, r24
    26c0:	0c f0       	brlt	.+2      	; 0x26c4 <TheSafe_Set_VidPassword+0x6fa>
    26c2:	43 c0       	rjmp	.+134    	; 0x274a <TheSafe_Set_VidPassword+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c4:	fe 01       	movw	r30, r28
    26c6:	e5 58       	subi	r30, 0x85	; 133
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e2       	ldi	r20, 0x20	; 32
    26d8:	51 e4       	ldi	r21, 0x41	; 65
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	8e 01       	movw	r16, r28
    26e4:	0b 58       	subi	r16, 0x8B	; 139
    26e6:	1f 4f       	sbci	r17, 0xFF	; 255
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	f8 01       	movw	r30, r16
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	80 83       	st	Z, r24
    26fa:	1f c0       	rjmp	.+62     	; 0x273a <TheSafe_Set_VidPassword+0x770>
    26fc:	fe 01       	movw	r30, r28
    26fe:	ed 58       	subi	r30, 0x8D	; 141
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	88 ec       	ldi	r24, 0xC8	; 200
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	91 83       	std	Z+1, r25	; 0x01
    2708:	80 83       	st	Z, r24
    270a:	fe 01       	movw	r30, r28
    270c:	ed 58       	subi	r30, 0x8D	; 141
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <TheSafe_Set_VidPassword+0x74a>
    2718:	fe 01       	movw	r30, r28
    271a:	ed 58       	subi	r30, 0x8D	; 141
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2722:	de 01       	movw	r26, r28
    2724:	ab 58       	subi	r26, 0x8B	; 139
    2726:	bf 4f       	sbci	r27, 0xFF	; 255
    2728:	fe 01       	movw	r30, r28
    272a:	eb 58       	subi	r30, 0x8B	; 139
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	11 96       	adiw	r26, 0x01	; 1
    2736:	9c 93       	st	X, r25
    2738:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273a:	fe 01       	movw	r30, r28
    273c:	eb 58       	subi	r30, 0x8B	; 139
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	80 81       	ld	r24, Z
    2742:	91 81       	ldd	r25, Z+1	; 0x01
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	d1 f6       	brne	.-76     	; 0x26fc <TheSafe_Set_VidPassword+0x732>
    2748:	27 c0       	rjmp	.+78     	; 0x2798 <TheSafe_Set_VidPassword+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274a:	8e 01       	movw	r16, r28
    274c:	0b 58       	subi	r16, 0x8B	; 139
    274e:	1f 4f       	sbci	r17, 0xFF	; 255
    2750:	fe 01       	movw	r30, r28
    2752:	e9 58       	subi	r30, 0x89	; 137
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	60 81       	ld	r22, Z
    2758:	71 81       	ldd	r23, Z+1	; 0x01
    275a:	82 81       	ldd	r24, Z+2	; 0x02
    275c:	93 81       	ldd	r25, Z+3	; 0x03
    275e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	f8 01       	movw	r30, r16
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
    276c:	de 01       	movw	r26, r28
    276e:	af 58       	subi	r26, 0x8F	; 143
    2770:	bf 4f       	sbci	r27, 0xFF	; 255
    2772:	fe 01       	movw	r30, r28
    2774:	eb 58       	subi	r30, 0x8B	; 139
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 81       	ld	r24, Z
    277a:	91 81       	ldd	r25, Z+1	; 0x01
    277c:	8d 93       	st	X+, r24
    277e:	9c 93       	st	X, r25
    2780:	fe 01       	movw	r30, r28
    2782:	ef 58       	subi	r30, 0x8F	; 143
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	80 81       	ld	r24, Z
    2788:	91 81       	ldd	r25, Z+1	; 0x01
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <TheSafe_Set_VidPassword+0x7c0>
    278e:	fe 01       	movw	r30, r28
    2790:	ef 58       	subi	r30, 0x8F	; 143
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	91 83       	std	Z+1, r25	; 0x01
    2796:	80 83       	st	Z, r24
			_delay_ms(500);
			CLCD_GoToXY(0,Lcd_Location) ;
    2798:	fe 01       	movw	r30, r28
    279a:	e7 55       	subi	r30, 0x57	; 87
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	60 81       	ld	r22, Z
    27a2:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString("*");
    27a6:	87 e7       	ldi	r24, 0x77	; 119
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			if (Lcd_Location == 9)
    27ae:	fe 01       	movw	r30, r28
    27b0:	e7 55       	subi	r30, 0x57	; 87
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 81       	ld	r24, Z
    27b6:	89 30       	cpi	r24, 0x09	; 9
    27b8:	89 f4       	brne	.+34     	; 0x27dc <TheSafe_Set_VidPassword+0x812>
			{
				Password = key ;
    27ba:	fe 01       	movw	r30, r28
    27bc:	e6 55       	subi	r30, 0x56	; 86
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	88 2f       	mov	r24, r24
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a0 e0       	ldi	r26, 0x00	; 0
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	80 93 fa 00 	sts	0x00FA, r24
    27ce:	90 93 fb 00 	sts	0x00FB, r25
    27d2:	a0 93 fc 00 	sts	0x00FC, r26
    27d6:	b0 93 fd 00 	sts	0x00FD, r27
    27da:	ac c6       	rjmp	.+3416   	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
			else
			{
				Password = (Password * 10) + key ;
    27dc:	80 91 fa 00 	lds	r24, 0x00FA
    27e0:	90 91 fb 00 	lds	r25, 0x00FB
    27e4:	a0 91 fc 00 	lds	r26, 0x00FC
    27e8:	b0 91 fd 00 	lds	r27, 0x00FD
    27ec:	2a e0       	ldi	r18, 0x0A	; 10
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e0       	ldi	r20, 0x00	; 0
    27f2:	50 e0       	ldi	r21, 0x00	; 0
    27f4:	bc 01       	movw	r22, r24
    27f6:	cd 01       	movw	r24, r26
    27f8:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    27fc:	9b 01       	movw	r18, r22
    27fe:	ac 01       	movw	r20, r24
    2800:	fe 01       	movw	r30, r28
    2802:	e6 55       	subi	r30, 0x56	; 86
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	80 81       	ld	r24, Z
    2808:	88 2f       	mov	r24, r24
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	a0 e0       	ldi	r26, 0x00	; 0
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	82 0f       	add	r24, r18
    2812:	93 1f       	adc	r25, r19
    2814:	a4 1f       	adc	r26, r20
    2816:	b5 1f       	adc	r27, r21
    2818:	80 93 fa 00 	sts	0x00FA, r24
    281c:	90 93 fb 00 	sts	0x00FB, r25
    2820:	a0 93 fc 00 	sts	0x00FC, r26
    2824:	b0 93 fd 00 	sts	0x00FD, r27
    2828:	85 c6       	rjmp	.+3338   	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
		}
		else if(key == 3)
    282a:	fe 01       	movw	r30, r28
    282c:	e6 55       	subi	r30, 0x56	; 86
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	80 81       	ld	r24, Z
    2832:	83 30       	cpi	r24, 0x03	; 3
    2834:	09 f0       	breq	.+2      	; 0x2838 <TheSafe_Set_VidPassword+0x86e>
    2836:	0a c1       	rjmp	.+532    	; 0x2a4c <TheSafe_Set_VidPassword+0xa82>
		{
			CLCD_GoToXY(0,Lcd_Location) ;
    2838:	fe 01       	movw	r30, r28
    283a:	e7 55       	subi	r30, 0x57	; 87
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	60 81       	ld	r22, Z
    2842:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_voidSendData(key + '0');
    2846:	fe 01       	movw	r30, r28
    2848:	e6 55       	subi	r30, 0x56	; 86
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	80 5d       	subi	r24, 0xD0	; 208
    2850:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    2854:	fe 01       	movw	r30, r28
    2856:	e3 59       	subi	r30, 0x93	; 147
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	aa ef       	ldi	r26, 0xFA	; 250
    2860:	b3 e4       	ldi	r27, 0x43	; 67
    2862:	80 83       	st	Z, r24
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	a2 83       	std	Z+2, r26	; 0x02
    2868:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286a:	8e 01       	movw	r16, r28
    286c:	07 59       	subi	r16, 0x97	; 151
    286e:	1f 4f       	sbci	r17, 0xFF	; 255
    2870:	fe 01       	movw	r30, r28
    2872:	e3 59       	subi	r30, 0x93	; 147
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	60 81       	ld	r22, Z
    2878:	71 81       	ldd	r23, Z+1	; 0x01
    287a:	82 81       	ldd	r24, Z+2	; 0x02
    287c:	93 81       	ldd	r25, Z+3	; 0x03
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	4a ef       	ldi	r20, 0xFA	; 250
    2884:	54 e4       	ldi	r21, 0x44	; 68
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	f8 01       	movw	r30, r16
    2890:	80 83       	st	Z, r24
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	a2 83       	std	Z+2, r26	; 0x02
    2896:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2898:	fe 01       	movw	r30, r28
    289a:	e7 59       	subi	r30, 0x97	; 151
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e8       	ldi	r20, 0x80	; 128
    28ac:	5f e3       	ldi	r21, 0x3F	; 63
    28ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b2:	88 23       	and	r24, r24
    28b4:	44 f4       	brge	.+16     	; 0x28c6 <TheSafe_Set_VidPassword+0x8fc>
		__ticks = 1;
    28b6:	fe 01       	movw	r30, r28
    28b8:	e9 59       	subi	r30, 0x99	; 153
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	80 83       	st	Z, r24
    28c4:	64 c0       	rjmp	.+200    	; 0x298e <TheSafe_Set_VidPassword+0x9c4>
	else if (__tmp > 65535)
    28c6:	fe 01       	movw	r30, r28
    28c8:	e7 59       	subi	r30, 0x97	; 151
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	3f ef       	ldi	r19, 0xFF	; 255
    28d8:	4f e7       	ldi	r20, 0x7F	; 127
    28da:	57 e4       	ldi	r21, 0x47	; 71
    28dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e0:	18 16       	cp	r1, r24
    28e2:	0c f0       	brlt	.+2      	; 0x28e6 <TheSafe_Set_VidPassword+0x91c>
    28e4:	43 c0       	rjmp	.+134    	; 0x296c <TheSafe_Set_VidPassword+0x9a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e6:	fe 01       	movw	r30, r28
    28e8:	e3 59       	subi	r30, 0x93	; 147
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e2       	ldi	r20, 0x20	; 32
    28fa:	51 e4       	ldi	r21, 0x41	; 65
    28fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	8e 01       	movw	r16, r28
    2906:	09 59       	subi	r16, 0x99	; 153
    2908:	1f 4f       	sbci	r17, 0xFF	; 255
    290a:	bc 01       	movw	r22, r24
    290c:	cd 01       	movw	r24, r26
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	f8 01       	movw	r30, r16
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	80 83       	st	Z, r24
    291c:	1f c0       	rjmp	.+62     	; 0x295c <TheSafe_Set_VidPassword+0x992>
    291e:	fe 01       	movw	r30, r28
    2920:	eb 59       	subi	r30, 0x9B	; 155
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	88 ec       	ldi	r24, 0xC8	; 200
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	91 83       	std	Z+1, r25	; 0x01
    292a:	80 83       	st	Z, r24
    292c:	fe 01       	movw	r30, r28
    292e:	eb 59       	subi	r30, 0x9B	; 155
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	80 81       	ld	r24, Z
    2934:	91 81       	ldd	r25, Z+1	; 0x01
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <TheSafe_Set_VidPassword+0x96c>
    293a:	fe 01       	movw	r30, r28
    293c:	eb 59       	subi	r30, 0x9B	; 155
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2944:	de 01       	movw	r26, r28
    2946:	a9 59       	subi	r26, 0x99	; 153
    2948:	bf 4f       	sbci	r27, 0xFF	; 255
    294a:	fe 01       	movw	r30, r28
    294c:	e9 59       	subi	r30, 0x99	; 153
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	11 96       	adiw	r26, 0x01	; 1
    2958:	9c 93       	st	X, r25
    295a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	fe 01       	movw	r30, r28
    295e:	e9 59       	subi	r30, 0x99	; 153
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	91 81       	ldd	r25, Z+1	; 0x01
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	d1 f6       	brne	.-76     	; 0x291e <TheSafe_Set_VidPassword+0x954>
    296a:	27 c0       	rjmp	.+78     	; 0x29ba <TheSafe_Set_VidPassword+0x9f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296c:	8e 01       	movw	r16, r28
    296e:	09 59       	subi	r16, 0x99	; 153
    2970:	1f 4f       	sbci	r17, 0xFF	; 255
    2972:	fe 01       	movw	r30, r28
    2974:	e7 59       	subi	r30, 0x97	; 151
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	f8 01       	movw	r30, r16
    298a:	91 83       	std	Z+1, r25	; 0x01
    298c:	80 83       	st	Z, r24
    298e:	de 01       	movw	r26, r28
    2990:	ad 59       	subi	r26, 0x9D	; 157
    2992:	bf 4f       	sbci	r27, 0xFF	; 255
    2994:	fe 01       	movw	r30, r28
    2996:	e9 59       	subi	r30, 0x99	; 153
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	80 81       	ld	r24, Z
    299c:	91 81       	ldd	r25, Z+1	; 0x01
    299e:	8d 93       	st	X+, r24
    29a0:	9c 93       	st	X, r25
    29a2:	fe 01       	movw	r30, r28
    29a4:	ed 59       	subi	r30, 0x9D	; 157
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 81       	ld	r24, Z
    29aa:	91 81       	ldd	r25, Z+1	; 0x01
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <TheSafe_Set_VidPassword+0x9e2>
    29b0:	fe 01       	movw	r30, r28
    29b2:	ed 59       	subi	r30, 0x9D	; 157
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
			_delay_ms(500);
			CLCD_GoToXY(0,Lcd_Location) ;
    29ba:	fe 01       	movw	r30, r28
    29bc:	e7 55       	subi	r30, 0x57	; 87
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	60 81       	ld	r22, Z
    29c4:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString("*");
    29c8:	87 e7       	ldi	r24, 0x77	; 119
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			if (Lcd_Location == 9)
    29d0:	fe 01       	movw	r30, r28
    29d2:	e7 55       	subi	r30, 0x57	; 87
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 81       	ld	r24, Z
    29d8:	89 30       	cpi	r24, 0x09	; 9
    29da:	89 f4       	brne	.+34     	; 0x29fe <TheSafe_Set_VidPassword+0xa34>
			{
				Password = key ;
    29dc:	fe 01       	movw	r30, r28
    29de:	e6 55       	subi	r30, 0x56	; 86
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	80 81       	ld	r24, Z
    29e4:	88 2f       	mov	r24, r24
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	a0 e0       	ldi	r26, 0x00	; 0
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	80 93 fa 00 	sts	0x00FA, r24
    29f0:	90 93 fb 00 	sts	0x00FB, r25
    29f4:	a0 93 fc 00 	sts	0x00FC, r26
    29f8:	b0 93 fd 00 	sts	0x00FD, r27
    29fc:	9b c5       	rjmp	.+2870   	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
			else
			{
				Password = (Password * 10) + key ;
    29fe:	80 91 fa 00 	lds	r24, 0x00FA
    2a02:	90 91 fb 00 	lds	r25, 0x00FB
    2a06:	a0 91 fc 00 	lds	r26, 0x00FC
    2a0a:	b0 91 fd 00 	lds	r27, 0x00FD
    2a0e:	2a e0       	ldi	r18, 0x0A	; 10
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	50 e0       	ldi	r21, 0x00	; 0
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    2a1e:	9b 01       	movw	r18, r22
    2a20:	ac 01       	movw	r20, r24
    2a22:	fe 01       	movw	r30, r28
    2a24:	e6 55       	subi	r30, 0x56	; 86
    2a26:	ff 4f       	sbci	r31, 0xFF	; 255
    2a28:	80 81       	ld	r24, Z
    2a2a:	88 2f       	mov	r24, r24
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	a0 e0       	ldi	r26, 0x00	; 0
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	82 0f       	add	r24, r18
    2a34:	93 1f       	adc	r25, r19
    2a36:	a4 1f       	adc	r26, r20
    2a38:	b5 1f       	adc	r27, r21
    2a3a:	80 93 fa 00 	sts	0x00FA, r24
    2a3e:	90 93 fb 00 	sts	0x00FB, r25
    2a42:	a0 93 fc 00 	sts	0x00FC, r26
    2a46:	b0 93 fd 00 	sts	0x00FD, r27
    2a4a:	74 c5       	rjmp	.+2792   	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
		}
		else if(key == 4)
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e6 55       	subi	r30, 0x56	; 86
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 81       	ld	r24, Z
    2a54:	84 30       	cpi	r24, 0x04	; 4
    2a56:	09 f0       	breq	.+2      	; 0x2a5a <TheSafe_Set_VidPassword+0xa90>
    2a58:	0a c1       	rjmp	.+532    	; 0x2c6e <TheSafe_Set_VidPassword+0xca4>
		{
			CLCD_GoToXY(0,Lcd_Location) ;
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	e7 55       	subi	r30, 0x57	; 87
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	60 81       	ld	r22, Z
    2a64:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_voidSendData(key + '0');
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e6 55       	subi	r30, 0x56	; 86
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	80 81       	ld	r24, Z
    2a70:	80 5d       	subi	r24, 0xD0	; 208
    2a72:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    2a76:	fe 01       	movw	r30, r28
    2a78:	e1 5a       	subi	r30, 0xA1	; 161
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	aa ef       	ldi	r26, 0xFA	; 250
    2a82:	b3 e4       	ldi	r27, 0x43	; 67
    2a84:	80 83       	st	Z, r24
    2a86:	91 83       	std	Z+1, r25	; 0x01
    2a88:	a2 83       	std	Z+2, r26	; 0x02
    2a8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8c:	8e 01       	movw	r16, r28
    2a8e:	05 5a       	subi	r16, 0xA5	; 165
    2a90:	1f 4f       	sbci	r17, 0xFF	; 255
    2a92:	fe 01       	movw	r30, r28
    2a94:	e1 5a       	subi	r30, 0xA1	; 161
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	60 81       	ld	r22, Z
    2a9a:	71 81       	ldd	r23, Z+1	; 0x01
    2a9c:	82 81       	ldd	r24, Z+2	; 0x02
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	4a ef       	ldi	r20, 0xFA	; 250
    2aa6:	54 e4       	ldi	r21, 0x44	; 68
    2aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	f8 01       	movw	r30, r16
    2ab2:	80 83       	st	Z, r24
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	a2 83       	std	Z+2, r26	; 0x02
    2ab8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aba:	fe 01       	movw	r30, r28
    2abc:	e5 5a       	subi	r30, 0xA5	; 165
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	60 81       	ld	r22, Z
    2ac2:	71 81       	ldd	r23, Z+1	; 0x01
    2ac4:	82 81       	ldd	r24, Z+2	; 0x02
    2ac6:	93 81       	ldd	r25, Z+3	; 0x03
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	40 e8       	ldi	r20, 0x80	; 128
    2ace:	5f e3       	ldi	r21, 0x3F	; 63
    2ad0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad4:	88 23       	and	r24, r24
    2ad6:	44 f4       	brge	.+16     	; 0x2ae8 <TheSafe_Set_VidPassword+0xb1e>
		__ticks = 1;
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e7 5a       	subi	r30, 0xA7	; 167
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	91 83       	std	Z+1, r25	; 0x01
    2ae4:	80 83       	st	Z, r24
    2ae6:	64 c0       	rjmp	.+200    	; 0x2bb0 <TheSafe_Set_VidPassword+0xbe6>
	else if (__tmp > 65535)
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e5 5a       	subi	r30, 0xA5	; 165
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	3f ef       	ldi	r19, 0xFF	; 255
    2afa:	4f e7       	ldi	r20, 0x7F	; 127
    2afc:	57 e4       	ldi	r21, 0x47	; 71
    2afe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b02:	18 16       	cp	r1, r24
    2b04:	0c f0       	brlt	.+2      	; 0x2b08 <TheSafe_Set_VidPassword+0xb3e>
    2b06:	43 c0       	rjmp	.+134    	; 0x2b8e <TheSafe_Set_VidPassword+0xbc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e1 5a       	subi	r30, 0xA1	; 161
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	60 81       	ld	r22, Z
    2b10:	71 81       	ldd	r23, Z+1	; 0x01
    2b12:	82 81       	ldd	r24, Z+2	; 0x02
    2b14:	93 81       	ldd	r25, Z+3	; 0x03
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	40 e2       	ldi	r20, 0x20	; 32
    2b1c:	51 e4       	ldi	r21, 0x41	; 65
    2b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	8e 01       	movw	r16, r28
    2b28:	07 5a       	subi	r16, 0xA7	; 167
    2b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	cd 01       	movw	r24, r26
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	f8 01       	movw	r30, r16
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	80 83       	st	Z, r24
    2b3e:	1f c0       	rjmp	.+62     	; 0x2b7e <TheSafe_Set_VidPassword+0xbb4>
    2b40:	fe 01       	movw	r30, r28
    2b42:	e9 5a       	subi	r30, 0xA9	; 169
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	88 ec       	ldi	r24, 0xC8	; 200
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	91 83       	std	Z+1, r25	; 0x01
    2b4c:	80 83       	st	Z, r24
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e9 5a       	subi	r30, 0xA9	; 169
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	91 81       	ldd	r25, Z+1	; 0x01
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	f1 f7       	brne	.-4      	; 0x2b58 <TheSafe_Set_VidPassword+0xb8e>
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e9 5a       	subi	r30, 0xA9	; 169
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	91 83       	std	Z+1, r25	; 0x01
    2b64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b66:	de 01       	movw	r26, r28
    2b68:	a7 5a       	subi	r26, 0xA7	; 167
    2b6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e7 5a       	subi	r30, 0xA7	; 167
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	80 81       	ld	r24, Z
    2b74:	91 81       	ldd	r25, Z+1	; 0x01
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	11 96       	adiw	r26, 0x01	; 1
    2b7a:	9c 93       	st	X, r25
    2b7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e7 5a       	subi	r30, 0xA7	; 167
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	d1 f6       	brne	.-76     	; 0x2b40 <TheSafe_Set_VidPassword+0xb76>
    2b8c:	27 c0       	rjmp	.+78     	; 0x2bdc <TheSafe_Set_VidPassword+0xc12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	8e 01       	movw	r16, r28
    2b90:	07 5a       	subi	r16, 0xA7	; 167
    2b92:	1f 4f       	sbci	r17, 0xFF	; 255
    2b94:	fe 01       	movw	r30, r28
    2b96:	e5 5a       	subi	r30, 0xA5	; 165
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	60 81       	ld	r22, Z
    2b9c:	71 81       	ldd	r23, Z+1	; 0x01
    2b9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ba0:	93 81       	ldd	r25, Z+3	; 0x03
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	f8 01       	movw	r30, r16
    2bac:	91 83       	std	Z+1, r25	; 0x01
    2bae:	80 83       	st	Z, r24
    2bb0:	de 01       	movw	r26, r28
    2bb2:	ab 5a       	subi	r26, 0xAB	; 171
    2bb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	e7 5a       	subi	r30, 0xA7	; 167
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	80 81       	ld	r24, Z
    2bbe:	91 81       	ldd	r25, Z+1	; 0x01
    2bc0:	8d 93       	st	X+, r24
    2bc2:	9c 93       	st	X, r25
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	eb 5a       	subi	r30, 0xAB	; 171
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <TheSafe_Set_VidPassword+0xc04>
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	eb 5a       	subi	r30, 0xAB	; 171
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	91 83       	std	Z+1, r25	; 0x01
    2bda:	80 83       	st	Z, r24
			_delay_ms(500);
			CLCD_GoToXY(0,Lcd_Location) ;
    2bdc:	fe 01       	movw	r30, r28
    2bde:	e7 55       	subi	r30, 0x57	; 87
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	60 81       	ld	r22, Z
    2be6:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString("*");
    2bea:	87 e7       	ldi	r24, 0x77	; 119
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			if (Lcd_Location == 9)
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e7 55       	subi	r30, 0x57	; 87
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	89 30       	cpi	r24, 0x09	; 9
    2bfc:	89 f4       	brne	.+34     	; 0x2c20 <TheSafe_Set_VidPassword+0xc56>
			{
				Password = key ;
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e6 55       	subi	r30, 0x56	; 86
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	80 81       	ld	r24, Z
    2c06:	88 2f       	mov	r24, r24
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	a0 e0       	ldi	r26, 0x00	; 0
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	80 93 fa 00 	sts	0x00FA, r24
    2c12:	90 93 fb 00 	sts	0x00FB, r25
    2c16:	a0 93 fc 00 	sts	0x00FC, r26
    2c1a:	b0 93 fd 00 	sts	0x00FD, r27
    2c1e:	8a c4       	rjmp	.+2324   	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
			else
			{
				Password = (Password * 10) + key ;
    2c20:	80 91 fa 00 	lds	r24, 0x00FA
    2c24:	90 91 fb 00 	lds	r25, 0x00FB
    2c28:	a0 91 fc 00 	lds	r26, 0x00FC
    2c2c:	b0 91 fd 00 	lds	r27, 0x00FD
    2c30:	2a e0       	ldi	r18, 0x0A	; 10
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e0       	ldi	r20, 0x00	; 0
    2c36:	50 e0       	ldi	r21, 0x00	; 0
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    2c40:	9b 01       	movw	r18, r22
    2c42:	ac 01       	movw	r20, r24
    2c44:	fe 01       	movw	r30, r28
    2c46:	e6 55       	subi	r30, 0x56	; 86
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	80 81       	ld	r24, Z
    2c4c:	88 2f       	mov	r24, r24
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	a0 e0       	ldi	r26, 0x00	; 0
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	82 0f       	add	r24, r18
    2c56:	93 1f       	adc	r25, r19
    2c58:	a4 1f       	adc	r26, r20
    2c5a:	b5 1f       	adc	r27, r21
    2c5c:	80 93 fa 00 	sts	0x00FA, r24
    2c60:	90 93 fb 00 	sts	0x00FB, r25
    2c64:	a0 93 fc 00 	sts	0x00FC, r26
    2c68:	b0 93 fd 00 	sts	0x00FD, r27
    2c6c:	63 c4       	rjmp	.+2246   	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
		}
		else if(key == 5)
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e6 55       	subi	r30, 0x56	; 86
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	85 30       	cpi	r24, 0x05	; 5
    2c78:	09 f0       	breq	.+2      	; 0x2c7c <TheSafe_Set_VidPassword+0xcb2>
    2c7a:	0a c1       	rjmp	.+532    	; 0x2e90 <TheSafe_Set_VidPassword+0xec6>
		{
			CLCD_GoToXY(0,Lcd_Location) ;
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	e7 55       	subi	r30, 0x57	; 87
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	60 81       	ld	r22, Z
    2c86:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_voidSendData(key + '0');
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	e6 55       	subi	r30, 0x56	; 86
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	80 81       	ld	r24, Z
    2c92:	80 5d       	subi	r24, 0xD0	; 208
    2c94:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    2c98:	fe 01       	movw	r30, r28
    2c9a:	ef 5a       	subi	r30, 0xAF	; 175
    2c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	aa ef       	ldi	r26, 0xFA	; 250
    2ca4:	b3 e4       	ldi	r27, 0x43	; 67
    2ca6:	80 83       	st	Z, r24
    2ca8:	91 83       	std	Z+1, r25	; 0x01
    2caa:	a2 83       	std	Z+2, r26	; 0x02
    2cac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cae:	8e 01       	movw	r16, r28
    2cb0:	03 5b       	subi	r16, 0xB3	; 179
    2cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	ef 5a       	subi	r30, 0xAF	; 175
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	4a ef       	ldi	r20, 0xFA	; 250
    2cc8:	54 e4       	ldi	r21, 0x44	; 68
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	f8 01       	movw	r30, r16
    2cd4:	80 83       	st	Z, r24
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	a2 83       	std	Z+2, r26	; 0x02
    2cda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e3 5b       	subi	r30, 0xB3	; 179
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	60 81       	ld	r22, Z
    2ce4:	71 81       	ldd	r23, Z+1	; 0x01
    2ce6:	82 81       	ldd	r24, Z+2	; 0x02
    2ce8:	93 81       	ldd	r25, Z+3	; 0x03
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e8       	ldi	r20, 0x80	; 128
    2cf0:	5f e3       	ldi	r21, 0x3F	; 63
    2cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cf6:	88 23       	and	r24, r24
    2cf8:	44 f4       	brge	.+16     	; 0x2d0a <TheSafe_Set_VidPassword+0xd40>
		__ticks = 1;
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e5 5b       	subi	r30, 0xB5	; 181
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	80 83       	st	Z, r24
    2d08:	64 c0       	rjmp	.+200    	; 0x2dd2 <TheSafe_Set_VidPassword+0xe08>
	else if (__tmp > 65535)
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	e3 5b       	subi	r30, 0xB3	; 179
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	60 81       	ld	r22, Z
    2d12:	71 81       	ldd	r23, Z+1	; 0x01
    2d14:	82 81       	ldd	r24, Z+2	; 0x02
    2d16:	93 81       	ldd	r25, Z+3	; 0x03
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	3f ef       	ldi	r19, 0xFF	; 255
    2d1c:	4f e7       	ldi	r20, 0x7F	; 127
    2d1e:	57 e4       	ldi	r21, 0x47	; 71
    2d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d24:	18 16       	cp	r1, r24
    2d26:	0c f0       	brlt	.+2      	; 0x2d2a <TheSafe_Set_VidPassword+0xd60>
    2d28:	43 c0       	rjmp	.+134    	; 0x2db0 <TheSafe_Set_VidPassword+0xde6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	ef 5a       	subi	r30, 0xAF	; 175
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	60 81       	ld	r22, Z
    2d32:	71 81       	ldd	r23, Z+1	; 0x01
    2d34:	82 81       	ldd	r24, Z+2	; 0x02
    2d36:	93 81       	ldd	r25, Z+3	; 0x03
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e2       	ldi	r20, 0x20	; 32
    2d3e:	51 e4       	ldi	r21, 0x41	; 65
    2d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	8e 01       	movw	r16, r28
    2d4a:	05 5b       	subi	r16, 0xB5	; 181
    2d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4e:	bc 01       	movw	r22, r24
    2d50:	cd 01       	movw	r24, r26
    2d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	f8 01       	movw	r30, r16
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	80 83       	st	Z, r24
    2d60:	1f c0       	rjmp	.+62     	; 0x2da0 <TheSafe_Set_VidPassword+0xdd6>
    2d62:	fe 01       	movw	r30, r28
    2d64:	e7 5b       	subi	r30, 0xB7	; 183
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	88 ec       	ldi	r24, 0xC8	; 200
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	91 83       	std	Z+1, r25	; 0x01
    2d6e:	80 83       	st	Z, r24
    2d70:	fe 01       	movw	r30, r28
    2d72:	e7 5b       	subi	r30, 0xB7	; 183
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <TheSafe_Set_VidPassword+0xdb0>
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e7 5b       	subi	r30, 0xB7	; 183
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	91 83       	std	Z+1, r25	; 0x01
    2d86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d88:	de 01       	movw	r26, r28
    2d8a:	a5 5b       	subi	r26, 0xB5	; 181
    2d8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d8e:	fe 01       	movw	r30, r28
    2d90:	e5 5b       	subi	r30, 0xB5	; 181
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	80 81       	ld	r24, Z
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	11 96       	adiw	r26, 0x01	; 1
    2d9c:	9c 93       	st	X, r25
    2d9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da0:	fe 01       	movw	r30, r28
    2da2:	e5 5b       	subi	r30, 0xB5	; 181
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	d1 f6       	brne	.-76     	; 0x2d62 <TheSafe_Set_VidPassword+0xd98>
    2dae:	27 c0       	rjmp	.+78     	; 0x2dfe <TheSafe_Set_VidPassword+0xe34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db0:	8e 01       	movw	r16, r28
    2db2:	05 5b       	subi	r16, 0xB5	; 181
    2db4:	1f 4f       	sbci	r17, 0xFF	; 255
    2db6:	fe 01       	movw	r30, r28
    2db8:	e3 5b       	subi	r30, 0xB3	; 179
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	60 81       	ld	r22, Z
    2dbe:	71 81       	ldd	r23, Z+1	; 0x01
    2dc0:	82 81       	ldd	r24, Z+2	; 0x02
    2dc2:	93 81       	ldd	r25, Z+3	; 0x03
    2dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	f8 01       	movw	r30, r16
    2dce:	91 83       	std	Z+1, r25	; 0x01
    2dd0:	80 83       	st	Z, r24
    2dd2:	de 01       	movw	r26, r28
    2dd4:	a9 5b       	subi	r26, 0xB9	; 185
    2dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd8:	fe 01       	movw	r30, r28
    2dda:	e5 5b       	subi	r30, 0xB5	; 181
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	80 81       	ld	r24, Z
    2de0:	91 81       	ldd	r25, Z+1	; 0x01
    2de2:	8d 93       	st	X+, r24
    2de4:	9c 93       	st	X, r25
    2de6:	fe 01       	movw	r30, r28
    2de8:	e9 5b       	subi	r30, 0xB9	; 185
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <TheSafe_Set_VidPassword+0xe26>
    2df4:	fe 01       	movw	r30, r28
    2df6:	e9 5b       	subi	r30, 0xB9	; 185
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	91 83       	std	Z+1, r25	; 0x01
    2dfc:	80 83       	st	Z, r24
			_delay_ms(500);
			CLCD_GoToXY(0,Lcd_Location) ;
    2dfe:	fe 01       	movw	r30, r28
    2e00:	e7 55       	subi	r30, 0x57	; 87
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	60 81       	ld	r22, Z
    2e08:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString("*");
    2e0c:	87 e7       	ldi	r24, 0x77	; 119
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			if (Lcd_Location == 9)
    2e14:	fe 01       	movw	r30, r28
    2e16:	e7 55       	subi	r30, 0x57	; 87
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 81       	ld	r24, Z
    2e1c:	89 30       	cpi	r24, 0x09	; 9
    2e1e:	89 f4       	brne	.+34     	; 0x2e42 <TheSafe_Set_VidPassword+0xe78>
			{
				Password = key ;
    2e20:	fe 01       	movw	r30, r28
    2e22:	e6 55       	subi	r30, 0x56	; 86
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 81       	ld	r24, Z
    2e28:	88 2f       	mov	r24, r24
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	a0 e0       	ldi	r26, 0x00	; 0
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	80 93 fa 00 	sts	0x00FA, r24
    2e34:	90 93 fb 00 	sts	0x00FB, r25
    2e38:	a0 93 fc 00 	sts	0x00FC, r26
    2e3c:	b0 93 fd 00 	sts	0x00FD, r27
    2e40:	79 c3       	rjmp	.+1778   	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
			else
			{
				Password = (Password * 10) + key ;
    2e42:	80 91 fa 00 	lds	r24, 0x00FA
    2e46:	90 91 fb 00 	lds	r25, 0x00FB
    2e4a:	a0 91 fc 00 	lds	r26, 0x00FC
    2e4e:	b0 91 fd 00 	lds	r27, 0x00FD
    2e52:	2a e0       	ldi	r18, 0x0A	; 10
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	40 e0       	ldi	r20, 0x00	; 0
    2e58:	50 e0       	ldi	r21, 0x00	; 0
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    2e62:	9b 01       	movw	r18, r22
    2e64:	ac 01       	movw	r20, r24
    2e66:	fe 01       	movw	r30, r28
    2e68:	e6 55       	subi	r30, 0x56	; 86
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	80 81       	ld	r24, Z
    2e6e:	88 2f       	mov	r24, r24
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	a0 e0       	ldi	r26, 0x00	; 0
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	82 0f       	add	r24, r18
    2e78:	93 1f       	adc	r25, r19
    2e7a:	a4 1f       	adc	r26, r20
    2e7c:	b5 1f       	adc	r27, r21
    2e7e:	80 93 fa 00 	sts	0x00FA, r24
    2e82:	90 93 fb 00 	sts	0x00FB, r25
    2e86:	a0 93 fc 00 	sts	0x00FC, r26
    2e8a:	b0 93 fd 00 	sts	0x00FD, r27
    2e8e:	52 c3       	rjmp	.+1700   	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
		}
		else if(key == 6)
    2e90:	fe 01       	movw	r30, r28
    2e92:	e6 55       	subi	r30, 0x56	; 86
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 81       	ld	r24, Z
    2e98:	86 30       	cpi	r24, 0x06	; 6
    2e9a:	09 f0       	breq	.+2      	; 0x2e9e <TheSafe_Set_VidPassword+0xed4>
    2e9c:	dc c0       	rjmp	.+440    	; 0x3056 <TheSafe_Set_VidPassword+0x108c>
		{
			CLCD_GoToXY(0,Lcd_Location) ;
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e7 55       	subi	r30, 0x57	; 87
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	60 81       	ld	r22, Z
    2ea8:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_voidSendData(key + '0');
    2eac:	fe 01       	movw	r30, r28
    2eae:	e6 55       	subi	r30, 0x56	; 86
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	80 81       	ld	r24, Z
    2eb4:	80 5d       	subi	r24, 0xD0	; 208
    2eb6:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    2eba:	fe 01       	movw	r30, r28
    2ebc:	ed 5b       	subi	r30, 0xBD	; 189
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	aa ef       	ldi	r26, 0xFA	; 250
    2ec6:	b3 e4       	ldi	r27, 0x43	; 67
    2ec8:	80 83       	st	Z, r24
    2eca:	91 83       	std	Z+1, r25	; 0x01
    2ecc:	a2 83       	std	Z+2, r26	; 0x02
    2ece:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed0:	8e 01       	movw	r16, r28
    2ed2:	01 5c       	subi	r16, 0xC1	; 193
    2ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	ed 5b       	subi	r30, 0xBD	; 189
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	60 81       	ld	r22, Z
    2ede:	71 81       	ldd	r23, Z+1	; 0x01
    2ee0:	82 81       	ldd	r24, Z+2	; 0x02
    2ee2:	93 81       	ldd	r25, Z+3	; 0x03
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	4a ef       	ldi	r20, 0xFA	; 250
    2eea:	54 e4       	ldi	r21, 0x44	; 68
    2eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	f8 01       	movw	r30, r16
    2ef6:	80 83       	st	Z, r24
    2ef8:	91 83       	std	Z+1, r25	; 0x01
    2efa:	a2 83       	std	Z+2, r26	; 0x02
    2efc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2efe:	fe 01       	movw	r30, r28
    2f00:	ff 96       	adiw	r30, 0x3f	; 63
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e8       	ldi	r20, 0x80	; 128
    2f10:	5f e3       	ldi	r21, 0x3F	; 63
    2f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f16:	88 23       	and	r24, r24
    2f18:	2c f4       	brge	.+10     	; 0x2f24 <TheSafe_Set_VidPassword+0xf5a>
		__ticks = 1;
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	9e af       	std	Y+62, r25	; 0x3e
    2f20:	8d af       	std	Y+61, r24	; 0x3d
    2f22:	46 c0       	rjmp	.+140    	; 0x2fb0 <TheSafe_Set_VidPassword+0xfe6>
	else if (__tmp > 65535)
    2f24:	fe 01       	movw	r30, r28
    2f26:	ff 96       	adiw	r30, 0x3f	; 63
    2f28:	60 81       	ld	r22, Z
    2f2a:	71 81       	ldd	r23, Z+1	; 0x01
    2f2c:	82 81       	ldd	r24, Z+2	; 0x02
    2f2e:	93 81       	ldd	r25, Z+3	; 0x03
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	3f ef       	ldi	r19, 0xFF	; 255
    2f34:	4f e7       	ldi	r20, 0x7F	; 127
    2f36:	57 e4       	ldi	r21, 0x47	; 71
    2f38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f3c:	18 16       	cp	r1, r24
    2f3e:	64 f5       	brge	.+88     	; 0x2f98 <TheSafe_Set_VidPassword+0xfce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f40:	fe 01       	movw	r30, r28
    2f42:	ed 5b       	subi	r30, 0xBD	; 189
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	60 81       	ld	r22, Z
    2f48:	71 81       	ldd	r23, Z+1	; 0x01
    2f4a:	82 81       	ldd	r24, Z+2	; 0x02
    2f4c:	93 81       	ldd	r25, Z+3	; 0x03
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e2       	ldi	r20, 0x20	; 32
    2f54:	51 e4       	ldi	r21, 0x41	; 65
    2f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	9e af       	std	Y+62, r25	; 0x3e
    2f6c:	8d af       	std	Y+61, r24	; 0x3d
    2f6e:	0f c0       	rjmp	.+30     	; 0x2f8e <TheSafe_Set_VidPassword+0xfc4>
    2f70:	88 ec       	ldi	r24, 0xC8	; 200
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	9c af       	std	Y+60, r25	; 0x3c
    2f76:	8b af       	std	Y+59, r24	; 0x3b
    2f78:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f7a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <TheSafe_Set_VidPassword+0xfb2>
    2f80:	9c af       	std	Y+60, r25	; 0x3c
    2f82:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f84:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f86:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	9e af       	std	Y+62, r25	; 0x3e
    2f8c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f90:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	69 f7       	brne	.-38     	; 0x2f70 <TheSafe_Set_VidPassword+0xfa6>
    2f96:	16 c0       	rjmp	.+44     	; 0x2fc4 <TheSafe_Set_VidPassword+0xffa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f98:	fe 01       	movw	r30, r28
    2f9a:	ff 96       	adiw	r30, 0x3f	; 63
    2f9c:	60 81       	ld	r22, Z
    2f9e:	71 81       	ldd	r23, Z+1	; 0x01
    2fa0:	82 81       	ldd	r24, Z+2	; 0x02
    2fa2:	93 81       	ldd	r25, Z+3	; 0x03
    2fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	9e af       	std	Y+62, r25	; 0x3e
    2fae:	8d af       	std	Y+61, r24	; 0x3d
    2fb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fb4:	9a af       	std	Y+58, r25	; 0x3a
    2fb6:	89 af       	std	Y+57, r24	; 0x39
    2fb8:	89 ad       	ldd	r24, Y+57	; 0x39
    2fba:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	f1 f7       	brne	.-4      	; 0x2fbc <TheSafe_Set_VidPassword+0xff2>
    2fc0:	9a af       	std	Y+58, r25	; 0x3a
    2fc2:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);
			CLCD_GoToXY(0,Lcd_Location) ;
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	e7 55       	subi	r30, 0x57	; 87
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	60 81       	ld	r22, Z
    2fce:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString("*");
    2fd2:	87 e7       	ldi	r24, 0x77	; 119
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			if (Lcd_Location == 9)
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e7 55       	subi	r30, 0x57	; 87
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
    2fe2:	89 30       	cpi	r24, 0x09	; 9
    2fe4:	89 f4       	brne	.+34     	; 0x3008 <TheSafe_Set_VidPassword+0x103e>
			{
				Password = key ;
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e6 55       	subi	r30, 0x56	; 86
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	80 81       	ld	r24, Z
    2fee:	88 2f       	mov	r24, r24
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	a0 e0       	ldi	r26, 0x00	; 0
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	80 93 fa 00 	sts	0x00FA, r24
    2ffa:	90 93 fb 00 	sts	0x00FB, r25
    2ffe:	a0 93 fc 00 	sts	0x00FC, r26
    3002:	b0 93 fd 00 	sts	0x00FD, r27
    3006:	96 c2       	rjmp	.+1324   	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
			else
			{
				Password = (Password * 10) + key ;
    3008:	80 91 fa 00 	lds	r24, 0x00FA
    300c:	90 91 fb 00 	lds	r25, 0x00FB
    3010:	a0 91 fc 00 	lds	r26, 0x00FC
    3014:	b0 91 fd 00 	lds	r27, 0x00FD
    3018:	2a e0       	ldi	r18, 0x0A	; 10
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	40 e0       	ldi	r20, 0x00	; 0
    301e:	50 e0       	ldi	r21, 0x00	; 0
    3020:	bc 01       	movw	r22, r24
    3022:	cd 01       	movw	r24, r26
    3024:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    3028:	9b 01       	movw	r18, r22
    302a:	ac 01       	movw	r20, r24
    302c:	fe 01       	movw	r30, r28
    302e:	e6 55       	subi	r30, 0x56	; 86
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	80 81       	ld	r24, Z
    3034:	88 2f       	mov	r24, r24
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	a0 e0       	ldi	r26, 0x00	; 0
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	82 0f       	add	r24, r18
    303e:	93 1f       	adc	r25, r19
    3040:	a4 1f       	adc	r26, r20
    3042:	b5 1f       	adc	r27, r21
    3044:	80 93 fa 00 	sts	0x00FA, r24
    3048:	90 93 fb 00 	sts	0x00FB, r25
    304c:	a0 93 fc 00 	sts	0x00FC, r26
    3050:	b0 93 fd 00 	sts	0x00FD, r27
    3054:	6f c2       	rjmp	.+1246   	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
		}
		else if(key == 7)
    3056:	fe 01       	movw	r30, r28
    3058:	e6 55       	subi	r30, 0x56	; 86
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	80 81       	ld	r24, Z
    305e:	87 30       	cpi	r24, 0x07	; 7
    3060:	09 f0       	breq	.+2      	; 0x3064 <TheSafe_Set_VidPassword+0x109a>
    3062:	c9 c0       	rjmp	.+402    	; 0x31f6 <TheSafe_Set_VidPassword+0x122c>
		{
			CLCD_GoToXY(0,Lcd_Location) ;
    3064:	fe 01       	movw	r30, r28
    3066:	e7 55       	subi	r30, 0x57	; 87
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	60 81       	ld	r22, Z
    306e:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_voidSendData(key + '0');
    3072:	fe 01       	movw	r30, r28
    3074:	e6 55       	subi	r30, 0x56	; 86
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	80 81       	ld	r24, Z
    307a:	80 5d       	subi	r24, 0xD0	; 208
    307c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	aa ef       	ldi	r26, 0xFA	; 250
    3086:	b3 e4       	ldi	r27, 0x43	; 67
    3088:	8d ab       	std	Y+53, r24	; 0x35
    308a:	9e ab       	std	Y+54, r25	; 0x36
    308c:	af ab       	std	Y+55, r26	; 0x37
    308e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3090:	6d a9       	ldd	r22, Y+53	; 0x35
    3092:	7e a9       	ldd	r23, Y+54	; 0x36
    3094:	8f a9       	ldd	r24, Y+55	; 0x37
    3096:	98 ad       	ldd	r25, Y+56	; 0x38
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	4a ef       	ldi	r20, 0xFA	; 250
    309e:	54 e4       	ldi	r21, 0x44	; 68
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	89 ab       	std	Y+49, r24	; 0x31
    30aa:	9a ab       	std	Y+50, r25	; 0x32
    30ac:	ab ab       	std	Y+51, r26	; 0x33
    30ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30b0:	69 a9       	ldd	r22, Y+49	; 0x31
    30b2:	7a a9       	ldd	r23, Y+50	; 0x32
    30b4:	8b a9       	ldd	r24, Y+51	; 0x33
    30b6:	9c a9       	ldd	r25, Y+52	; 0x34
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e8       	ldi	r20, 0x80	; 128
    30be:	5f e3       	ldi	r21, 0x3F	; 63
    30c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30c4:	88 23       	and	r24, r24
    30c6:	2c f4       	brge	.+10     	; 0x30d2 <TheSafe_Set_VidPassword+0x1108>
		__ticks = 1;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	98 ab       	std	Y+48, r25	; 0x30
    30ce:	8f a7       	std	Y+47, r24	; 0x2f
    30d0:	3f c0       	rjmp	.+126    	; 0x3150 <TheSafe_Set_VidPassword+0x1186>
	else if (__tmp > 65535)
    30d2:	69 a9       	ldd	r22, Y+49	; 0x31
    30d4:	7a a9       	ldd	r23, Y+50	; 0x32
    30d6:	8b a9       	ldd	r24, Y+51	; 0x33
    30d8:	9c a9       	ldd	r25, Y+52	; 0x34
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	3f ef       	ldi	r19, 0xFF	; 255
    30de:	4f e7       	ldi	r20, 0x7F	; 127
    30e0:	57 e4       	ldi	r21, 0x47	; 71
    30e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30e6:	18 16       	cp	r1, r24
    30e8:	4c f5       	brge	.+82     	; 0x313c <TheSafe_Set_VidPassword+0x1172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ea:	6d a9       	ldd	r22, Y+53	; 0x35
    30ec:	7e a9       	ldd	r23, Y+54	; 0x36
    30ee:	8f a9       	ldd	r24, Y+55	; 0x37
    30f0:	98 ad       	ldd	r25, Y+56	; 0x38
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e2       	ldi	r20, 0x20	; 32
    30f8:	51 e4       	ldi	r21, 0x41	; 65
    30fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	bc 01       	movw	r22, r24
    3104:	cd 01       	movw	r24, r26
    3106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	98 ab       	std	Y+48, r25	; 0x30
    3110:	8f a7       	std	Y+47, r24	; 0x2f
    3112:	0f c0       	rjmp	.+30     	; 0x3132 <TheSafe_Set_VidPassword+0x1168>
    3114:	88 ec       	ldi	r24, 0xC8	; 200
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	9e a7       	std	Y+46, r25	; 0x2e
    311a:	8d a7       	std	Y+45, r24	; 0x2d
    311c:	8d a5       	ldd	r24, Y+45	; 0x2d
    311e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <TheSafe_Set_VidPassword+0x1156>
    3124:	9e a7       	std	Y+46, r25	; 0x2e
    3126:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3128:	8f a5       	ldd	r24, Y+47	; 0x2f
    312a:	98 a9       	ldd	r25, Y+48	; 0x30
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	98 ab       	std	Y+48, r25	; 0x30
    3130:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3132:	8f a5       	ldd	r24, Y+47	; 0x2f
    3134:	98 a9       	ldd	r25, Y+48	; 0x30
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	69 f7       	brne	.-38     	; 0x3114 <TheSafe_Set_VidPassword+0x114a>
    313a:	14 c0       	rjmp	.+40     	; 0x3164 <TheSafe_Set_VidPassword+0x119a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313c:	69 a9       	ldd	r22, Y+49	; 0x31
    313e:	7a a9       	ldd	r23, Y+50	; 0x32
    3140:	8b a9       	ldd	r24, Y+51	; 0x33
    3142:	9c a9       	ldd	r25, Y+52	; 0x34
    3144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	98 ab       	std	Y+48, r25	; 0x30
    314e:	8f a7       	std	Y+47, r24	; 0x2f
    3150:	8f a5       	ldd	r24, Y+47	; 0x2f
    3152:	98 a9       	ldd	r25, Y+48	; 0x30
    3154:	9c a7       	std	Y+44, r25	; 0x2c
    3156:	8b a7       	std	Y+43, r24	; 0x2b
    3158:	8b a5       	ldd	r24, Y+43	; 0x2b
    315a:	9c a5       	ldd	r25, Y+44	; 0x2c
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <TheSafe_Set_VidPassword+0x1192>
    3160:	9c a7       	std	Y+44, r25	; 0x2c
    3162:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			CLCD_GoToXY(0,Lcd_Location) ;
    3164:	fe 01       	movw	r30, r28
    3166:	e7 55       	subi	r30, 0x57	; 87
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	60 81       	ld	r22, Z
    316e:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString("*");
    3172:	87 e7       	ldi	r24, 0x77	; 119
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			if (Lcd_Location == 9)
    317a:	fe 01       	movw	r30, r28
    317c:	e7 55       	subi	r30, 0x57	; 87
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	80 81       	ld	r24, Z
    3182:	89 30       	cpi	r24, 0x09	; 9
    3184:	89 f4       	brne	.+34     	; 0x31a8 <TheSafe_Set_VidPassword+0x11de>
			{
				Password = key ;
    3186:	fe 01       	movw	r30, r28
    3188:	e6 55       	subi	r30, 0x56	; 86
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	80 81       	ld	r24, Z
    318e:	88 2f       	mov	r24, r24
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	a0 e0       	ldi	r26, 0x00	; 0
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	80 93 fa 00 	sts	0x00FA, r24
    319a:	90 93 fb 00 	sts	0x00FB, r25
    319e:	a0 93 fc 00 	sts	0x00FC, r26
    31a2:	b0 93 fd 00 	sts	0x00FD, r27
    31a6:	c6 c1       	rjmp	.+908    	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
			else
			{
				Password = (Password * 10) + key ;
    31a8:	80 91 fa 00 	lds	r24, 0x00FA
    31ac:	90 91 fb 00 	lds	r25, 0x00FB
    31b0:	a0 91 fc 00 	lds	r26, 0x00FC
    31b4:	b0 91 fd 00 	lds	r27, 0x00FD
    31b8:	2a e0       	ldi	r18, 0x0A	; 10
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	40 e0       	ldi	r20, 0x00	; 0
    31be:	50 e0       	ldi	r21, 0x00	; 0
    31c0:	bc 01       	movw	r22, r24
    31c2:	cd 01       	movw	r24, r26
    31c4:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    31c8:	9b 01       	movw	r18, r22
    31ca:	ac 01       	movw	r20, r24
    31cc:	fe 01       	movw	r30, r28
    31ce:	e6 55       	subi	r30, 0x56	; 86
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 81       	ld	r24, Z
    31d4:	88 2f       	mov	r24, r24
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	a0 e0       	ldi	r26, 0x00	; 0
    31da:	b0 e0       	ldi	r27, 0x00	; 0
    31dc:	82 0f       	add	r24, r18
    31de:	93 1f       	adc	r25, r19
    31e0:	a4 1f       	adc	r26, r20
    31e2:	b5 1f       	adc	r27, r21
    31e4:	80 93 fa 00 	sts	0x00FA, r24
    31e8:	90 93 fb 00 	sts	0x00FB, r25
    31ec:	a0 93 fc 00 	sts	0x00FC, r26
    31f0:	b0 93 fd 00 	sts	0x00FD, r27
    31f4:	9f c1       	rjmp	.+830    	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
		}
		else if(key == 8)
    31f6:	fe 01       	movw	r30, r28
    31f8:	e6 55       	subi	r30, 0x56	; 86
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	80 81       	ld	r24, Z
    31fe:	88 30       	cpi	r24, 0x08	; 8
    3200:	09 f0       	breq	.+2      	; 0x3204 <TheSafe_Set_VidPassword+0x123a>
    3202:	c9 c0       	rjmp	.+402    	; 0x3396 <TheSafe_Set_VidPassword+0x13cc>
		{
			CLCD_GoToXY(0,Lcd_Location) ;
    3204:	fe 01       	movw	r30, r28
    3206:	e7 55       	subi	r30, 0x57	; 87
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	60 81       	ld	r22, Z
    320e:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_voidSendData(key + '0');
    3212:	fe 01       	movw	r30, r28
    3214:	e6 55       	subi	r30, 0x56	; 86
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	80 81       	ld	r24, Z
    321a:	80 5d       	subi	r24, 0xD0	; 208
    321c:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	aa ef       	ldi	r26, 0xFA	; 250
    3226:	b3 e4       	ldi	r27, 0x43	; 67
    3228:	8f a3       	std	Y+39, r24	; 0x27
    322a:	98 a7       	std	Y+40, r25	; 0x28
    322c:	a9 a7       	std	Y+41, r26	; 0x29
    322e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3230:	6f a1       	ldd	r22, Y+39	; 0x27
    3232:	78 a5       	ldd	r23, Y+40	; 0x28
    3234:	89 a5       	ldd	r24, Y+41	; 0x29
    3236:	9a a5       	ldd	r25, Y+42	; 0x2a
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	4a ef       	ldi	r20, 0xFA	; 250
    323e:	54 e4       	ldi	r21, 0x44	; 68
    3240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	8b a3       	std	Y+35, r24	; 0x23
    324a:	9c a3       	std	Y+36, r25	; 0x24
    324c:	ad a3       	std	Y+37, r26	; 0x25
    324e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3250:	6b a1       	ldd	r22, Y+35	; 0x23
    3252:	7c a1       	ldd	r23, Y+36	; 0x24
    3254:	8d a1       	ldd	r24, Y+37	; 0x25
    3256:	9e a1       	ldd	r25, Y+38	; 0x26
    3258:	20 e0       	ldi	r18, 0x00	; 0
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	40 e8       	ldi	r20, 0x80	; 128
    325e:	5f e3       	ldi	r21, 0x3F	; 63
    3260:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3264:	88 23       	and	r24, r24
    3266:	2c f4       	brge	.+10     	; 0x3272 <TheSafe_Set_VidPassword+0x12a8>
		__ticks = 1;
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	9a a3       	std	Y+34, r25	; 0x22
    326e:	89 a3       	std	Y+33, r24	; 0x21
    3270:	3f c0       	rjmp	.+126    	; 0x32f0 <TheSafe_Set_VidPassword+0x1326>
	else if (__tmp > 65535)
    3272:	6b a1       	ldd	r22, Y+35	; 0x23
    3274:	7c a1       	ldd	r23, Y+36	; 0x24
    3276:	8d a1       	ldd	r24, Y+37	; 0x25
    3278:	9e a1       	ldd	r25, Y+38	; 0x26
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	3f ef       	ldi	r19, 0xFF	; 255
    327e:	4f e7       	ldi	r20, 0x7F	; 127
    3280:	57 e4       	ldi	r21, 0x47	; 71
    3282:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3286:	18 16       	cp	r1, r24
    3288:	4c f5       	brge	.+82     	; 0x32dc <TheSafe_Set_VidPassword+0x1312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    328a:	6f a1       	ldd	r22, Y+39	; 0x27
    328c:	78 a5       	ldd	r23, Y+40	; 0x28
    328e:	89 a5       	ldd	r24, Y+41	; 0x29
    3290:	9a a5       	ldd	r25, Y+42	; 0x2a
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 e2       	ldi	r20, 0x20	; 32
    3298:	51 e4       	ldi	r21, 0x41	; 65
    329a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	bc 01       	movw	r22, r24
    32a4:	cd 01       	movw	r24, r26
    32a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	9a a3       	std	Y+34, r25	; 0x22
    32b0:	89 a3       	std	Y+33, r24	; 0x21
    32b2:	0f c0       	rjmp	.+30     	; 0x32d2 <TheSafe_Set_VidPassword+0x1308>
    32b4:	88 ec       	ldi	r24, 0xC8	; 200
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	98 a3       	std	Y+32, r25	; 0x20
    32ba:	8f 8f       	std	Y+31, r24	; 0x1f
    32bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32be:	98 a1       	ldd	r25, Y+32	; 0x20
    32c0:	01 97       	sbiw	r24, 0x01	; 1
    32c2:	f1 f7       	brne	.-4      	; 0x32c0 <TheSafe_Set_VidPassword+0x12f6>
    32c4:	98 a3       	std	Y+32, r25	; 0x20
    32c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c8:	89 a1       	ldd	r24, Y+33	; 0x21
    32ca:	9a a1       	ldd	r25, Y+34	; 0x22
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	9a a3       	std	Y+34, r25	; 0x22
    32d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d2:	89 a1       	ldd	r24, Y+33	; 0x21
    32d4:	9a a1       	ldd	r25, Y+34	; 0x22
    32d6:	00 97       	sbiw	r24, 0x00	; 0
    32d8:	69 f7       	brne	.-38     	; 0x32b4 <TheSafe_Set_VidPassword+0x12ea>
    32da:	14 c0       	rjmp	.+40     	; 0x3304 <TheSafe_Set_VidPassword+0x133a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32dc:	6b a1       	ldd	r22, Y+35	; 0x23
    32de:	7c a1       	ldd	r23, Y+36	; 0x24
    32e0:	8d a1       	ldd	r24, Y+37	; 0x25
    32e2:	9e a1       	ldd	r25, Y+38	; 0x26
    32e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	9a a3       	std	Y+34, r25	; 0x22
    32ee:	89 a3       	std	Y+33, r24	; 0x21
    32f0:	89 a1       	ldd	r24, Y+33	; 0x21
    32f2:	9a a1       	ldd	r25, Y+34	; 0x22
    32f4:	9e 8f       	std	Y+30, r25	; 0x1e
    32f6:	8d 8f       	std	Y+29, r24	; 0x1d
    32f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	f1 f7       	brne	.-4      	; 0x32fc <TheSafe_Set_VidPassword+0x1332>
    3300:	9e 8f       	std	Y+30, r25	; 0x1e
    3302:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			CLCD_GoToXY(0,Lcd_Location) ;
    3304:	fe 01       	movw	r30, r28
    3306:	e7 55       	subi	r30, 0x57	; 87
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	60 81       	ld	r22, Z
    330e:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString("*");
    3312:	87 e7       	ldi	r24, 0x77	; 119
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			if (Lcd_Location == 9)
    331a:	fe 01       	movw	r30, r28
    331c:	e7 55       	subi	r30, 0x57	; 87
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	80 81       	ld	r24, Z
    3322:	89 30       	cpi	r24, 0x09	; 9
    3324:	89 f4       	brne	.+34     	; 0x3348 <TheSafe_Set_VidPassword+0x137e>
			{
				Password = key ;
    3326:	fe 01       	movw	r30, r28
    3328:	e6 55       	subi	r30, 0x56	; 86
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	80 81       	ld	r24, Z
    332e:	88 2f       	mov	r24, r24
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	a0 e0       	ldi	r26, 0x00	; 0
    3334:	b0 e0       	ldi	r27, 0x00	; 0
    3336:	80 93 fa 00 	sts	0x00FA, r24
    333a:	90 93 fb 00 	sts	0x00FB, r25
    333e:	a0 93 fc 00 	sts	0x00FC, r26
    3342:	b0 93 fd 00 	sts	0x00FD, r27
    3346:	f6 c0       	rjmp	.+492    	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
			else
			{
				Password = (Password * 10) + key ;
    3348:	80 91 fa 00 	lds	r24, 0x00FA
    334c:	90 91 fb 00 	lds	r25, 0x00FB
    3350:	a0 91 fc 00 	lds	r26, 0x00FC
    3354:	b0 91 fd 00 	lds	r27, 0x00FD
    3358:	2a e0       	ldi	r18, 0x0A	; 10
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e0       	ldi	r20, 0x00	; 0
    335e:	50 e0       	ldi	r21, 0x00	; 0
    3360:	bc 01       	movw	r22, r24
    3362:	cd 01       	movw	r24, r26
    3364:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    3368:	9b 01       	movw	r18, r22
    336a:	ac 01       	movw	r20, r24
    336c:	fe 01       	movw	r30, r28
    336e:	e6 55       	subi	r30, 0x56	; 86
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	80 81       	ld	r24, Z
    3374:	88 2f       	mov	r24, r24
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	a0 e0       	ldi	r26, 0x00	; 0
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	82 0f       	add	r24, r18
    337e:	93 1f       	adc	r25, r19
    3380:	a4 1f       	adc	r26, r20
    3382:	b5 1f       	adc	r27, r21
    3384:	80 93 fa 00 	sts	0x00FA, r24
    3388:	90 93 fb 00 	sts	0x00FB, r25
    338c:	a0 93 fc 00 	sts	0x00FC, r26
    3390:	b0 93 fd 00 	sts	0x00FD, r27
    3394:	cf c0       	rjmp	.+414    	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
		}
		else if(key == 9)
    3396:	fe 01       	movw	r30, r28
    3398:	e6 55       	subi	r30, 0x56	; 86
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	80 81       	ld	r24, Z
    339e:	89 30       	cpi	r24, 0x09	; 9
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <TheSafe_Set_VidPassword+0x13da>
    33a2:	c8 c0       	rjmp	.+400    	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
		{
			CLCD_GoToXY(0,Lcd_Location) ;
    33a4:	fe 01       	movw	r30, r28
    33a6:	e7 55       	subi	r30, 0x57	; 87
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	60 81       	ld	r22, Z
    33ae:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_voidSendData(key + '0');
    33b2:	fe 01       	movw	r30, r28
    33b4:	e6 55       	subi	r30, 0x56	; 86
    33b6:	ff 4f       	sbci	r31, 0xFF	; 255
    33b8:	80 81       	ld	r24, Z
    33ba:	80 5d       	subi	r24, 0xD0	; 208
    33bc:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	aa ef       	ldi	r26, 0xFA	; 250
    33c6:	b3 e4       	ldi	r27, 0x43	; 67
    33c8:	89 8f       	std	Y+25, r24	; 0x19
    33ca:	9a 8f       	std	Y+26, r25	; 0x1a
    33cc:	ab 8f       	std	Y+27, r26	; 0x1b
    33ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d0:	69 8d       	ldd	r22, Y+25	; 0x19
    33d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	4a ef       	ldi	r20, 0xFA	; 250
    33de:	54 e4       	ldi	r21, 0x44	; 68
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	8d 8b       	std	Y+21, r24	; 0x15
    33ea:	9e 8b       	std	Y+22, r25	; 0x16
    33ec:	af 8b       	std	Y+23, r26	; 0x17
    33ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33f0:	6d 89       	ldd	r22, Y+21	; 0x15
    33f2:	7e 89       	ldd	r23, Y+22	; 0x16
    33f4:	8f 89       	ldd	r24, Y+23	; 0x17
    33f6:	98 8d       	ldd	r25, Y+24	; 0x18
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e8       	ldi	r20, 0x80	; 128
    33fe:	5f e3       	ldi	r21, 0x3F	; 63
    3400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3404:	88 23       	and	r24, r24
    3406:	2c f4       	brge	.+10     	; 0x3412 <TheSafe_Set_VidPassword+0x1448>
		__ticks = 1;
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9c 8b       	std	Y+20, r25	; 0x14
    340e:	8b 8b       	std	Y+19, r24	; 0x13
    3410:	3f c0       	rjmp	.+126    	; 0x3490 <TheSafe_Set_VidPassword+0x14c6>
	else if (__tmp > 65535)
    3412:	6d 89       	ldd	r22, Y+21	; 0x15
    3414:	7e 89       	ldd	r23, Y+22	; 0x16
    3416:	8f 89       	ldd	r24, Y+23	; 0x17
    3418:	98 8d       	ldd	r25, Y+24	; 0x18
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	3f ef       	ldi	r19, 0xFF	; 255
    341e:	4f e7       	ldi	r20, 0x7F	; 127
    3420:	57 e4       	ldi	r21, 0x47	; 71
    3422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3426:	18 16       	cp	r1, r24
    3428:	4c f5       	brge	.+82     	; 0x347c <TheSafe_Set_VidPassword+0x14b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342a:	69 8d       	ldd	r22, Y+25	; 0x19
    342c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    342e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e2       	ldi	r20, 0x20	; 32
    3438:	51 e4       	ldi	r21, 0x41	; 65
    343a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	9c 8b       	std	Y+20, r25	; 0x14
    3450:	8b 8b       	std	Y+19, r24	; 0x13
    3452:	0f c0       	rjmp	.+30     	; 0x3472 <TheSafe_Set_VidPassword+0x14a8>
    3454:	88 ec       	ldi	r24, 0xC8	; 200
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	9a 8b       	std	Y+18, r25	; 0x12
    345a:	89 8b       	std	Y+17, r24	; 0x11
    345c:	89 89       	ldd	r24, Y+17	; 0x11
    345e:	9a 89       	ldd	r25, Y+18	; 0x12
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <TheSafe_Set_VidPassword+0x1496>
    3464:	9a 8b       	std	Y+18, r25	; 0x12
    3466:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3468:	8b 89       	ldd	r24, Y+19	; 0x13
    346a:	9c 89       	ldd	r25, Y+20	; 0x14
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	9c 8b       	std	Y+20, r25	; 0x14
    3470:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3472:	8b 89       	ldd	r24, Y+19	; 0x13
    3474:	9c 89       	ldd	r25, Y+20	; 0x14
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	69 f7       	brne	.-38     	; 0x3454 <TheSafe_Set_VidPassword+0x148a>
    347a:	14 c0       	rjmp	.+40     	; 0x34a4 <TheSafe_Set_VidPassword+0x14da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347c:	6d 89       	ldd	r22, Y+21	; 0x15
    347e:	7e 89       	ldd	r23, Y+22	; 0x16
    3480:	8f 89       	ldd	r24, Y+23	; 0x17
    3482:	98 8d       	ldd	r25, Y+24	; 0x18
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	9c 8b       	std	Y+20, r25	; 0x14
    348e:	8b 8b       	std	Y+19, r24	; 0x13
    3490:	8b 89       	ldd	r24, Y+19	; 0x13
    3492:	9c 89       	ldd	r25, Y+20	; 0x14
    3494:	98 8b       	std	Y+16, r25	; 0x10
    3496:	8f 87       	std	Y+15, r24	; 0x0f
    3498:	8f 85       	ldd	r24, Y+15	; 0x0f
    349a:	98 89       	ldd	r25, Y+16	; 0x10
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <TheSafe_Set_VidPassword+0x14d2>
    34a0:	98 8b       	std	Y+16, r25	; 0x10
    34a2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			CLCD_GoToXY(0,Lcd_Location) ;
    34a4:	fe 01       	movw	r30, r28
    34a6:	e7 55       	subi	r30, 0x57	; 87
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	60 81       	ld	r22, Z
    34ae:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString("*");
    34b2:	87 e7       	ldi	r24, 0x77	; 119
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			if (Lcd_Location == 9)
    34ba:	fe 01       	movw	r30, r28
    34bc:	e7 55       	subi	r30, 0x57	; 87
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	80 81       	ld	r24, Z
    34c2:	89 30       	cpi	r24, 0x09	; 9
    34c4:	89 f4       	brne	.+34     	; 0x34e8 <TheSafe_Set_VidPassword+0x151e>
			{
				Password = key ;
    34c6:	fe 01       	movw	r30, r28
    34c8:	e6 55       	subi	r30, 0x56	; 86
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	80 81       	ld	r24, Z
    34ce:	88 2f       	mov	r24, r24
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	a0 e0       	ldi	r26, 0x00	; 0
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	80 93 fa 00 	sts	0x00FA, r24
    34da:	90 93 fb 00 	sts	0x00FB, r25
    34de:	a0 93 fc 00 	sts	0x00FC, r26
    34e2:	b0 93 fd 00 	sts	0x00FD, r27
    34e6:	26 c0       	rjmp	.+76     	; 0x3534 <TheSafe_Set_VidPassword+0x156a>
			}
			else
			{
				Password = (Password * 10) + key ;
    34e8:	80 91 fa 00 	lds	r24, 0x00FA
    34ec:	90 91 fb 00 	lds	r25, 0x00FB
    34f0:	a0 91 fc 00 	lds	r26, 0x00FC
    34f4:	b0 91 fd 00 	lds	r27, 0x00FD
    34f8:	2a e0       	ldi	r18, 0x0A	; 10
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	40 e0       	ldi	r20, 0x00	; 0
    34fe:	50 e0       	ldi	r21, 0x00	; 0
    3500:	bc 01       	movw	r22, r24
    3502:	cd 01       	movw	r24, r26
    3504:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    3508:	9b 01       	movw	r18, r22
    350a:	ac 01       	movw	r20, r24
    350c:	fe 01       	movw	r30, r28
    350e:	e6 55       	subi	r30, 0x56	; 86
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	80 81       	ld	r24, Z
    3514:	88 2f       	mov	r24, r24
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	a0 e0       	ldi	r26, 0x00	; 0
    351a:	b0 e0       	ldi	r27, 0x00	; 0
    351c:	82 0f       	add	r24, r18
    351e:	93 1f       	adc	r25, r19
    3520:	a4 1f       	adc	r26, r20
    3522:	b5 1f       	adc	r27, r21
    3524:	80 93 fa 00 	sts	0x00FA, r24
    3528:	90 93 fb 00 	sts	0x00FB, r25
    352c:	a0 93 fc 00 	sts	0x00FC, r26
    3530:	b0 93 fd 00 	sts	0x00FD, r27
			}
		}

		Lcd_Location ++ ;
    3534:	de 01       	movw	r26, r28
    3536:	a7 55       	subi	r26, 0x57	; 87
    3538:	bf 4f       	sbci	r27, 0xFF	; 255
    353a:	fe 01       	movw	r30, r28
    353c:	e7 55       	subi	r30, 0x57	; 87
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	80 81       	ld	r24, Z
    3542:	8f 5f       	subi	r24, 0xFF	; 255
    3544:	8c 93       	st	X, r24
{
	u8 key;
	u8 Lcd_Location = 9 ;

	CLCD_vidSendString("Set Pass:");
	while (Lcd_Location <=12)
    3546:	fe 01       	movw	r30, r28
    3548:	e7 55       	subi	r30, 0x57	; 87
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	80 81       	ld	r24, Z
    354e:	8d 30       	cpi	r24, 0x0D	; 13
    3550:	10 f4       	brcc	.+4      	; 0x3556 <TheSafe_Set_VidPassword+0x158c>
    3552:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <TheSafe_Set_VidPassword+0x30>
			}
		}

		Lcd_Location ++ ;
	}
	EEPROM_voidSendDataByte(Password , 0x55);
    3556:	80 91 fa 00 	lds	r24, 0x00FA
    355a:	90 91 fb 00 	lds	r25, 0x00FB
    355e:	a0 91 fc 00 	lds	r26, 0x00FC
    3562:	b0 91 fd 00 	lds	r27, 0x00FD
    3566:	bc 01       	movw	r22, r24
    3568:	cd 01       	movw	r24, r26
    356a:	45 e5       	ldi	r20, 0x55	; 85
    356c:	50 e0       	ldi	r21, 0x00	; 0
    356e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <EEPROM_voidSendDataByte>
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	a0 e2       	ldi	r26, 0x20	; 32
    3578:	b1 e4       	ldi	r27, 0x41	; 65
    357a:	8b 87       	std	Y+11, r24	; 0x0b
    357c:	9c 87       	std	Y+12, r25	; 0x0c
    357e:	ad 87       	std	Y+13, r26	; 0x0d
    3580:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3582:	6b 85       	ldd	r22, Y+11	; 0x0b
    3584:	7c 85       	ldd	r23, Y+12	; 0x0c
    3586:	8d 85       	ldd	r24, Y+13	; 0x0d
    3588:	9e 85       	ldd	r25, Y+14	; 0x0e
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	30 e0       	ldi	r19, 0x00	; 0
    358e:	4a ef       	ldi	r20, 0xFA	; 250
    3590:	54 e4       	ldi	r21, 0x44	; 68
    3592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	8f 83       	std	Y+7, r24	; 0x07
    359c:	98 87       	std	Y+8, r25	; 0x08
    359e:	a9 87       	std	Y+9, r26	; 0x09
    35a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35a2:	6f 81       	ldd	r22, Y+7	; 0x07
    35a4:	78 85       	ldd	r23, Y+8	; 0x08
    35a6:	89 85       	ldd	r24, Y+9	; 0x09
    35a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	40 e8       	ldi	r20, 0x80	; 128
    35b0:	5f e3       	ldi	r21, 0x3F	; 63
    35b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b6:	88 23       	and	r24, r24
    35b8:	2c f4       	brge	.+10     	; 0x35c4 <TheSafe_Set_VidPassword+0x15fa>
		__ticks = 1;
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	9e 83       	std	Y+6, r25	; 0x06
    35c0:	8d 83       	std	Y+5, r24	; 0x05
    35c2:	3f c0       	rjmp	.+126    	; 0x3642 <TheSafe_Set_VidPassword+0x1678>
	else if (__tmp > 65535)
    35c4:	6f 81       	ldd	r22, Y+7	; 0x07
    35c6:	78 85       	ldd	r23, Y+8	; 0x08
    35c8:	89 85       	ldd	r24, Y+9	; 0x09
    35ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	3f ef       	ldi	r19, 0xFF	; 255
    35d0:	4f e7       	ldi	r20, 0x7F	; 127
    35d2:	57 e4       	ldi	r21, 0x47	; 71
    35d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35d8:	18 16       	cp	r1, r24
    35da:	4c f5       	brge	.+82     	; 0x362e <TheSafe_Set_VidPassword+0x1664>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35de:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 e2       	ldi	r20, 0x20	; 32
    35ea:	51 e4       	ldi	r21, 0x41	; 65
    35ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	bc 01       	movw	r22, r24
    35f6:	cd 01       	movw	r24, r26
    35f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fc:	dc 01       	movw	r26, r24
    35fe:	cb 01       	movw	r24, r22
    3600:	9e 83       	std	Y+6, r25	; 0x06
    3602:	8d 83       	std	Y+5, r24	; 0x05
    3604:	0f c0       	rjmp	.+30     	; 0x3624 <TheSafe_Set_VidPassword+0x165a>
    3606:	88 ec       	ldi	r24, 0xC8	; 200
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	9c 83       	std	Y+4, r25	; 0x04
    360c:	8b 83       	std	Y+3, r24	; 0x03
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	9c 81       	ldd	r25, Y+4	; 0x04
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	f1 f7       	brne	.-4      	; 0x3612 <TheSafe_Set_VidPassword+0x1648>
    3616:	9c 83       	std	Y+4, r25	; 0x04
    3618:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361a:	8d 81       	ldd	r24, Y+5	; 0x05
    361c:	9e 81       	ldd	r25, Y+6	; 0x06
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	9e 83       	std	Y+6, r25	; 0x06
    3622:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3624:	8d 81       	ldd	r24, Y+5	; 0x05
    3626:	9e 81       	ldd	r25, Y+6	; 0x06
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	69 f7       	brne	.-38     	; 0x3606 <TheSafe_Set_VidPassword+0x163c>
    362c:	14 c0       	rjmp	.+40     	; 0x3656 <TheSafe_Set_VidPassword+0x168c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362e:	6f 81       	ldd	r22, Y+7	; 0x07
    3630:	78 85       	ldd	r23, Y+8	; 0x08
    3632:	89 85       	ldd	r24, Y+9	; 0x09
    3634:	9a 85       	ldd	r25, Y+10	; 0x0a
    3636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	9e 83       	std	Y+6, r25	; 0x06
    3640:	8d 83       	std	Y+5, r24	; 0x05
    3642:	8d 81       	ldd	r24, Y+5	; 0x05
    3644:	9e 81       	ldd	r25, Y+6	; 0x06
    3646:	9a 83       	std	Y+2, r25	; 0x02
    3648:	89 83       	std	Y+1, r24	; 0x01
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	9a 81       	ldd	r25, Y+2	; 0x02
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <TheSafe_Set_VidPassword+0x1684>
    3652:	9a 83       	std	Y+2, r25	; 0x02
    3654:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    3656:	c6 55       	subi	r28, 0x56	; 86
    3658:	df 4f       	sbci	r29, 0xFF	; 255
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	1f 91       	pop	r17
    366a:	0f 91       	pop	r16
    366c:	08 95       	ret

0000366e <TheSafe_vidCheck_Password>:

void TheSafe_vidCheck_Password(void)
{
    366e:	0f 93       	push	r16
    3670:	1f 93       	push	r17
    3672:	df 93       	push	r29
    3674:	cf 93       	push	r28
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	cc 5b       	subi	r28, 0xBC	; 188
    367c:	d0 40       	sbci	r29, 0x00	; 0
    367e:	0f b6       	in	r0, 0x3f	; 63
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61
	u32 Check_Password ;
	u8 key ;
	CLCD_voidSendCommand(1);
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_vidSendString("Enter Pass:");
    368e:	89 e7       	ldi	r24, 0x79	; 121
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
    3696:	0c 94 ef 25 	jmp	0x4bde	; 0x4bde <TheSafe_vidCheck_Password+0x1570>
	{
		while (CheckPassLcdLocation <=14)
		{
			do
			{
				if (Reset_System_Flag == 1)
    369a:	80 91 f9 00 	lds	r24, 0x00F9
    369e:	81 30       	cpi	r24, 0x01	; 1
    36a0:	09 f0       	breq	.+2      	; 0x36a4 <TheSafe_vidCheck_Password+0x36>
    36a2:	ca c0       	rjmp	.+404    	; 0x3838 <TheSafe_vidCheck_Password+0x1ca>
				{
					Reset_System_Flag = 0 ;
    36a4:	10 92 f9 00 	sts	0x00F9, r1
					CheckPassLcdLocation = 10 ;
    36a8:	8a e0       	ldi	r24, 0x0A	; 10
    36aa:	80 93 ee 00 	sts	0x00EE, r24
					NumberOfTries = 3 ;
    36ae:	83 e0       	ldi	r24, 0x03	; 3
    36b0:	80 93 ed 00 	sts	0x00ED, r24
					CLCD_voidSendCommand(1);
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
					CLCD_vidSendString("Reset System");
    36ba:	8a e6       	ldi	r24, 0x6A	; 106
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
    36c2:	fe 01       	movw	r30, r28
    36c4:	ed 54       	subi	r30, 0x4D	; 77
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	aa ef       	ldi	r26, 0xFA	; 250
    36ce:	b3 e4       	ldi	r27, 0x43	; 67
    36d0:	80 83       	st	Z, r24
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	a2 83       	std	Z+2, r26	; 0x02
    36d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d8:	8e 01       	movw	r16, r28
    36da:	01 55       	subi	r16, 0x51	; 81
    36dc:	1f 4f       	sbci	r17, 0xFF	; 255
    36de:	fe 01       	movw	r30, r28
    36e0:	ed 54       	subi	r30, 0x4D	; 77
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	60 81       	ld	r22, Z
    36e6:	71 81       	ldd	r23, Z+1	; 0x01
    36e8:	82 81       	ldd	r24, Z+2	; 0x02
    36ea:	93 81       	ldd	r25, Z+3	; 0x03
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	4a ef       	ldi	r20, 0xFA	; 250
    36f2:	54 e4       	ldi	r21, 0x44	; 68
    36f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	f8 01       	movw	r30, r16
    36fe:	80 83       	st	Z, r24
    3700:	91 83       	std	Z+1, r25	; 0x01
    3702:	a2 83       	std	Z+2, r26	; 0x02
    3704:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3706:	fe 01       	movw	r30, r28
    3708:	e1 55       	subi	r30, 0x51	; 81
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	60 81       	ld	r22, Z
    370e:	71 81       	ldd	r23, Z+1	; 0x01
    3710:	82 81       	ldd	r24, Z+2	; 0x02
    3712:	93 81       	ldd	r25, Z+3	; 0x03
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	40 e8       	ldi	r20, 0x80	; 128
    371a:	5f e3       	ldi	r21, 0x3F	; 63
    371c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3720:	88 23       	and	r24, r24
    3722:	44 f4       	brge	.+16     	; 0x3734 <TheSafe_vidCheck_Password+0xc6>
		__ticks = 1;
    3724:	fe 01       	movw	r30, r28
    3726:	e3 55       	subi	r30, 0x53	; 83
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	91 83       	std	Z+1, r25	; 0x01
    3730:	80 83       	st	Z, r24
    3732:	64 c0       	rjmp	.+200    	; 0x37fc <TheSafe_vidCheck_Password+0x18e>
	else if (__tmp > 65535)
    3734:	fe 01       	movw	r30, r28
    3736:	e1 55       	subi	r30, 0x51	; 81
    3738:	ff 4f       	sbci	r31, 0xFF	; 255
    373a:	60 81       	ld	r22, Z
    373c:	71 81       	ldd	r23, Z+1	; 0x01
    373e:	82 81       	ldd	r24, Z+2	; 0x02
    3740:	93 81       	ldd	r25, Z+3	; 0x03
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	3f ef       	ldi	r19, 0xFF	; 255
    3746:	4f e7       	ldi	r20, 0x7F	; 127
    3748:	57 e4       	ldi	r21, 0x47	; 71
    374a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    374e:	18 16       	cp	r1, r24
    3750:	0c f0       	brlt	.+2      	; 0x3754 <TheSafe_vidCheck_Password+0xe6>
    3752:	43 c0       	rjmp	.+134    	; 0x37da <TheSafe_vidCheck_Password+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3754:	fe 01       	movw	r30, r28
    3756:	ed 54       	subi	r30, 0x4D	; 77
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	60 81       	ld	r22, Z
    375c:	71 81       	ldd	r23, Z+1	; 0x01
    375e:	82 81       	ldd	r24, Z+2	; 0x02
    3760:	93 81       	ldd	r25, Z+3	; 0x03
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e2       	ldi	r20, 0x20	; 32
    3768:	51 e4       	ldi	r21, 0x41	; 65
    376a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	8e 01       	movw	r16, r28
    3774:	03 55       	subi	r16, 0x53	; 83
    3776:	1f 4f       	sbci	r17, 0xFF	; 255
    3778:	bc 01       	movw	r22, r24
    377a:	cd 01       	movw	r24, r26
    377c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	f8 01       	movw	r30, r16
    3786:	91 83       	std	Z+1, r25	; 0x01
    3788:	80 83       	st	Z, r24
    378a:	1f c0       	rjmp	.+62     	; 0x37ca <TheSafe_vidCheck_Password+0x15c>
    378c:	fe 01       	movw	r30, r28
    378e:	e5 55       	subi	r30, 0x55	; 85
    3790:	ff 4f       	sbci	r31, 0xFF	; 255
    3792:	88 ec       	ldi	r24, 0xC8	; 200
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	91 83       	std	Z+1, r25	; 0x01
    3798:	80 83       	st	Z, r24
    379a:	fe 01       	movw	r30, r28
    379c:	e5 55       	subi	r30, 0x55	; 85
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	80 81       	ld	r24, Z
    37a2:	91 81       	ldd	r25, Z+1	; 0x01
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	f1 f7       	brne	.-4      	; 0x37a4 <TheSafe_vidCheck_Password+0x136>
    37a8:	fe 01       	movw	r30, r28
    37aa:	e5 55       	subi	r30, 0x55	; 85
    37ac:	ff 4f       	sbci	r31, 0xFF	; 255
    37ae:	91 83       	std	Z+1, r25	; 0x01
    37b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b2:	de 01       	movw	r26, r28
    37b4:	a3 55       	subi	r26, 0x53	; 83
    37b6:	bf 4f       	sbci	r27, 0xFF	; 255
    37b8:	fe 01       	movw	r30, r28
    37ba:	e3 55       	subi	r30, 0x53	; 83
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	80 81       	ld	r24, Z
    37c0:	91 81       	ldd	r25, Z+1	; 0x01
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	11 96       	adiw	r26, 0x01	; 1
    37c6:	9c 93       	st	X, r25
    37c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ca:	fe 01       	movw	r30, r28
    37cc:	e3 55       	subi	r30, 0x53	; 83
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	80 81       	ld	r24, Z
    37d2:	91 81       	ldd	r25, Z+1	; 0x01
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	d1 f6       	brne	.-76     	; 0x378c <TheSafe_vidCheck_Password+0x11e>
    37d8:	27 c0       	rjmp	.+78     	; 0x3828 <TheSafe_vidCheck_Password+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37da:	8e 01       	movw	r16, r28
    37dc:	03 55       	subi	r16, 0x53	; 83
    37de:	1f 4f       	sbci	r17, 0xFF	; 255
    37e0:	fe 01       	movw	r30, r28
    37e2:	e1 55       	subi	r30, 0x51	; 81
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	60 81       	ld	r22, Z
    37e8:	71 81       	ldd	r23, Z+1	; 0x01
    37ea:	82 81       	ldd	r24, Z+2	; 0x02
    37ec:	93 81       	ldd	r25, Z+3	; 0x03
    37ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	f8 01       	movw	r30, r16
    37f8:	91 83       	std	Z+1, r25	; 0x01
    37fa:	80 83       	st	Z, r24
    37fc:	de 01       	movw	r26, r28
    37fe:	a7 55       	subi	r26, 0x57	; 87
    3800:	bf 4f       	sbci	r27, 0xFF	; 255
    3802:	fe 01       	movw	r30, r28
    3804:	e3 55       	subi	r30, 0x53	; 83
    3806:	ff 4f       	sbci	r31, 0xFF	; 255
    3808:	80 81       	ld	r24, Z
    380a:	91 81       	ldd	r25, Z+1	; 0x01
    380c:	8d 93       	st	X+, r24
    380e:	9c 93       	st	X, r25
    3810:	fe 01       	movw	r30, r28
    3812:	e7 55       	subi	r30, 0x57	; 87
    3814:	ff 4f       	sbci	r31, 0xFF	; 255
    3816:	80 81       	ld	r24, Z
    3818:	91 81       	ldd	r25, Z+1	; 0x01
    381a:	01 97       	sbiw	r24, 0x01	; 1
    381c:	f1 f7       	brne	.-4      	; 0x381a <TheSafe_vidCheck_Password+0x1ac>
    381e:	fe 01       	movw	r30, r28
    3820:	e7 55       	subi	r30, 0x57	; 87
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	91 83       	std	Z+1, r25	; 0x01
    3826:	80 83       	st	Z, r24
					_delay_ms(500);
					CLCD_voidSendCommand(1);
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
					CLCD_vidSendString("Enter Pass:");
    382e:	89 e7       	ldi	r24, 0x79	; 121
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
    3836:	0d c0       	rjmp	.+26     	; 0x3852 <TheSafe_vidCheck_Password+0x1e4>
					break ;
				}
				else
				{
					key = KPD_GetKeyPressed() ;
    3838:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <KPD_GetKeyPressed>
    383c:	fe 01       	movw	r30, r28
    383e:	e8 54       	subi	r30, 0x48	; 72
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	80 83       	st	Z, r24
				}
			}while (key == 0xff);
    3844:	fe 01       	movw	r30, r28
    3846:	e8 54       	subi	r30, 0x48	; 72
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	80 81       	ld	r24, Z
    384c:	8f 3f       	cpi	r24, 0xFF	; 255
    384e:	09 f4       	brne	.+2      	; 0x3852 <TheSafe_vidCheck_Password+0x1e4>
    3850:	24 cf       	rjmp	.-440    	; 0x369a <TheSafe_vidCheck_Password+0x2c>

			if(key == 0)
    3852:	fe 01       	movw	r30, r28
    3854:	e8 54       	subi	r30, 0x48	; 72
    3856:	ff 4f       	sbci	r31, 0xFF	; 255
    3858:	80 81       	ld	r24, Z
    385a:	88 23       	and	r24, r24
    385c:	09 f0       	breq	.+2      	; 0x3860 <TheSafe_vidCheck_Password+0x1f2>
    385e:	06 c1       	rjmp	.+524    	; 0x3a6c <TheSafe_vidCheck_Password+0x3fe>
			{
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    3860:	90 91 ee 00 	lds	r25, 0x00EE
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	69 2f       	mov	r22, r25
    3868:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    386c:	fe 01       	movw	r30, r28
    386e:	e8 54       	subi	r30, 0x48	; 72
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	80 81       	ld	r24, Z
    3874:	80 5d       	subi	r24, 0xD0	; 208
    3876:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    387a:	fe 01       	movw	r30, r28
    387c:	eb 55       	subi	r30, 0x5B	; 91
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	aa ef       	ldi	r26, 0xFA	; 250
    3886:	b3 e4       	ldi	r27, 0x43	; 67
    3888:	80 83       	st	Z, r24
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	a2 83       	std	Z+2, r26	; 0x02
    388e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3890:	8e 01       	movw	r16, r28
    3892:	0f 55       	subi	r16, 0x5F	; 95
    3894:	1f 4f       	sbci	r17, 0xFF	; 255
    3896:	fe 01       	movw	r30, r28
    3898:	eb 55       	subi	r30, 0x5B	; 91
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	60 81       	ld	r22, Z
    389e:	71 81       	ldd	r23, Z+1	; 0x01
    38a0:	82 81       	ldd	r24, Z+2	; 0x02
    38a2:	93 81       	ldd	r25, Z+3	; 0x03
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	4a ef       	ldi	r20, 0xFA	; 250
    38aa:	54 e4       	ldi	r21, 0x44	; 68
    38ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	f8 01       	movw	r30, r16
    38b6:	80 83       	st	Z, r24
    38b8:	91 83       	std	Z+1, r25	; 0x01
    38ba:	a2 83       	std	Z+2, r26	; 0x02
    38bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38be:	fe 01       	movw	r30, r28
    38c0:	ef 55       	subi	r30, 0x5F	; 95
    38c2:	ff 4f       	sbci	r31, 0xFF	; 255
    38c4:	60 81       	ld	r22, Z
    38c6:	71 81       	ldd	r23, Z+1	; 0x01
    38c8:	82 81       	ldd	r24, Z+2	; 0x02
    38ca:	93 81       	ldd	r25, Z+3	; 0x03
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e8       	ldi	r20, 0x80	; 128
    38d2:	5f e3       	ldi	r21, 0x3F	; 63
    38d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38d8:	88 23       	and	r24, r24
    38da:	44 f4       	brge	.+16     	; 0x38ec <TheSafe_vidCheck_Password+0x27e>
		__ticks = 1;
    38dc:	fe 01       	movw	r30, r28
    38de:	e1 56       	subi	r30, 0x61	; 97
    38e0:	ff 4f       	sbci	r31, 0xFF	; 255
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	91 83       	std	Z+1, r25	; 0x01
    38e8:	80 83       	st	Z, r24
    38ea:	64 c0       	rjmp	.+200    	; 0x39b4 <TheSafe_vidCheck_Password+0x346>
	else if (__tmp > 65535)
    38ec:	fe 01       	movw	r30, r28
    38ee:	ef 55       	subi	r30, 0x5F	; 95
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	60 81       	ld	r22, Z
    38f4:	71 81       	ldd	r23, Z+1	; 0x01
    38f6:	82 81       	ldd	r24, Z+2	; 0x02
    38f8:	93 81       	ldd	r25, Z+3	; 0x03
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	3f ef       	ldi	r19, 0xFF	; 255
    38fe:	4f e7       	ldi	r20, 0x7F	; 127
    3900:	57 e4       	ldi	r21, 0x47	; 71
    3902:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3906:	18 16       	cp	r1, r24
    3908:	0c f0       	brlt	.+2      	; 0x390c <TheSafe_vidCheck_Password+0x29e>
    390a:	43 c0       	rjmp	.+134    	; 0x3992 <TheSafe_vidCheck_Password+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    390c:	fe 01       	movw	r30, r28
    390e:	eb 55       	subi	r30, 0x5B	; 91
    3910:	ff 4f       	sbci	r31, 0xFF	; 255
    3912:	60 81       	ld	r22, Z
    3914:	71 81       	ldd	r23, Z+1	; 0x01
    3916:	82 81       	ldd	r24, Z+2	; 0x02
    3918:	93 81       	ldd	r25, Z+3	; 0x03
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	40 e2       	ldi	r20, 0x20	; 32
    3920:	51 e4       	ldi	r21, 0x41	; 65
    3922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	8e 01       	movw	r16, r28
    392c:	01 56       	subi	r16, 0x61	; 97
    392e:	1f 4f       	sbci	r17, 0xFF	; 255
    3930:	bc 01       	movw	r22, r24
    3932:	cd 01       	movw	r24, r26
    3934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	f8 01       	movw	r30, r16
    393e:	91 83       	std	Z+1, r25	; 0x01
    3940:	80 83       	st	Z, r24
    3942:	1f c0       	rjmp	.+62     	; 0x3982 <TheSafe_vidCheck_Password+0x314>
    3944:	fe 01       	movw	r30, r28
    3946:	e3 56       	subi	r30, 0x63	; 99
    3948:	ff 4f       	sbci	r31, 0xFF	; 255
    394a:	88 ec       	ldi	r24, 0xC8	; 200
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	91 83       	std	Z+1, r25	; 0x01
    3950:	80 83       	st	Z, r24
    3952:	fe 01       	movw	r30, r28
    3954:	e3 56       	subi	r30, 0x63	; 99
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	80 81       	ld	r24, Z
    395a:	91 81       	ldd	r25, Z+1	; 0x01
    395c:	01 97       	sbiw	r24, 0x01	; 1
    395e:	f1 f7       	brne	.-4      	; 0x395c <TheSafe_vidCheck_Password+0x2ee>
    3960:	fe 01       	movw	r30, r28
    3962:	e3 56       	subi	r30, 0x63	; 99
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	91 83       	std	Z+1, r25	; 0x01
    3968:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    396a:	de 01       	movw	r26, r28
    396c:	a1 56       	subi	r26, 0x61	; 97
    396e:	bf 4f       	sbci	r27, 0xFF	; 255
    3970:	fe 01       	movw	r30, r28
    3972:	e1 56       	subi	r30, 0x61	; 97
    3974:	ff 4f       	sbci	r31, 0xFF	; 255
    3976:	80 81       	ld	r24, Z
    3978:	91 81       	ldd	r25, Z+1	; 0x01
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	11 96       	adiw	r26, 0x01	; 1
    397e:	9c 93       	st	X, r25
    3980:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3982:	fe 01       	movw	r30, r28
    3984:	e1 56       	subi	r30, 0x61	; 97
    3986:	ff 4f       	sbci	r31, 0xFF	; 255
    3988:	80 81       	ld	r24, Z
    398a:	91 81       	ldd	r25, Z+1	; 0x01
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	d1 f6       	brne	.-76     	; 0x3944 <TheSafe_vidCheck_Password+0x2d6>
    3990:	27 c0       	rjmp	.+78     	; 0x39e0 <TheSafe_vidCheck_Password+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3992:	8e 01       	movw	r16, r28
    3994:	01 56       	subi	r16, 0x61	; 97
    3996:	1f 4f       	sbci	r17, 0xFF	; 255
    3998:	fe 01       	movw	r30, r28
    399a:	ef 55       	subi	r30, 0x5F	; 95
    399c:	ff 4f       	sbci	r31, 0xFF	; 255
    399e:	60 81       	ld	r22, Z
    39a0:	71 81       	ldd	r23, Z+1	; 0x01
    39a2:	82 81       	ldd	r24, Z+2	; 0x02
    39a4:	93 81       	ldd	r25, Z+3	; 0x03
    39a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	f8 01       	movw	r30, r16
    39b0:	91 83       	std	Z+1, r25	; 0x01
    39b2:	80 83       	st	Z, r24
    39b4:	de 01       	movw	r26, r28
    39b6:	a5 56       	subi	r26, 0x65	; 101
    39b8:	bf 4f       	sbci	r27, 0xFF	; 255
    39ba:	fe 01       	movw	r30, r28
    39bc:	e1 56       	subi	r30, 0x61	; 97
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	80 81       	ld	r24, Z
    39c2:	91 81       	ldd	r25, Z+1	; 0x01
    39c4:	8d 93       	st	X+, r24
    39c6:	9c 93       	st	X, r25
    39c8:	fe 01       	movw	r30, r28
    39ca:	e5 56       	subi	r30, 0x65	; 101
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	80 81       	ld	r24, Z
    39d0:	91 81       	ldd	r25, Z+1	; 0x01
    39d2:	01 97       	sbiw	r24, 0x01	; 1
    39d4:	f1 f7       	brne	.-4      	; 0x39d2 <TheSafe_vidCheck_Password+0x364>
    39d6:	fe 01       	movw	r30, r28
    39d8:	e5 56       	subi	r30, 0x65	; 101
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	91 83       	std	Z+1, r25	; 0x01
    39de:	80 83       	st	Z, r24
				_delay_ms(500);
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    39e0:	90 91 ee 00 	lds	r25, 0x00EE
    39e4:	80 e0       	ldi	r24, 0x00	; 0
    39e6:	69 2f       	mov	r22, r25
    39e8:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("*");
    39ec:	87 e7       	ldi	r24, 0x77	; 119
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				if (CheckPassLcdLocation == 11)
    39f4:	80 91 ee 00 	lds	r24, 0x00EE
    39f8:	8b 30       	cpi	r24, 0x0B	; 11
    39fa:	91 f4       	brne	.+36     	; 0x3a20 <TheSafe_vidCheck_Password+0x3b2>
				{
					Check_Password = key ;
    39fc:	9e 01       	movw	r18, r28
    39fe:	27 54       	subi	r18, 0x47	; 71
    3a00:	3f 4f       	sbci	r19, 0xFF	; 255
    3a02:	fe 01       	movw	r30, r28
    3a04:	e8 54       	subi	r30, 0x48	; 72
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	80 81       	ld	r24, Z
    3a0a:	88 2f       	mov	r24, r24
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	a0 e0       	ldi	r26, 0x00	; 0
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	f9 01       	movw	r30, r18
    3a14:	80 83       	st	Z, r24
    3a16:	91 83       	std	Z+1, r25	; 0x01
    3a18:	a2 83       	std	Z+2, r26	; 0x02
    3a1a:	b3 83       	std	Z+3, r27	; 0x03
    3a1c:	0c 94 ea 25 	jmp	0x4bd4	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
				else
				{
					Check_Password = (Check_Password * 10) + key ;
    3a20:	fe 01       	movw	r30, r28
    3a22:	e7 54       	subi	r30, 0x47	; 71
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	80 81       	ld	r24, Z
    3a28:	91 81       	ldd	r25, Z+1	; 0x01
    3a2a:	a2 81       	ldd	r26, Z+2	; 0x02
    3a2c:	b3 81       	ldd	r27, Z+3	; 0x03
    3a2e:	2a e0       	ldi	r18, 0x0A	; 10
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e0       	ldi	r20, 0x00	; 0
    3a34:	50 e0       	ldi	r21, 0x00	; 0
    3a36:	bc 01       	movw	r22, r24
    3a38:	cd 01       	movw	r24, r26
    3a3a:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    3a3e:	9b 01       	movw	r18, r22
    3a40:	ac 01       	movw	r20, r24
    3a42:	fe 01       	movw	r30, r28
    3a44:	e8 54       	subi	r30, 0x48	; 72
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	80 81       	ld	r24, Z
    3a4a:	88 2f       	mov	r24, r24
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	a0 e0       	ldi	r26, 0x00	; 0
    3a50:	b0 e0       	ldi	r27, 0x00	; 0
    3a52:	fe 01       	movw	r30, r28
    3a54:	e7 54       	subi	r30, 0x47	; 71
    3a56:	ff 4f       	sbci	r31, 0xFF	; 255
    3a58:	82 0f       	add	r24, r18
    3a5a:	93 1f       	adc	r25, r19
    3a5c:	a4 1f       	adc	r26, r20
    3a5e:	b5 1f       	adc	r27, r21
    3a60:	80 83       	st	Z, r24
    3a62:	91 83       	std	Z+1, r25	; 0x01
    3a64:	a2 83       	std	Z+2, r26	; 0x02
    3a66:	b3 83       	std	Z+3, r27	; 0x03
    3a68:	0c 94 ea 25 	jmp	0x4bd4	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
			}
			else if(key == 1)
    3a6c:	fe 01       	movw	r30, r28
    3a6e:	e8 54       	subi	r30, 0x48	; 72
    3a70:	ff 4f       	sbci	r31, 0xFF	; 255
    3a72:	80 81       	ld	r24, Z
    3a74:	81 30       	cpi	r24, 0x01	; 1
    3a76:	09 f0       	breq	.+2      	; 0x3a7a <TheSafe_vidCheck_Password+0x40c>
    3a78:	06 c1       	rjmp	.+524    	; 0x3c86 <TheSafe_vidCheck_Password+0x618>
			{
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    3a7a:	90 91 ee 00 	lds	r25, 0x00EE
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	69 2f       	mov	r22, r25
    3a82:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    3a86:	fe 01       	movw	r30, r28
    3a88:	e8 54       	subi	r30, 0x48	; 72
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	80 81       	ld	r24, Z
    3a8e:	80 5d       	subi	r24, 0xD0	; 208
    3a90:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    3a94:	fe 01       	movw	r30, r28
    3a96:	e9 56       	subi	r30, 0x69	; 105
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	aa ef       	ldi	r26, 0xFA	; 250
    3aa0:	b3 e4       	ldi	r27, 0x43	; 67
    3aa2:	80 83       	st	Z, r24
    3aa4:	91 83       	std	Z+1, r25	; 0x01
    3aa6:	a2 83       	std	Z+2, r26	; 0x02
    3aa8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aaa:	8e 01       	movw	r16, r28
    3aac:	0d 56       	subi	r16, 0x6D	; 109
    3aae:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab0:	fe 01       	movw	r30, r28
    3ab2:	e9 56       	subi	r30, 0x69	; 105
    3ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab6:	60 81       	ld	r22, Z
    3ab8:	71 81       	ldd	r23, Z+1	; 0x01
    3aba:	82 81       	ldd	r24, Z+2	; 0x02
    3abc:	93 81       	ldd	r25, Z+3	; 0x03
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	4a ef       	ldi	r20, 0xFA	; 250
    3ac4:	54 e4       	ldi	r21, 0x44	; 68
    3ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	f8 01       	movw	r30, r16
    3ad0:	80 83       	st	Z, r24
    3ad2:	91 83       	std	Z+1, r25	; 0x01
    3ad4:	a2 83       	std	Z+2, r26	; 0x02
    3ad6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ad8:	fe 01       	movw	r30, r28
    3ada:	ed 56       	subi	r30, 0x6D	; 109
    3adc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ade:	60 81       	ld	r22, Z
    3ae0:	71 81       	ldd	r23, Z+1	; 0x01
    3ae2:	82 81       	ldd	r24, Z+2	; 0x02
    3ae4:	93 81       	ldd	r25, Z+3	; 0x03
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e8       	ldi	r20, 0x80	; 128
    3aec:	5f e3       	ldi	r21, 0x3F	; 63
    3aee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3af2:	88 23       	and	r24, r24
    3af4:	44 f4       	brge	.+16     	; 0x3b06 <TheSafe_vidCheck_Password+0x498>
		__ticks = 1;
    3af6:	fe 01       	movw	r30, r28
    3af8:	ef 56       	subi	r30, 0x6F	; 111
    3afa:	ff 4f       	sbci	r31, 0xFF	; 255
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	91 83       	std	Z+1, r25	; 0x01
    3b02:	80 83       	st	Z, r24
    3b04:	64 c0       	rjmp	.+200    	; 0x3bce <TheSafe_vidCheck_Password+0x560>
	else if (__tmp > 65535)
    3b06:	fe 01       	movw	r30, r28
    3b08:	ed 56       	subi	r30, 0x6D	; 109
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	60 81       	ld	r22, Z
    3b0e:	71 81       	ldd	r23, Z+1	; 0x01
    3b10:	82 81       	ldd	r24, Z+2	; 0x02
    3b12:	93 81       	ldd	r25, Z+3	; 0x03
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	3f ef       	ldi	r19, 0xFF	; 255
    3b18:	4f e7       	ldi	r20, 0x7F	; 127
    3b1a:	57 e4       	ldi	r21, 0x47	; 71
    3b1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b20:	18 16       	cp	r1, r24
    3b22:	0c f0       	brlt	.+2      	; 0x3b26 <TheSafe_vidCheck_Password+0x4b8>
    3b24:	43 c0       	rjmp	.+134    	; 0x3bac <TheSafe_vidCheck_Password+0x53e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b26:	fe 01       	movw	r30, r28
    3b28:	e9 56       	subi	r30, 0x69	; 105
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	60 81       	ld	r22, Z
    3b2e:	71 81       	ldd	r23, Z+1	; 0x01
    3b30:	82 81       	ldd	r24, Z+2	; 0x02
    3b32:	93 81       	ldd	r25, Z+3	; 0x03
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e2       	ldi	r20, 0x20	; 32
    3b3a:	51 e4       	ldi	r21, 0x41	; 65
    3b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	8e 01       	movw	r16, r28
    3b46:	0f 56       	subi	r16, 0x6F	; 111
    3b48:	1f 4f       	sbci	r17, 0xFF	; 255
    3b4a:	bc 01       	movw	r22, r24
    3b4c:	cd 01       	movw	r24, r26
    3b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	f8 01       	movw	r30, r16
    3b58:	91 83       	std	Z+1, r25	; 0x01
    3b5a:	80 83       	st	Z, r24
    3b5c:	1f c0       	rjmp	.+62     	; 0x3b9c <TheSafe_vidCheck_Password+0x52e>
    3b5e:	fe 01       	movw	r30, r28
    3b60:	e1 57       	subi	r30, 0x71	; 113
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	88 ec       	ldi	r24, 0xC8	; 200
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	91 83       	std	Z+1, r25	; 0x01
    3b6a:	80 83       	st	Z, r24
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	e1 57       	subi	r30, 0x71	; 113
    3b70:	ff 4f       	sbci	r31, 0xFF	; 255
    3b72:	80 81       	ld	r24, Z
    3b74:	91 81       	ldd	r25, Z+1	; 0x01
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	f1 f7       	brne	.-4      	; 0x3b76 <TheSafe_vidCheck_Password+0x508>
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	e1 57       	subi	r30, 0x71	; 113
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	91 83       	std	Z+1, r25	; 0x01
    3b82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b84:	de 01       	movw	r26, r28
    3b86:	af 56       	subi	r26, 0x6F	; 111
    3b88:	bf 4f       	sbci	r27, 0xFF	; 255
    3b8a:	fe 01       	movw	r30, r28
    3b8c:	ef 56       	subi	r30, 0x6F	; 111
    3b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b90:	80 81       	ld	r24, Z
    3b92:	91 81       	ldd	r25, Z+1	; 0x01
    3b94:	01 97       	sbiw	r24, 0x01	; 1
    3b96:	11 96       	adiw	r26, 0x01	; 1
    3b98:	9c 93       	st	X, r25
    3b9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	ef 56       	subi	r30, 0x6F	; 111
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	80 81       	ld	r24, Z
    3ba4:	91 81       	ldd	r25, Z+1	; 0x01
    3ba6:	00 97       	sbiw	r24, 0x00	; 0
    3ba8:	d1 f6       	brne	.-76     	; 0x3b5e <TheSafe_vidCheck_Password+0x4f0>
    3baa:	27 c0       	rjmp	.+78     	; 0x3bfa <TheSafe_vidCheck_Password+0x58c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bac:	8e 01       	movw	r16, r28
    3bae:	0f 56       	subi	r16, 0x6F	; 111
    3bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	ed 56       	subi	r30, 0x6D	; 109
    3bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb8:	60 81       	ld	r22, Z
    3bba:	71 81       	ldd	r23, Z+1	; 0x01
    3bbc:	82 81       	ldd	r24, Z+2	; 0x02
    3bbe:	93 81       	ldd	r25, Z+3	; 0x03
    3bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	f8 01       	movw	r30, r16
    3bca:	91 83       	std	Z+1, r25	; 0x01
    3bcc:	80 83       	st	Z, r24
    3bce:	de 01       	movw	r26, r28
    3bd0:	a3 57       	subi	r26, 0x73	; 115
    3bd2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	ef 56       	subi	r30, 0x6F	; 111
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	80 81       	ld	r24, Z
    3bdc:	91 81       	ldd	r25, Z+1	; 0x01
    3bde:	8d 93       	st	X+, r24
    3be0:	9c 93       	st	X, r25
    3be2:	fe 01       	movw	r30, r28
    3be4:	e3 57       	subi	r30, 0x73	; 115
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	80 81       	ld	r24, Z
    3bea:	91 81       	ldd	r25, Z+1	; 0x01
    3bec:	01 97       	sbiw	r24, 0x01	; 1
    3bee:	f1 f7       	brne	.-4      	; 0x3bec <TheSafe_vidCheck_Password+0x57e>
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	e3 57       	subi	r30, 0x73	; 115
    3bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf6:	91 83       	std	Z+1, r25	; 0x01
    3bf8:	80 83       	st	Z, r24
				_delay_ms(500);
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    3bfa:	90 91 ee 00 	lds	r25, 0x00EE
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
    3c00:	69 2f       	mov	r22, r25
    3c02:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("*");
    3c06:	87 e7       	ldi	r24, 0x77	; 119
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				if (CheckPassLcdLocation == 11)
    3c0e:	80 91 ee 00 	lds	r24, 0x00EE
    3c12:	8b 30       	cpi	r24, 0x0B	; 11
    3c14:	91 f4       	brne	.+36     	; 0x3c3a <TheSafe_vidCheck_Password+0x5cc>
				{
					Check_Password = key ;
    3c16:	9e 01       	movw	r18, r28
    3c18:	27 54       	subi	r18, 0x47	; 71
    3c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e8 54       	subi	r30, 0x48	; 72
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	80 81       	ld	r24, Z
    3c24:	88 2f       	mov	r24, r24
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	a0 e0       	ldi	r26, 0x00	; 0
    3c2a:	b0 e0       	ldi	r27, 0x00	; 0
    3c2c:	f9 01       	movw	r30, r18
    3c2e:	80 83       	st	Z, r24
    3c30:	91 83       	std	Z+1, r25	; 0x01
    3c32:	a2 83       	std	Z+2, r26	; 0x02
    3c34:	b3 83       	std	Z+3, r27	; 0x03
    3c36:	0c 94 ea 25 	jmp	0x4bd4	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
				else
				{
					Check_Password = (Check_Password * 10) + key ;
    3c3a:	fe 01       	movw	r30, r28
    3c3c:	e7 54       	subi	r30, 0x47	; 71
    3c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c40:	80 81       	ld	r24, Z
    3c42:	91 81       	ldd	r25, Z+1	; 0x01
    3c44:	a2 81       	ldd	r26, Z+2	; 0x02
    3c46:	b3 81       	ldd	r27, Z+3	; 0x03
    3c48:	2a e0       	ldi	r18, 0x0A	; 10
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	40 e0       	ldi	r20, 0x00	; 0
    3c4e:	50 e0       	ldi	r21, 0x00	; 0
    3c50:	bc 01       	movw	r22, r24
    3c52:	cd 01       	movw	r24, r26
    3c54:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    3c58:	9b 01       	movw	r18, r22
    3c5a:	ac 01       	movw	r20, r24
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	e8 54       	subi	r30, 0x48	; 72
    3c60:	ff 4f       	sbci	r31, 0xFF	; 255
    3c62:	80 81       	ld	r24, Z
    3c64:	88 2f       	mov	r24, r24
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	a0 e0       	ldi	r26, 0x00	; 0
    3c6a:	b0 e0       	ldi	r27, 0x00	; 0
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	e7 54       	subi	r30, 0x47	; 71
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	82 0f       	add	r24, r18
    3c74:	93 1f       	adc	r25, r19
    3c76:	a4 1f       	adc	r26, r20
    3c78:	b5 1f       	adc	r27, r21
    3c7a:	80 83       	st	Z, r24
    3c7c:	91 83       	std	Z+1, r25	; 0x01
    3c7e:	a2 83       	std	Z+2, r26	; 0x02
    3c80:	b3 83       	std	Z+3, r27	; 0x03
    3c82:	0c 94 ea 25 	jmp	0x4bd4	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
			}
			else if(key == 2)
    3c86:	fe 01       	movw	r30, r28
    3c88:	e8 54       	subi	r30, 0x48	; 72
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	80 81       	ld	r24, Z
    3c8e:	82 30       	cpi	r24, 0x02	; 2
    3c90:	09 f0       	breq	.+2      	; 0x3c94 <TheSafe_vidCheck_Password+0x626>
    3c92:	04 c1       	rjmp	.+520    	; 0x3e9c <TheSafe_vidCheck_Password+0x82e>
			{
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    3c94:	90 91 ee 00 	lds	r25, 0x00EE
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	69 2f       	mov	r22, r25
    3c9c:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    3ca0:	fe 01       	movw	r30, r28
    3ca2:	e8 54       	subi	r30, 0x48	; 72
    3ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca6:	80 81       	ld	r24, Z
    3ca8:	80 5d       	subi	r24, 0xD0	; 208
    3caa:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    3cae:	fe 01       	movw	r30, r28
    3cb0:	e7 57       	subi	r30, 0x77	; 119
    3cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	aa ef       	ldi	r26, 0xFA	; 250
    3cba:	b3 e4       	ldi	r27, 0x43	; 67
    3cbc:	80 83       	st	Z, r24
    3cbe:	91 83       	std	Z+1, r25	; 0x01
    3cc0:	a2 83       	std	Z+2, r26	; 0x02
    3cc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc4:	8e 01       	movw	r16, r28
    3cc6:	0b 57       	subi	r16, 0x7B	; 123
    3cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cca:	fe 01       	movw	r30, r28
    3ccc:	e7 57       	subi	r30, 0x77	; 119
    3cce:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd0:	60 81       	ld	r22, Z
    3cd2:	71 81       	ldd	r23, Z+1	; 0x01
    3cd4:	82 81       	ldd	r24, Z+2	; 0x02
    3cd6:	93 81       	ldd	r25, Z+3	; 0x03
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	4a ef       	ldi	r20, 0xFA	; 250
    3cde:	54 e4       	ldi	r21, 0x44	; 68
    3ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	f8 01       	movw	r30, r16
    3cea:	80 83       	st	Z, r24
    3cec:	91 83       	std	Z+1, r25	; 0x01
    3cee:	a2 83       	std	Z+2, r26	; 0x02
    3cf0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	eb 57       	subi	r30, 0x7B	; 123
    3cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf8:	60 81       	ld	r22, Z
    3cfa:	71 81       	ldd	r23, Z+1	; 0x01
    3cfc:	82 81       	ldd	r24, Z+2	; 0x02
    3cfe:	93 81       	ldd	r25, Z+3	; 0x03
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	40 e8       	ldi	r20, 0x80	; 128
    3d06:	5f e3       	ldi	r21, 0x3F	; 63
    3d08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d0c:	88 23       	and	r24, r24
    3d0e:	44 f4       	brge	.+16     	; 0x3d20 <TheSafe_vidCheck_Password+0x6b2>
		__ticks = 1;
    3d10:	fe 01       	movw	r30, r28
    3d12:	ed 57       	subi	r30, 0x7D	; 125
    3d14:	ff 4f       	sbci	r31, 0xFF	; 255
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	91 83       	std	Z+1, r25	; 0x01
    3d1c:	80 83       	st	Z, r24
    3d1e:	64 c0       	rjmp	.+200    	; 0x3de8 <TheSafe_vidCheck_Password+0x77a>
	else if (__tmp > 65535)
    3d20:	fe 01       	movw	r30, r28
    3d22:	eb 57       	subi	r30, 0x7B	; 123
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	60 81       	ld	r22, Z
    3d28:	71 81       	ldd	r23, Z+1	; 0x01
    3d2a:	82 81       	ldd	r24, Z+2	; 0x02
    3d2c:	93 81       	ldd	r25, Z+3	; 0x03
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	3f ef       	ldi	r19, 0xFF	; 255
    3d32:	4f e7       	ldi	r20, 0x7F	; 127
    3d34:	57 e4       	ldi	r21, 0x47	; 71
    3d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d3a:	18 16       	cp	r1, r24
    3d3c:	0c f0       	brlt	.+2      	; 0x3d40 <TheSafe_vidCheck_Password+0x6d2>
    3d3e:	43 c0       	rjmp	.+134    	; 0x3dc6 <TheSafe_vidCheck_Password+0x758>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d40:	fe 01       	movw	r30, r28
    3d42:	e7 57       	subi	r30, 0x77	; 119
    3d44:	ff 4f       	sbci	r31, 0xFF	; 255
    3d46:	60 81       	ld	r22, Z
    3d48:	71 81       	ldd	r23, Z+1	; 0x01
    3d4a:	82 81       	ldd	r24, Z+2	; 0x02
    3d4c:	93 81       	ldd	r25, Z+3	; 0x03
    3d4e:	20 e0       	ldi	r18, 0x00	; 0
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	40 e2       	ldi	r20, 0x20	; 32
    3d54:	51 e4       	ldi	r21, 0x41	; 65
    3d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	8e 01       	movw	r16, r28
    3d60:	0d 57       	subi	r16, 0x7D	; 125
    3d62:	1f 4f       	sbci	r17, 0xFF	; 255
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	cb 01       	movw	r24, r22
    3d70:	f8 01       	movw	r30, r16
    3d72:	91 83       	std	Z+1, r25	; 0x01
    3d74:	80 83       	st	Z, r24
    3d76:	1f c0       	rjmp	.+62     	; 0x3db6 <TheSafe_vidCheck_Password+0x748>
    3d78:	fe 01       	movw	r30, r28
    3d7a:	ef 57       	subi	r30, 0x7F	; 127
    3d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7e:	88 ec       	ldi	r24, 0xC8	; 200
    3d80:	90 e0       	ldi	r25, 0x00	; 0
    3d82:	91 83       	std	Z+1, r25	; 0x01
    3d84:	80 83       	st	Z, r24
    3d86:	fe 01       	movw	r30, r28
    3d88:	ef 57       	subi	r30, 0x7F	; 127
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	80 81       	ld	r24, Z
    3d8e:	91 81       	ldd	r25, Z+1	; 0x01
    3d90:	01 97       	sbiw	r24, 0x01	; 1
    3d92:	f1 f7       	brne	.-4      	; 0x3d90 <TheSafe_vidCheck_Password+0x722>
    3d94:	fe 01       	movw	r30, r28
    3d96:	ef 57       	subi	r30, 0x7F	; 127
    3d98:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9a:	91 83       	std	Z+1, r25	; 0x01
    3d9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d9e:	de 01       	movw	r26, r28
    3da0:	ad 57       	subi	r26, 0x7D	; 125
    3da2:	bf 4f       	sbci	r27, 0xFF	; 255
    3da4:	fe 01       	movw	r30, r28
    3da6:	ed 57       	subi	r30, 0x7D	; 125
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	80 81       	ld	r24, Z
    3dac:	91 81       	ldd	r25, Z+1	; 0x01
    3dae:	01 97       	sbiw	r24, 0x01	; 1
    3db0:	11 96       	adiw	r26, 0x01	; 1
    3db2:	9c 93       	st	X, r25
    3db4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db6:	fe 01       	movw	r30, r28
    3db8:	ed 57       	subi	r30, 0x7D	; 125
    3dba:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbc:	80 81       	ld	r24, Z
    3dbe:	91 81       	ldd	r25, Z+1	; 0x01
    3dc0:	00 97       	sbiw	r24, 0x00	; 0
    3dc2:	d1 f6       	brne	.-76     	; 0x3d78 <TheSafe_vidCheck_Password+0x70a>
    3dc4:	27 c0       	rjmp	.+78     	; 0x3e14 <TheSafe_vidCheck_Password+0x7a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc6:	8e 01       	movw	r16, r28
    3dc8:	0d 57       	subi	r16, 0x7D	; 125
    3dca:	1f 4f       	sbci	r17, 0xFF	; 255
    3dcc:	fe 01       	movw	r30, r28
    3dce:	eb 57       	subi	r30, 0x7B	; 123
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	60 81       	ld	r22, Z
    3dd4:	71 81       	ldd	r23, Z+1	; 0x01
    3dd6:	82 81       	ldd	r24, Z+2	; 0x02
    3dd8:	93 81       	ldd	r25, Z+3	; 0x03
    3dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dde:	dc 01       	movw	r26, r24
    3de0:	cb 01       	movw	r24, r22
    3de2:	f8 01       	movw	r30, r16
    3de4:	91 83       	std	Z+1, r25	; 0x01
    3de6:	80 83       	st	Z, r24
    3de8:	de 01       	movw	r26, r28
    3dea:	a1 58       	subi	r26, 0x81	; 129
    3dec:	bf 4f       	sbci	r27, 0xFF	; 255
    3dee:	fe 01       	movw	r30, r28
    3df0:	ed 57       	subi	r30, 0x7D	; 125
    3df2:	ff 4f       	sbci	r31, 0xFF	; 255
    3df4:	80 81       	ld	r24, Z
    3df6:	91 81       	ldd	r25, Z+1	; 0x01
    3df8:	8d 93       	st	X+, r24
    3dfa:	9c 93       	st	X, r25
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	e1 58       	subi	r30, 0x81	; 129
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	80 81       	ld	r24, Z
    3e04:	91 81       	ldd	r25, Z+1	; 0x01
    3e06:	01 97       	sbiw	r24, 0x01	; 1
    3e08:	f1 f7       	brne	.-4      	; 0x3e06 <TheSafe_vidCheck_Password+0x798>
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	e1 58       	subi	r30, 0x81	; 129
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	91 83       	std	Z+1, r25	; 0x01
    3e12:	80 83       	st	Z, r24
				_delay_ms(500);
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    3e14:	90 91 ee 00 	lds	r25, 0x00EE
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	69 2f       	mov	r22, r25
    3e1c:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("*");
    3e20:	87 e7       	ldi	r24, 0x77	; 119
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				if (CheckPassLcdLocation == 11)
    3e28:	80 91 ee 00 	lds	r24, 0x00EE
    3e2c:	8b 30       	cpi	r24, 0x0B	; 11
    3e2e:	89 f4       	brne	.+34     	; 0x3e52 <TheSafe_vidCheck_Password+0x7e4>
				{
					Check_Password = key ;
    3e30:	9e 01       	movw	r18, r28
    3e32:	27 54       	subi	r18, 0x47	; 71
    3e34:	3f 4f       	sbci	r19, 0xFF	; 255
    3e36:	fe 01       	movw	r30, r28
    3e38:	e8 54       	subi	r30, 0x48	; 72
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	80 81       	ld	r24, Z
    3e3e:	88 2f       	mov	r24, r24
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	a0 e0       	ldi	r26, 0x00	; 0
    3e44:	b0 e0       	ldi	r27, 0x00	; 0
    3e46:	f9 01       	movw	r30, r18
    3e48:	80 83       	st	Z, r24
    3e4a:	91 83       	std	Z+1, r25	; 0x01
    3e4c:	a2 83       	std	Z+2, r26	; 0x02
    3e4e:	b3 83       	std	Z+3, r27	; 0x03
    3e50:	c1 c6       	rjmp	.+3458   	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
				else
				{
					Check_Password = (Check_Password * 10) + key ;
    3e52:	fe 01       	movw	r30, r28
    3e54:	e7 54       	subi	r30, 0x47	; 71
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	80 81       	ld	r24, Z
    3e5a:	91 81       	ldd	r25, Z+1	; 0x01
    3e5c:	a2 81       	ldd	r26, Z+2	; 0x02
    3e5e:	b3 81       	ldd	r27, Z+3	; 0x03
    3e60:	2a e0       	ldi	r18, 0x0A	; 10
    3e62:	30 e0       	ldi	r19, 0x00	; 0
    3e64:	40 e0       	ldi	r20, 0x00	; 0
    3e66:	50 e0       	ldi	r21, 0x00	; 0
    3e68:	bc 01       	movw	r22, r24
    3e6a:	cd 01       	movw	r24, r26
    3e6c:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    3e70:	9b 01       	movw	r18, r22
    3e72:	ac 01       	movw	r20, r24
    3e74:	fe 01       	movw	r30, r28
    3e76:	e8 54       	subi	r30, 0x48	; 72
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	80 81       	ld	r24, Z
    3e7c:	88 2f       	mov	r24, r24
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	a0 e0       	ldi	r26, 0x00	; 0
    3e82:	b0 e0       	ldi	r27, 0x00	; 0
    3e84:	fe 01       	movw	r30, r28
    3e86:	e7 54       	subi	r30, 0x47	; 71
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	82 0f       	add	r24, r18
    3e8c:	93 1f       	adc	r25, r19
    3e8e:	a4 1f       	adc	r26, r20
    3e90:	b5 1f       	adc	r27, r21
    3e92:	80 83       	st	Z, r24
    3e94:	91 83       	std	Z+1, r25	; 0x01
    3e96:	a2 83       	std	Z+2, r26	; 0x02
    3e98:	b3 83       	std	Z+3, r27	; 0x03
    3e9a:	9c c6       	rjmp	.+3384   	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
			}
			else if(key == 3)
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	e8 54       	subi	r30, 0x48	; 72
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	80 81       	ld	r24, Z
    3ea4:	83 30       	cpi	r24, 0x03	; 3
    3ea6:	09 f0       	breq	.+2      	; 0x3eaa <TheSafe_vidCheck_Password+0x83c>
    3ea8:	04 c1       	rjmp	.+520    	; 0x40b2 <TheSafe_vidCheck_Password+0xa44>
			{
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    3eaa:	90 91 ee 00 	lds	r25, 0x00EE
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	69 2f       	mov	r22, r25
    3eb2:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	e8 54       	subi	r30, 0x48	; 72
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	80 81       	ld	r24, Z
    3ebe:	80 5d       	subi	r24, 0xD0	; 208
    3ec0:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e5 58       	subi	r30, 0x85	; 133
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	80 e0       	ldi	r24, 0x00	; 0
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	aa ef       	ldi	r26, 0xFA	; 250
    3ed0:	b3 e4       	ldi	r27, 0x43	; 67
    3ed2:	80 83       	st	Z, r24
    3ed4:	91 83       	std	Z+1, r25	; 0x01
    3ed6:	a2 83       	std	Z+2, r26	; 0x02
    3ed8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eda:	8e 01       	movw	r16, r28
    3edc:	09 58       	subi	r16, 0x89	; 137
    3ede:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	e5 58       	subi	r30, 0x85	; 133
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	60 81       	ld	r22, Z
    3ee8:	71 81       	ldd	r23, Z+1	; 0x01
    3eea:	82 81       	ldd	r24, Z+2	; 0x02
    3eec:	93 81       	ldd	r25, Z+3	; 0x03
    3eee:	20 e0       	ldi	r18, 0x00	; 0
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	4a ef       	ldi	r20, 0xFA	; 250
    3ef4:	54 e4       	ldi	r21, 0x44	; 68
    3ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efa:	dc 01       	movw	r26, r24
    3efc:	cb 01       	movw	r24, r22
    3efe:	f8 01       	movw	r30, r16
    3f00:	80 83       	st	Z, r24
    3f02:	91 83       	std	Z+1, r25	; 0x01
    3f04:	a2 83       	std	Z+2, r26	; 0x02
    3f06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f08:	fe 01       	movw	r30, r28
    3f0a:	e9 58       	subi	r30, 0x89	; 137
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	60 81       	ld	r22, Z
    3f10:	71 81       	ldd	r23, Z+1	; 0x01
    3f12:	82 81       	ldd	r24, Z+2	; 0x02
    3f14:	93 81       	ldd	r25, Z+3	; 0x03
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e8       	ldi	r20, 0x80	; 128
    3f1c:	5f e3       	ldi	r21, 0x3F	; 63
    3f1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f22:	88 23       	and	r24, r24
    3f24:	44 f4       	brge	.+16     	; 0x3f36 <TheSafe_vidCheck_Password+0x8c8>
		__ticks = 1;
    3f26:	fe 01       	movw	r30, r28
    3f28:	eb 58       	subi	r30, 0x8B	; 139
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	91 83       	std	Z+1, r25	; 0x01
    3f32:	80 83       	st	Z, r24
    3f34:	64 c0       	rjmp	.+200    	; 0x3ffe <TheSafe_vidCheck_Password+0x990>
	else if (__tmp > 65535)
    3f36:	fe 01       	movw	r30, r28
    3f38:	e9 58       	subi	r30, 0x89	; 137
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	60 81       	ld	r22, Z
    3f3e:	71 81       	ldd	r23, Z+1	; 0x01
    3f40:	82 81       	ldd	r24, Z+2	; 0x02
    3f42:	93 81       	ldd	r25, Z+3	; 0x03
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	3f ef       	ldi	r19, 0xFF	; 255
    3f48:	4f e7       	ldi	r20, 0x7F	; 127
    3f4a:	57 e4       	ldi	r21, 0x47	; 71
    3f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f50:	18 16       	cp	r1, r24
    3f52:	0c f0       	brlt	.+2      	; 0x3f56 <TheSafe_vidCheck_Password+0x8e8>
    3f54:	43 c0       	rjmp	.+134    	; 0x3fdc <TheSafe_vidCheck_Password+0x96e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f56:	fe 01       	movw	r30, r28
    3f58:	e5 58       	subi	r30, 0x85	; 133
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	60 81       	ld	r22, Z
    3f5e:	71 81       	ldd	r23, Z+1	; 0x01
    3f60:	82 81       	ldd	r24, Z+2	; 0x02
    3f62:	93 81       	ldd	r25, Z+3	; 0x03
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	40 e2       	ldi	r20, 0x20	; 32
    3f6a:	51 e4       	ldi	r21, 0x41	; 65
    3f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	8e 01       	movw	r16, r28
    3f76:	0b 58       	subi	r16, 0x8B	; 139
    3f78:	1f 4f       	sbci	r17, 0xFF	; 255
    3f7a:	bc 01       	movw	r22, r24
    3f7c:	cd 01       	movw	r24, r26
    3f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f82:	dc 01       	movw	r26, r24
    3f84:	cb 01       	movw	r24, r22
    3f86:	f8 01       	movw	r30, r16
    3f88:	91 83       	std	Z+1, r25	; 0x01
    3f8a:	80 83       	st	Z, r24
    3f8c:	1f c0       	rjmp	.+62     	; 0x3fcc <TheSafe_vidCheck_Password+0x95e>
    3f8e:	fe 01       	movw	r30, r28
    3f90:	ed 58       	subi	r30, 0x8D	; 141
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	88 ec       	ldi	r24, 0xC8	; 200
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	91 83       	std	Z+1, r25	; 0x01
    3f9a:	80 83       	st	Z, r24
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	ed 58       	subi	r30, 0x8D	; 141
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	80 81       	ld	r24, Z
    3fa4:	91 81       	ldd	r25, Z+1	; 0x01
    3fa6:	01 97       	sbiw	r24, 0x01	; 1
    3fa8:	f1 f7       	brne	.-4      	; 0x3fa6 <TheSafe_vidCheck_Password+0x938>
    3faa:	fe 01       	movw	r30, r28
    3fac:	ed 58       	subi	r30, 0x8D	; 141
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	91 83       	std	Z+1, r25	; 0x01
    3fb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb4:	de 01       	movw	r26, r28
    3fb6:	ab 58       	subi	r26, 0x8B	; 139
    3fb8:	bf 4f       	sbci	r27, 0xFF	; 255
    3fba:	fe 01       	movw	r30, r28
    3fbc:	eb 58       	subi	r30, 0x8B	; 139
    3fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc0:	80 81       	ld	r24, Z
    3fc2:	91 81       	ldd	r25, Z+1	; 0x01
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	11 96       	adiw	r26, 0x01	; 1
    3fc8:	9c 93       	st	X, r25
    3fca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fcc:	fe 01       	movw	r30, r28
    3fce:	eb 58       	subi	r30, 0x8B	; 139
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	80 81       	ld	r24, Z
    3fd4:	91 81       	ldd	r25, Z+1	; 0x01
    3fd6:	00 97       	sbiw	r24, 0x00	; 0
    3fd8:	d1 f6       	brne	.-76     	; 0x3f8e <TheSafe_vidCheck_Password+0x920>
    3fda:	27 c0       	rjmp	.+78     	; 0x402a <TheSafe_vidCheck_Password+0x9bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fdc:	8e 01       	movw	r16, r28
    3fde:	0b 58       	subi	r16, 0x8B	; 139
    3fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	e9 58       	subi	r30, 0x89	; 137
    3fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe8:	60 81       	ld	r22, Z
    3fea:	71 81       	ldd	r23, Z+1	; 0x01
    3fec:	82 81       	ldd	r24, Z+2	; 0x02
    3fee:	93 81       	ldd	r25, Z+3	; 0x03
    3ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff4:	dc 01       	movw	r26, r24
    3ff6:	cb 01       	movw	r24, r22
    3ff8:	f8 01       	movw	r30, r16
    3ffa:	91 83       	std	Z+1, r25	; 0x01
    3ffc:	80 83       	st	Z, r24
    3ffe:	de 01       	movw	r26, r28
    4000:	af 58       	subi	r26, 0x8F	; 143
    4002:	bf 4f       	sbci	r27, 0xFF	; 255
    4004:	fe 01       	movw	r30, r28
    4006:	eb 58       	subi	r30, 0x8B	; 139
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	80 81       	ld	r24, Z
    400c:	91 81       	ldd	r25, Z+1	; 0x01
    400e:	8d 93       	st	X+, r24
    4010:	9c 93       	st	X, r25
    4012:	fe 01       	movw	r30, r28
    4014:	ef 58       	subi	r30, 0x8F	; 143
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	80 81       	ld	r24, Z
    401a:	91 81       	ldd	r25, Z+1	; 0x01
    401c:	01 97       	sbiw	r24, 0x01	; 1
    401e:	f1 f7       	brne	.-4      	; 0x401c <TheSafe_vidCheck_Password+0x9ae>
    4020:	fe 01       	movw	r30, r28
    4022:	ef 58       	subi	r30, 0x8F	; 143
    4024:	ff 4f       	sbci	r31, 0xFF	; 255
    4026:	91 83       	std	Z+1, r25	; 0x01
    4028:	80 83       	st	Z, r24
				_delay_ms(500);
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    402a:	90 91 ee 00 	lds	r25, 0x00EE
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	69 2f       	mov	r22, r25
    4032:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("*");
    4036:	87 e7       	ldi	r24, 0x77	; 119
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				if (CheckPassLcdLocation == 11)
    403e:	80 91 ee 00 	lds	r24, 0x00EE
    4042:	8b 30       	cpi	r24, 0x0B	; 11
    4044:	89 f4       	brne	.+34     	; 0x4068 <TheSafe_vidCheck_Password+0x9fa>
				{
					Check_Password = key ;
    4046:	9e 01       	movw	r18, r28
    4048:	27 54       	subi	r18, 0x47	; 71
    404a:	3f 4f       	sbci	r19, 0xFF	; 255
    404c:	fe 01       	movw	r30, r28
    404e:	e8 54       	subi	r30, 0x48	; 72
    4050:	ff 4f       	sbci	r31, 0xFF	; 255
    4052:	80 81       	ld	r24, Z
    4054:	88 2f       	mov	r24, r24
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	a0 e0       	ldi	r26, 0x00	; 0
    405a:	b0 e0       	ldi	r27, 0x00	; 0
    405c:	f9 01       	movw	r30, r18
    405e:	80 83       	st	Z, r24
    4060:	91 83       	std	Z+1, r25	; 0x01
    4062:	a2 83       	std	Z+2, r26	; 0x02
    4064:	b3 83       	std	Z+3, r27	; 0x03
    4066:	b6 c5       	rjmp	.+2924   	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
				else
				{
					Check_Password = (Check_Password * 10) + key ;
    4068:	fe 01       	movw	r30, r28
    406a:	e7 54       	subi	r30, 0x47	; 71
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	80 81       	ld	r24, Z
    4070:	91 81       	ldd	r25, Z+1	; 0x01
    4072:	a2 81       	ldd	r26, Z+2	; 0x02
    4074:	b3 81       	ldd	r27, Z+3	; 0x03
    4076:	2a e0       	ldi	r18, 0x0A	; 10
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	40 e0       	ldi	r20, 0x00	; 0
    407c:	50 e0       	ldi	r21, 0x00	; 0
    407e:	bc 01       	movw	r22, r24
    4080:	cd 01       	movw	r24, r26
    4082:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    4086:	9b 01       	movw	r18, r22
    4088:	ac 01       	movw	r20, r24
    408a:	fe 01       	movw	r30, r28
    408c:	e8 54       	subi	r30, 0x48	; 72
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	80 81       	ld	r24, Z
    4092:	88 2f       	mov	r24, r24
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	a0 e0       	ldi	r26, 0x00	; 0
    4098:	b0 e0       	ldi	r27, 0x00	; 0
    409a:	fe 01       	movw	r30, r28
    409c:	e7 54       	subi	r30, 0x47	; 71
    409e:	ff 4f       	sbci	r31, 0xFF	; 255
    40a0:	82 0f       	add	r24, r18
    40a2:	93 1f       	adc	r25, r19
    40a4:	a4 1f       	adc	r26, r20
    40a6:	b5 1f       	adc	r27, r21
    40a8:	80 83       	st	Z, r24
    40aa:	91 83       	std	Z+1, r25	; 0x01
    40ac:	a2 83       	std	Z+2, r26	; 0x02
    40ae:	b3 83       	std	Z+3, r27	; 0x03
    40b0:	91 c5       	rjmp	.+2850   	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
			}
			else if(key == 4)
    40b2:	fe 01       	movw	r30, r28
    40b4:	e8 54       	subi	r30, 0x48	; 72
    40b6:	ff 4f       	sbci	r31, 0xFF	; 255
    40b8:	80 81       	ld	r24, Z
    40ba:	84 30       	cpi	r24, 0x04	; 4
    40bc:	09 f0       	breq	.+2      	; 0x40c0 <TheSafe_vidCheck_Password+0xa52>
    40be:	04 c1       	rjmp	.+520    	; 0x42c8 <TheSafe_vidCheck_Password+0xc5a>
			{
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    40c0:	90 91 ee 00 	lds	r25, 0x00EE
    40c4:	80 e0       	ldi	r24, 0x00	; 0
    40c6:	69 2f       	mov	r22, r25
    40c8:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    40cc:	fe 01       	movw	r30, r28
    40ce:	e8 54       	subi	r30, 0x48	; 72
    40d0:	ff 4f       	sbci	r31, 0xFF	; 255
    40d2:	80 81       	ld	r24, Z
    40d4:	80 5d       	subi	r24, 0xD0	; 208
    40d6:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    40da:	fe 01       	movw	r30, r28
    40dc:	e3 59       	subi	r30, 0x93	; 147
    40de:	ff 4f       	sbci	r31, 0xFF	; 255
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	aa ef       	ldi	r26, 0xFA	; 250
    40e6:	b3 e4       	ldi	r27, 0x43	; 67
    40e8:	80 83       	st	Z, r24
    40ea:	91 83       	std	Z+1, r25	; 0x01
    40ec:	a2 83       	std	Z+2, r26	; 0x02
    40ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f0:	8e 01       	movw	r16, r28
    40f2:	07 59       	subi	r16, 0x97	; 151
    40f4:	1f 4f       	sbci	r17, 0xFF	; 255
    40f6:	fe 01       	movw	r30, r28
    40f8:	e3 59       	subi	r30, 0x93	; 147
    40fa:	ff 4f       	sbci	r31, 0xFF	; 255
    40fc:	60 81       	ld	r22, Z
    40fe:	71 81       	ldd	r23, Z+1	; 0x01
    4100:	82 81       	ldd	r24, Z+2	; 0x02
    4102:	93 81       	ldd	r25, Z+3	; 0x03
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	4a ef       	ldi	r20, 0xFA	; 250
    410a:	54 e4       	ldi	r21, 0x44	; 68
    410c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	f8 01       	movw	r30, r16
    4116:	80 83       	st	Z, r24
    4118:	91 83       	std	Z+1, r25	; 0x01
    411a:	a2 83       	std	Z+2, r26	; 0x02
    411c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    411e:	fe 01       	movw	r30, r28
    4120:	e7 59       	subi	r30, 0x97	; 151
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	60 81       	ld	r22, Z
    4126:	71 81       	ldd	r23, Z+1	; 0x01
    4128:	82 81       	ldd	r24, Z+2	; 0x02
    412a:	93 81       	ldd	r25, Z+3	; 0x03
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	30 e0       	ldi	r19, 0x00	; 0
    4130:	40 e8       	ldi	r20, 0x80	; 128
    4132:	5f e3       	ldi	r21, 0x3F	; 63
    4134:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4138:	88 23       	and	r24, r24
    413a:	44 f4       	brge	.+16     	; 0x414c <TheSafe_vidCheck_Password+0xade>
		__ticks = 1;
    413c:	fe 01       	movw	r30, r28
    413e:	e9 59       	subi	r30, 0x99	; 153
    4140:	ff 4f       	sbci	r31, 0xFF	; 255
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	91 83       	std	Z+1, r25	; 0x01
    4148:	80 83       	st	Z, r24
    414a:	64 c0       	rjmp	.+200    	; 0x4214 <TheSafe_vidCheck_Password+0xba6>
	else if (__tmp > 65535)
    414c:	fe 01       	movw	r30, r28
    414e:	e7 59       	subi	r30, 0x97	; 151
    4150:	ff 4f       	sbci	r31, 0xFF	; 255
    4152:	60 81       	ld	r22, Z
    4154:	71 81       	ldd	r23, Z+1	; 0x01
    4156:	82 81       	ldd	r24, Z+2	; 0x02
    4158:	93 81       	ldd	r25, Z+3	; 0x03
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	3f ef       	ldi	r19, 0xFF	; 255
    415e:	4f e7       	ldi	r20, 0x7F	; 127
    4160:	57 e4       	ldi	r21, 0x47	; 71
    4162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4166:	18 16       	cp	r1, r24
    4168:	0c f0       	brlt	.+2      	; 0x416c <TheSafe_vidCheck_Password+0xafe>
    416a:	43 c0       	rjmp	.+134    	; 0x41f2 <TheSafe_vidCheck_Password+0xb84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    416c:	fe 01       	movw	r30, r28
    416e:	e3 59       	subi	r30, 0x93	; 147
    4170:	ff 4f       	sbci	r31, 0xFF	; 255
    4172:	60 81       	ld	r22, Z
    4174:	71 81       	ldd	r23, Z+1	; 0x01
    4176:	82 81       	ldd	r24, Z+2	; 0x02
    4178:	93 81       	ldd	r25, Z+3	; 0x03
    417a:	20 e0       	ldi	r18, 0x00	; 0
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	40 e2       	ldi	r20, 0x20	; 32
    4180:	51 e4       	ldi	r21, 0x41	; 65
    4182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4186:	dc 01       	movw	r26, r24
    4188:	cb 01       	movw	r24, r22
    418a:	8e 01       	movw	r16, r28
    418c:	09 59       	subi	r16, 0x99	; 153
    418e:	1f 4f       	sbci	r17, 0xFF	; 255
    4190:	bc 01       	movw	r22, r24
    4192:	cd 01       	movw	r24, r26
    4194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4198:	dc 01       	movw	r26, r24
    419a:	cb 01       	movw	r24, r22
    419c:	f8 01       	movw	r30, r16
    419e:	91 83       	std	Z+1, r25	; 0x01
    41a0:	80 83       	st	Z, r24
    41a2:	1f c0       	rjmp	.+62     	; 0x41e2 <TheSafe_vidCheck_Password+0xb74>
    41a4:	fe 01       	movw	r30, r28
    41a6:	eb 59       	subi	r30, 0x9B	; 155
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	88 ec       	ldi	r24, 0xC8	; 200
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	91 83       	std	Z+1, r25	; 0x01
    41b0:	80 83       	st	Z, r24
    41b2:	fe 01       	movw	r30, r28
    41b4:	eb 59       	subi	r30, 0x9B	; 155
    41b6:	ff 4f       	sbci	r31, 0xFF	; 255
    41b8:	80 81       	ld	r24, Z
    41ba:	91 81       	ldd	r25, Z+1	; 0x01
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <TheSafe_vidCheck_Password+0xb4e>
    41c0:	fe 01       	movw	r30, r28
    41c2:	eb 59       	subi	r30, 0x9B	; 155
    41c4:	ff 4f       	sbci	r31, 0xFF	; 255
    41c6:	91 83       	std	Z+1, r25	; 0x01
    41c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ca:	de 01       	movw	r26, r28
    41cc:	a9 59       	subi	r26, 0x99	; 153
    41ce:	bf 4f       	sbci	r27, 0xFF	; 255
    41d0:	fe 01       	movw	r30, r28
    41d2:	e9 59       	subi	r30, 0x99	; 153
    41d4:	ff 4f       	sbci	r31, 0xFF	; 255
    41d6:	80 81       	ld	r24, Z
    41d8:	91 81       	ldd	r25, Z+1	; 0x01
    41da:	01 97       	sbiw	r24, 0x01	; 1
    41dc:	11 96       	adiw	r26, 0x01	; 1
    41de:	9c 93       	st	X, r25
    41e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e2:	fe 01       	movw	r30, r28
    41e4:	e9 59       	subi	r30, 0x99	; 153
    41e6:	ff 4f       	sbci	r31, 0xFF	; 255
    41e8:	80 81       	ld	r24, Z
    41ea:	91 81       	ldd	r25, Z+1	; 0x01
    41ec:	00 97       	sbiw	r24, 0x00	; 0
    41ee:	d1 f6       	brne	.-76     	; 0x41a4 <TheSafe_vidCheck_Password+0xb36>
    41f0:	27 c0       	rjmp	.+78     	; 0x4240 <TheSafe_vidCheck_Password+0xbd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f2:	8e 01       	movw	r16, r28
    41f4:	09 59       	subi	r16, 0x99	; 153
    41f6:	1f 4f       	sbci	r17, 0xFF	; 255
    41f8:	fe 01       	movw	r30, r28
    41fa:	e7 59       	subi	r30, 0x97	; 151
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	60 81       	ld	r22, Z
    4200:	71 81       	ldd	r23, Z+1	; 0x01
    4202:	82 81       	ldd	r24, Z+2	; 0x02
    4204:	93 81       	ldd	r25, Z+3	; 0x03
    4206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	f8 01       	movw	r30, r16
    4210:	91 83       	std	Z+1, r25	; 0x01
    4212:	80 83       	st	Z, r24
    4214:	de 01       	movw	r26, r28
    4216:	ad 59       	subi	r26, 0x9D	; 157
    4218:	bf 4f       	sbci	r27, 0xFF	; 255
    421a:	fe 01       	movw	r30, r28
    421c:	e9 59       	subi	r30, 0x99	; 153
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	80 81       	ld	r24, Z
    4222:	91 81       	ldd	r25, Z+1	; 0x01
    4224:	8d 93       	st	X+, r24
    4226:	9c 93       	st	X, r25
    4228:	fe 01       	movw	r30, r28
    422a:	ed 59       	subi	r30, 0x9D	; 157
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	80 81       	ld	r24, Z
    4230:	91 81       	ldd	r25, Z+1	; 0x01
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	f1 f7       	brne	.-4      	; 0x4232 <TheSafe_vidCheck_Password+0xbc4>
    4236:	fe 01       	movw	r30, r28
    4238:	ed 59       	subi	r30, 0x9D	; 157
    423a:	ff 4f       	sbci	r31, 0xFF	; 255
    423c:	91 83       	std	Z+1, r25	; 0x01
    423e:	80 83       	st	Z, r24
				_delay_ms(500);
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    4240:	90 91 ee 00 	lds	r25, 0x00EE
    4244:	80 e0       	ldi	r24, 0x00	; 0
    4246:	69 2f       	mov	r22, r25
    4248:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("*");
    424c:	87 e7       	ldi	r24, 0x77	; 119
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				if (CheckPassLcdLocation == 11)
    4254:	80 91 ee 00 	lds	r24, 0x00EE
    4258:	8b 30       	cpi	r24, 0x0B	; 11
    425a:	89 f4       	brne	.+34     	; 0x427e <TheSafe_vidCheck_Password+0xc10>
				{
					Check_Password = key ;
    425c:	9e 01       	movw	r18, r28
    425e:	27 54       	subi	r18, 0x47	; 71
    4260:	3f 4f       	sbci	r19, 0xFF	; 255
    4262:	fe 01       	movw	r30, r28
    4264:	e8 54       	subi	r30, 0x48	; 72
    4266:	ff 4f       	sbci	r31, 0xFF	; 255
    4268:	80 81       	ld	r24, Z
    426a:	88 2f       	mov	r24, r24
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	a0 e0       	ldi	r26, 0x00	; 0
    4270:	b0 e0       	ldi	r27, 0x00	; 0
    4272:	f9 01       	movw	r30, r18
    4274:	80 83       	st	Z, r24
    4276:	91 83       	std	Z+1, r25	; 0x01
    4278:	a2 83       	std	Z+2, r26	; 0x02
    427a:	b3 83       	std	Z+3, r27	; 0x03
    427c:	ab c4       	rjmp	.+2390   	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
				else
				{
					Check_Password = (Check_Password * 10) + key ;
    427e:	fe 01       	movw	r30, r28
    4280:	e7 54       	subi	r30, 0x47	; 71
    4282:	ff 4f       	sbci	r31, 0xFF	; 255
    4284:	80 81       	ld	r24, Z
    4286:	91 81       	ldd	r25, Z+1	; 0x01
    4288:	a2 81       	ldd	r26, Z+2	; 0x02
    428a:	b3 81       	ldd	r27, Z+3	; 0x03
    428c:	2a e0       	ldi	r18, 0x0A	; 10
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	40 e0       	ldi	r20, 0x00	; 0
    4292:	50 e0       	ldi	r21, 0x00	; 0
    4294:	bc 01       	movw	r22, r24
    4296:	cd 01       	movw	r24, r26
    4298:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    429c:	9b 01       	movw	r18, r22
    429e:	ac 01       	movw	r20, r24
    42a0:	fe 01       	movw	r30, r28
    42a2:	e8 54       	subi	r30, 0x48	; 72
    42a4:	ff 4f       	sbci	r31, 0xFF	; 255
    42a6:	80 81       	ld	r24, Z
    42a8:	88 2f       	mov	r24, r24
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	a0 e0       	ldi	r26, 0x00	; 0
    42ae:	b0 e0       	ldi	r27, 0x00	; 0
    42b0:	fe 01       	movw	r30, r28
    42b2:	e7 54       	subi	r30, 0x47	; 71
    42b4:	ff 4f       	sbci	r31, 0xFF	; 255
    42b6:	82 0f       	add	r24, r18
    42b8:	93 1f       	adc	r25, r19
    42ba:	a4 1f       	adc	r26, r20
    42bc:	b5 1f       	adc	r27, r21
    42be:	80 83       	st	Z, r24
    42c0:	91 83       	std	Z+1, r25	; 0x01
    42c2:	a2 83       	std	Z+2, r26	; 0x02
    42c4:	b3 83       	std	Z+3, r27	; 0x03
    42c6:	86 c4       	rjmp	.+2316   	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
			}
			else if(key == 5)
    42c8:	fe 01       	movw	r30, r28
    42ca:	e8 54       	subi	r30, 0x48	; 72
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	80 81       	ld	r24, Z
    42d0:	85 30       	cpi	r24, 0x05	; 5
    42d2:	09 f0       	breq	.+2      	; 0x42d6 <TheSafe_vidCheck_Password+0xc68>
    42d4:	04 c1       	rjmp	.+520    	; 0x44de <TheSafe_vidCheck_Password+0xe70>
			{
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    42d6:	90 91 ee 00 	lds	r25, 0x00EE
    42da:	80 e0       	ldi	r24, 0x00	; 0
    42dc:	69 2f       	mov	r22, r25
    42de:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    42e2:	fe 01       	movw	r30, r28
    42e4:	e8 54       	subi	r30, 0x48	; 72
    42e6:	ff 4f       	sbci	r31, 0xFF	; 255
    42e8:	80 81       	ld	r24, Z
    42ea:	80 5d       	subi	r24, 0xD0	; 208
    42ec:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    42f0:	fe 01       	movw	r30, r28
    42f2:	e1 5a       	subi	r30, 0xA1	; 161
    42f4:	ff 4f       	sbci	r31, 0xFF	; 255
    42f6:	80 e0       	ldi	r24, 0x00	; 0
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	aa ef       	ldi	r26, 0xFA	; 250
    42fc:	b3 e4       	ldi	r27, 0x43	; 67
    42fe:	80 83       	st	Z, r24
    4300:	91 83       	std	Z+1, r25	; 0x01
    4302:	a2 83       	std	Z+2, r26	; 0x02
    4304:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4306:	8e 01       	movw	r16, r28
    4308:	05 5a       	subi	r16, 0xA5	; 165
    430a:	1f 4f       	sbci	r17, 0xFF	; 255
    430c:	fe 01       	movw	r30, r28
    430e:	e1 5a       	subi	r30, 0xA1	; 161
    4310:	ff 4f       	sbci	r31, 0xFF	; 255
    4312:	60 81       	ld	r22, Z
    4314:	71 81       	ldd	r23, Z+1	; 0x01
    4316:	82 81       	ldd	r24, Z+2	; 0x02
    4318:	93 81       	ldd	r25, Z+3	; 0x03
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	4a ef       	ldi	r20, 0xFA	; 250
    4320:	54 e4       	ldi	r21, 0x44	; 68
    4322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4326:	dc 01       	movw	r26, r24
    4328:	cb 01       	movw	r24, r22
    432a:	f8 01       	movw	r30, r16
    432c:	80 83       	st	Z, r24
    432e:	91 83       	std	Z+1, r25	; 0x01
    4330:	a2 83       	std	Z+2, r26	; 0x02
    4332:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4334:	fe 01       	movw	r30, r28
    4336:	e5 5a       	subi	r30, 0xA5	; 165
    4338:	ff 4f       	sbci	r31, 0xFF	; 255
    433a:	60 81       	ld	r22, Z
    433c:	71 81       	ldd	r23, Z+1	; 0x01
    433e:	82 81       	ldd	r24, Z+2	; 0x02
    4340:	93 81       	ldd	r25, Z+3	; 0x03
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	40 e8       	ldi	r20, 0x80	; 128
    4348:	5f e3       	ldi	r21, 0x3F	; 63
    434a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    434e:	88 23       	and	r24, r24
    4350:	44 f4       	brge	.+16     	; 0x4362 <TheSafe_vidCheck_Password+0xcf4>
		__ticks = 1;
    4352:	fe 01       	movw	r30, r28
    4354:	e7 5a       	subi	r30, 0xA7	; 167
    4356:	ff 4f       	sbci	r31, 0xFF	; 255
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	91 83       	std	Z+1, r25	; 0x01
    435e:	80 83       	st	Z, r24
    4360:	64 c0       	rjmp	.+200    	; 0x442a <TheSafe_vidCheck_Password+0xdbc>
	else if (__tmp > 65535)
    4362:	fe 01       	movw	r30, r28
    4364:	e5 5a       	subi	r30, 0xA5	; 165
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	60 81       	ld	r22, Z
    436a:	71 81       	ldd	r23, Z+1	; 0x01
    436c:	82 81       	ldd	r24, Z+2	; 0x02
    436e:	93 81       	ldd	r25, Z+3	; 0x03
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	3f ef       	ldi	r19, 0xFF	; 255
    4374:	4f e7       	ldi	r20, 0x7F	; 127
    4376:	57 e4       	ldi	r21, 0x47	; 71
    4378:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    437c:	18 16       	cp	r1, r24
    437e:	0c f0       	brlt	.+2      	; 0x4382 <TheSafe_vidCheck_Password+0xd14>
    4380:	43 c0       	rjmp	.+134    	; 0x4408 <TheSafe_vidCheck_Password+0xd9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4382:	fe 01       	movw	r30, r28
    4384:	e1 5a       	subi	r30, 0xA1	; 161
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	60 81       	ld	r22, Z
    438a:	71 81       	ldd	r23, Z+1	; 0x01
    438c:	82 81       	ldd	r24, Z+2	; 0x02
    438e:	93 81       	ldd	r25, Z+3	; 0x03
    4390:	20 e0       	ldi	r18, 0x00	; 0
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	40 e2       	ldi	r20, 0x20	; 32
    4396:	51 e4       	ldi	r21, 0x41	; 65
    4398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439c:	dc 01       	movw	r26, r24
    439e:	cb 01       	movw	r24, r22
    43a0:	8e 01       	movw	r16, r28
    43a2:	07 5a       	subi	r16, 0xA7	; 167
    43a4:	1f 4f       	sbci	r17, 0xFF	; 255
    43a6:	bc 01       	movw	r22, r24
    43a8:	cd 01       	movw	r24, r26
    43aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	f8 01       	movw	r30, r16
    43b4:	91 83       	std	Z+1, r25	; 0x01
    43b6:	80 83       	st	Z, r24
    43b8:	1f c0       	rjmp	.+62     	; 0x43f8 <TheSafe_vidCheck_Password+0xd8a>
    43ba:	fe 01       	movw	r30, r28
    43bc:	e9 5a       	subi	r30, 0xA9	; 169
    43be:	ff 4f       	sbci	r31, 0xFF	; 255
    43c0:	88 ec       	ldi	r24, 0xC8	; 200
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	91 83       	std	Z+1, r25	; 0x01
    43c6:	80 83       	st	Z, r24
    43c8:	fe 01       	movw	r30, r28
    43ca:	e9 5a       	subi	r30, 0xA9	; 169
    43cc:	ff 4f       	sbci	r31, 0xFF	; 255
    43ce:	80 81       	ld	r24, Z
    43d0:	91 81       	ldd	r25, Z+1	; 0x01
    43d2:	01 97       	sbiw	r24, 0x01	; 1
    43d4:	f1 f7       	brne	.-4      	; 0x43d2 <TheSafe_vidCheck_Password+0xd64>
    43d6:	fe 01       	movw	r30, r28
    43d8:	e9 5a       	subi	r30, 0xA9	; 169
    43da:	ff 4f       	sbci	r31, 0xFF	; 255
    43dc:	91 83       	std	Z+1, r25	; 0x01
    43de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43e0:	de 01       	movw	r26, r28
    43e2:	a7 5a       	subi	r26, 0xA7	; 167
    43e4:	bf 4f       	sbci	r27, 0xFF	; 255
    43e6:	fe 01       	movw	r30, r28
    43e8:	e7 5a       	subi	r30, 0xA7	; 167
    43ea:	ff 4f       	sbci	r31, 0xFF	; 255
    43ec:	80 81       	ld	r24, Z
    43ee:	91 81       	ldd	r25, Z+1	; 0x01
    43f0:	01 97       	sbiw	r24, 0x01	; 1
    43f2:	11 96       	adiw	r26, 0x01	; 1
    43f4:	9c 93       	st	X, r25
    43f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43f8:	fe 01       	movw	r30, r28
    43fa:	e7 5a       	subi	r30, 0xA7	; 167
    43fc:	ff 4f       	sbci	r31, 0xFF	; 255
    43fe:	80 81       	ld	r24, Z
    4400:	91 81       	ldd	r25, Z+1	; 0x01
    4402:	00 97       	sbiw	r24, 0x00	; 0
    4404:	d1 f6       	brne	.-76     	; 0x43ba <TheSafe_vidCheck_Password+0xd4c>
    4406:	27 c0       	rjmp	.+78     	; 0x4456 <TheSafe_vidCheck_Password+0xde8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4408:	8e 01       	movw	r16, r28
    440a:	07 5a       	subi	r16, 0xA7	; 167
    440c:	1f 4f       	sbci	r17, 0xFF	; 255
    440e:	fe 01       	movw	r30, r28
    4410:	e5 5a       	subi	r30, 0xA5	; 165
    4412:	ff 4f       	sbci	r31, 0xFF	; 255
    4414:	60 81       	ld	r22, Z
    4416:	71 81       	ldd	r23, Z+1	; 0x01
    4418:	82 81       	ldd	r24, Z+2	; 0x02
    441a:	93 81       	ldd	r25, Z+3	; 0x03
    441c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4420:	dc 01       	movw	r26, r24
    4422:	cb 01       	movw	r24, r22
    4424:	f8 01       	movw	r30, r16
    4426:	91 83       	std	Z+1, r25	; 0x01
    4428:	80 83       	st	Z, r24
    442a:	de 01       	movw	r26, r28
    442c:	ab 5a       	subi	r26, 0xAB	; 171
    442e:	bf 4f       	sbci	r27, 0xFF	; 255
    4430:	fe 01       	movw	r30, r28
    4432:	e7 5a       	subi	r30, 0xA7	; 167
    4434:	ff 4f       	sbci	r31, 0xFF	; 255
    4436:	80 81       	ld	r24, Z
    4438:	91 81       	ldd	r25, Z+1	; 0x01
    443a:	8d 93       	st	X+, r24
    443c:	9c 93       	st	X, r25
    443e:	fe 01       	movw	r30, r28
    4440:	eb 5a       	subi	r30, 0xAB	; 171
    4442:	ff 4f       	sbci	r31, 0xFF	; 255
    4444:	80 81       	ld	r24, Z
    4446:	91 81       	ldd	r25, Z+1	; 0x01
    4448:	01 97       	sbiw	r24, 0x01	; 1
    444a:	f1 f7       	brne	.-4      	; 0x4448 <TheSafe_vidCheck_Password+0xdda>
    444c:	fe 01       	movw	r30, r28
    444e:	eb 5a       	subi	r30, 0xAB	; 171
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	91 83       	std	Z+1, r25	; 0x01
    4454:	80 83       	st	Z, r24
				_delay_ms(500);
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    4456:	90 91 ee 00 	lds	r25, 0x00EE
    445a:	80 e0       	ldi	r24, 0x00	; 0
    445c:	69 2f       	mov	r22, r25
    445e:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("*");
    4462:	87 e7       	ldi	r24, 0x77	; 119
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				if (CheckPassLcdLocation == 11)
    446a:	80 91 ee 00 	lds	r24, 0x00EE
    446e:	8b 30       	cpi	r24, 0x0B	; 11
    4470:	89 f4       	brne	.+34     	; 0x4494 <TheSafe_vidCheck_Password+0xe26>
				{
					Check_Password = key ;
    4472:	9e 01       	movw	r18, r28
    4474:	27 54       	subi	r18, 0x47	; 71
    4476:	3f 4f       	sbci	r19, 0xFF	; 255
    4478:	fe 01       	movw	r30, r28
    447a:	e8 54       	subi	r30, 0x48	; 72
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	80 81       	ld	r24, Z
    4480:	88 2f       	mov	r24, r24
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	a0 e0       	ldi	r26, 0x00	; 0
    4486:	b0 e0       	ldi	r27, 0x00	; 0
    4488:	f9 01       	movw	r30, r18
    448a:	80 83       	st	Z, r24
    448c:	91 83       	std	Z+1, r25	; 0x01
    448e:	a2 83       	std	Z+2, r26	; 0x02
    4490:	b3 83       	std	Z+3, r27	; 0x03
    4492:	a0 c3       	rjmp	.+1856   	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
				else
				{
					Check_Password = (Check_Password * 10) + key ;
    4494:	fe 01       	movw	r30, r28
    4496:	e7 54       	subi	r30, 0x47	; 71
    4498:	ff 4f       	sbci	r31, 0xFF	; 255
    449a:	80 81       	ld	r24, Z
    449c:	91 81       	ldd	r25, Z+1	; 0x01
    449e:	a2 81       	ldd	r26, Z+2	; 0x02
    44a0:	b3 81       	ldd	r27, Z+3	; 0x03
    44a2:	2a e0       	ldi	r18, 0x0A	; 10
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	40 e0       	ldi	r20, 0x00	; 0
    44a8:	50 e0       	ldi	r21, 0x00	; 0
    44aa:	bc 01       	movw	r22, r24
    44ac:	cd 01       	movw	r24, r26
    44ae:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    44b2:	9b 01       	movw	r18, r22
    44b4:	ac 01       	movw	r20, r24
    44b6:	fe 01       	movw	r30, r28
    44b8:	e8 54       	subi	r30, 0x48	; 72
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	80 81       	ld	r24, Z
    44be:	88 2f       	mov	r24, r24
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	a0 e0       	ldi	r26, 0x00	; 0
    44c4:	b0 e0       	ldi	r27, 0x00	; 0
    44c6:	fe 01       	movw	r30, r28
    44c8:	e7 54       	subi	r30, 0x47	; 71
    44ca:	ff 4f       	sbci	r31, 0xFF	; 255
    44cc:	82 0f       	add	r24, r18
    44ce:	93 1f       	adc	r25, r19
    44d0:	a4 1f       	adc	r26, r20
    44d2:	b5 1f       	adc	r27, r21
    44d4:	80 83       	st	Z, r24
    44d6:	91 83       	std	Z+1, r25	; 0x01
    44d8:	a2 83       	std	Z+2, r26	; 0x02
    44da:	b3 83       	std	Z+3, r27	; 0x03
    44dc:	7b c3       	rjmp	.+1782   	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
			}
			else if(key == 6)
    44de:	fe 01       	movw	r30, r28
    44e0:	e8 54       	subi	r30, 0x48	; 72
    44e2:	ff 4f       	sbci	r31, 0xFF	; 255
    44e4:	80 81       	ld	r24, Z
    44e6:	86 30       	cpi	r24, 0x06	; 6
    44e8:	09 f0       	breq	.+2      	; 0x44ec <TheSafe_vidCheck_Password+0xe7e>
    44ea:	04 c1       	rjmp	.+520    	; 0x46f4 <TheSafe_vidCheck_Password+0x1086>
			{
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    44ec:	90 91 ee 00 	lds	r25, 0x00EE
    44f0:	80 e0       	ldi	r24, 0x00	; 0
    44f2:	69 2f       	mov	r22, r25
    44f4:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    44f8:	fe 01       	movw	r30, r28
    44fa:	e8 54       	subi	r30, 0x48	; 72
    44fc:	ff 4f       	sbci	r31, 0xFF	; 255
    44fe:	80 81       	ld	r24, Z
    4500:	80 5d       	subi	r24, 0xD0	; 208
    4502:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    4506:	fe 01       	movw	r30, r28
    4508:	ef 5a       	subi	r30, 0xAF	; 175
    450a:	ff 4f       	sbci	r31, 0xFF	; 255
    450c:	80 e0       	ldi	r24, 0x00	; 0
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	aa ef       	ldi	r26, 0xFA	; 250
    4512:	b3 e4       	ldi	r27, 0x43	; 67
    4514:	80 83       	st	Z, r24
    4516:	91 83       	std	Z+1, r25	; 0x01
    4518:	a2 83       	std	Z+2, r26	; 0x02
    451a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    451c:	8e 01       	movw	r16, r28
    451e:	03 5b       	subi	r16, 0xB3	; 179
    4520:	1f 4f       	sbci	r17, 0xFF	; 255
    4522:	fe 01       	movw	r30, r28
    4524:	ef 5a       	subi	r30, 0xAF	; 175
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	60 81       	ld	r22, Z
    452a:	71 81       	ldd	r23, Z+1	; 0x01
    452c:	82 81       	ldd	r24, Z+2	; 0x02
    452e:	93 81       	ldd	r25, Z+3	; 0x03
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	4a ef       	ldi	r20, 0xFA	; 250
    4536:	54 e4       	ldi	r21, 0x44	; 68
    4538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    453c:	dc 01       	movw	r26, r24
    453e:	cb 01       	movw	r24, r22
    4540:	f8 01       	movw	r30, r16
    4542:	80 83       	st	Z, r24
    4544:	91 83       	std	Z+1, r25	; 0x01
    4546:	a2 83       	std	Z+2, r26	; 0x02
    4548:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    454a:	fe 01       	movw	r30, r28
    454c:	e3 5b       	subi	r30, 0xB3	; 179
    454e:	ff 4f       	sbci	r31, 0xFF	; 255
    4550:	60 81       	ld	r22, Z
    4552:	71 81       	ldd	r23, Z+1	; 0x01
    4554:	82 81       	ldd	r24, Z+2	; 0x02
    4556:	93 81       	ldd	r25, Z+3	; 0x03
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	40 e8       	ldi	r20, 0x80	; 128
    455e:	5f e3       	ldi	r21, 0x3F	; 63
    4560:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4564:	88 23       	and	r24, r24
    4566:	44 f4       	brge	.+16     	; 0x4578 <TheSafe_vidCheck_Password+0xf0a>
		__ticks = 1;
    4568:	fe 01       	movw	r30, r28
    456a:	e5 5b       	subi	r30, 0xB5	; 181
    456c:	ff 4f       	sbci	r31, 0xFF	; 255
    456e:	81 e0       	ldi	r24, 0x01	; 1
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	91 83       	std	Z+1, r25	; 0x01
    4574:	80 83       	st	Z, r24
    4576:	64 c0       	rjmp	.+200    	; 0x4640 <TheSafe_vidCheck_Password+0xfd2>
	else if (__tmp > 65535)
    4578:	fe 01       	movw	r30, r28
    457a:	e3 5b       	subi	r30, 0xB3	; 179
    457c:	ff 4f       	sbci	r31, 0xFF	; 255
    457e:	60 81       	ld	r22, Z
    4580:	71 81       	ldd	r23, Z+1	; 0x01
    4582:	82 81       	ldd	r24, Z+2	; 0x02
    4584:	93 81       	ldd	r25, Z+3	; 0x03
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	3f ef       	ldi	r19, 0xFF	; 255
    458a:	4f e7       	ldi	r20, 0x7F	; 127
    458c:	57 e4       	ldi	r21, 0x47	; 71
    458e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4592:	18 16       	cp	r1, r24
    4594:	0c f0       	brlt	.+2      	; 0x4598 <TheSafe_vidCheck_Password+0xf2a>
    4596:	43 c0       	rjmp	.+134    	; 0x461e <TheSafe_vidCheck_Password+0xfb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4598:	fe 01       	movw	r30, r28
    459a:	ef 5a       	subi	r30, 0xAF	; 175
    459c:	ff 4f       	sbci	r31, 0xFF	; 255
    459e:	60 81       	ld	r22, Z
    45a0:	71 81       	ldd	r23, Z+1	; 0x01
    45a2:	82 81       	ldd	r24, Z+2	; 0x02
    45a4:	93 81       	ldd	r25, Z+3	; 0x03
    45a6:	20 e0       	ldi	r18, 0x00	; 0
    45a8:	30 e0       	ldi	r19, 0x00	; 0
    45aa:	40 e2       	ldi	r20, 0x20	; 32
    45ac:	51 e4       	ldi	r21, 0x41	; 65
    45ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45b2:	dc 01       	movw	r26, r24
    45b4:	cb 01       	movw	r24, r22
    45b6:	8e 01       	movw	r16, r28
    45b8:	05 5b       	subi	r16, 0xB5	; 181
    45ba:	1f 4f       	sbci	r17, 0xFF	; 255
    45bc:	bc 01       	movw	r22, r24
    45be:	cd 01       	movw	r24, r26
    45c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c4:	dc 01       	movw	r26, r24
    45c6:	cb 01       	movw	r24, r22
    45c8:	f8 01       	movw	r30, r16
    45ca:	91 83       	std	Z+1, r25	; 0x01
    45cc:	80 83       	st	Z, r24
    45ce:	1f c0       	rjmp	.+62     	; 0x460e <TheSafe_vidCheck_Password+0xfa0>
    45d0:	fe 01       	movw	r30, r28
    45d2:	e7 5b       	subi	r30, 0xB7	; 183
    45d4:	ff 4f       	sbci	r31, 0xFF	; 255
    45d6:	88 ec       	ldi	r24, 0xC8	; 200
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	91 83       	std	Z+1, r25	; 0x01
    45dc:	80 83       	st	Z, r24
    45de:	fe 01       	movw	r30, r28
    45e0:	e7 5b       	subi	r30, 0xB7	; 183
    45e2:	ff 4f       	sbci	r31, 0xFF	; 255
    45e4:	80 81       	ld	r24, Z
    45e6:	91 81       	ldd	r25, Z+1	; 0x01
    45e8:	01 97       	sbiw	r24, 0x01	; 1
    45ea:	f1 f7       	brne	.-4      	; 0x45e8 <TheSafe_vidCheck_Password+0xf7a>
    45ec:	fe 01       	movw	r30, r28
    45ee:	e7 5b       	subi	r30, 0xB7	; 183
    45f0:	ff 4f       	sbci	r31, 0xFF	; 255
    45f2:	91 83       	std	Z+1, r25	; 0x01
    45f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f6:	de 01       	movw	r26, r28
    45f8:	a5 5b       	subi	r26, 0xB5	; 181
    45fa:	bf 4f       	sbci	r27, 0xFF	; 255
    45fc:	fe 01       	movw	r30, r28
    45fe:	e5 5b       	subi	r30, 0xB5	; 181
    4600:	ff 4f       	sbci	r31, 0xFF	; 255
    4602:	80 81       	ld	r24, Z
    4604:	91 81       	ldd	r25, Z+1	; 0x01
    4606:	01 97       	sbiw	r24, 0x01	; 1
    4608:	11 96       	adiw	r26, 0x01	; 1
    460a:	9c 93       	st	X, r25
    460c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    460e:	fe 01       	movw	r30, r28
    4610:	e5 5b       	subi	r30, 0xB5	; 181
    4612:	ff 4f       	sbci	r31, 0xFF	; 255
    4614:	80 81       	ld	r24, Z
    4616:	91 81       	ldd	r25, Z+1	; 0x01
    4618:	00 97       	sbiw	r24, 0x00	; 0
    461a:	d1 f6       	brne	.-76     	; 0x45d0 <TheSafe_vidCheck_Password+0xf62>
    461c:	27 c0       	rjmp	.+78     	; 0x466c <TheSafe_vidCheck_Password+0xffe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    461e:	8e 01       	movw	r16, r28
    4620:	05 5b       	subi	r16, 0xB5	; 181
    4622:	1f 4f       	sbci	r17, 0xFF	; 255
    4624:	fe 01       	movw	r30, r28
    4626:	e3 5b       	subi	r30, 0xB3	; 179
    4628:	ff 4f       	sbci	r31, 0xFF	; 255
    462a:	60 81       	ld	r22, Z
    462c:	71 81       	ldd	r23, Z+1	; 0x01
    462e:	82 81       	ldd	r24, Z+2	; 0x02
    4630:	93 81       	ldd	r25, Z+3	; 0x03
    4632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4636:	dc 01       	movw	r26, r24
    4638:	cb 01       	movw	r24, r22
    463a:	f8 01       	movw	r30, r16
    463c:	91 83       	std	Z+1, r25	; 0x01
    463e:	80 83       	st	Z, r24
    4640:	de 01       	movw	r26, r28
    4642:	a9 5b       	subi	r26, 0xB9	; 185
    4644:	bf 4f       	sbci	r27, 0xFF	; 255
    4646:	fe 01       	movw	r30, r28
    4648:	e5 5b       	subi	r30, 0xB5	; 181
    464a:	ff 4f       	sbci	r31, 0xFF	; 255
    464c:	80 81       	ld	r24, Z
    464e:	91 81       	ldd	r25, Z+1	; 0x01
    4650:	8d 93       	st	X+, r24
    4652:	9c 93       	st	X, r25
    4654:	fe 01       	movw	r30, r28
    4656:	e9 5b       	subi	r30, 0xB9	; 185
    4658:	ff 4f       	sbci	r31, 0xFF	; 255
    465a:	80 81       	ld	r24, Z
    465c:	91 81       	ldd	r25, Z+1	; 0x01
    465e:	01 97       	sbiw	r24, 0x01	; 1
    4660:	f1 f7       	brne	.-4      	; 0x465e <TheSafe_vidCheck_Password+0xff0>
    4662:	fe 01       	movw	r30, r28
    4664:	e9 5b       	subi	r30, 0xB9	; 185
    4666:	ff 4f       	sbci	r31, 0xFF	; 255
    4668:	91 83       	std	Z+1, r25	; 0x01
    466a:	80 83       	st	Z, r24
				_delay_ms(500);
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    466c:	90 91 ee 00 	lds	r25, 0x00EE
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	69 2f       	mov	r22, r25
    4674:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("*");
    4678:	87 e7       	ldi	r24, 0x77	; 119
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				if (CheckPassLcdLocation == 11)
    4680:	80 91 ee 00 	lds	r24, 0x00EE
    4684:	8b 30       	cpi	r24, 0x0B	; 11
    4686:	89 f4       	brne	.+34     	; 0x46aa <TheSafe_vidCheck_Password+0x103c>
				{
					Check_Password = key ;
    4688:	9e 01       	movw	r18, r28
    468a:	27 54       	subi	r18, 0x47	; 71
    468c:	3f 4f       	sbci	r19, 0xFF	; 255
    468e:	fe 01       	movw	r30, r28
    4690:	e8 54       	subi	r30, 0x48	; 72
    4692:	ff 4f       	sbci	r31, 0xFF	; 255
    4694:	80 81       	ld	r24, Z
    4696:	88 2f       	mov	r24, r24
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	a0 e0       	ldi	r26, 0x00	; 0
    469c:	b0 e0       	ldi	r27, 0x00	; 0
    469e:	f9 01       	movw	r30, r18
    46a0:	80 83       	st	Z, r24
    46a2:	91 83       	std	Z+1, r25	; 0x01
    46a4:	a2 83       	std	Z+2, r26	; 0x02
    46a6:	b3 83       	std	Z+3, r27	; 0x03
    46a8:	95 c2       	rjmp	.+1322   	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
				else
				{
					Check_Password = (Check_Password * 10) + key ;
    46aa:	fe 01       	movw	r30, r28
    46ac:	e7 54       	subi	r30, 0x47	; 71
    46ae:	ff 4f       	sbci	r31, 0xFF	; 255
    46b0:	80 81       	ld	r24, Z
    46b2:	91 81       	ldd	r25, Z+1	; 0x01
    46b4:	a2 81       	ldd	r26, Z+2	; 0x02
    46b6:	b3 81       	ldd	r27, Z+3	; 0x03
    46b8:	2a e0       	ldi	r18, 0x0A	; 10
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	40 e0       	ldi	r20, 0x00	; 0
    46be:	50 e0       	ldi	r21, 0x00	; 0
    46c0:	bc 01       	movw	r22, r24
    46c2:	cd 01       	movw	r24, r26
    46c4:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    46c8:	9b 01       	movw	r18, r22
    46ca:	ac 01       	movw	r20, r24
    46cc:	fe 01       	movw	r30, r28
    46ce:	e8 54       	subi	r30, 0x48	; 72
    46d0:	ff 4f       	sbci	r31, 0xFF	; 255
    46d2:	80 81       	ld	r24, Z
    46d4:	88 2f       	mov	r24, r24
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	a0 e0       	ldi	r26, 0x00	; 0
    46da:	b0 e0       	ldi	r27, 0x00	; 0
    46dc:	fe 01       	movw	r30, r28
    46de:	e7 54       	subi	r30, 0x47	; 71
    46e0:	ff 4f       	sbci	r31, 0xFF	; 255
    46e2:	82 0f       	add	r24, r18
    46e4:	93 1f       	adc	r25, r19
    46e6:	a4 1f       	adc	r26, r20
    46e8:	b5 1f       	adc	r27, r21
    46ea:	80 83       	st	Z, r24
    46ec:	91 83       	std	Z+1, r25	; 0x01
    46ee:	a2 83       	std	Z+2, r26	; 0x02
    46f0:	b3 83       	std	Z+3, r27	; 0x03
    46f2:	70 c2       	rjmp	.+1248   	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
			}
			else if(key == 7)
    46f4:	fe 01       	movw	r30, r28
    46f6:	e8 54       	subi	r30, 0x48	; 72
    46f8:	ff 4f       	sbci	r31, 0xFF	; 255
    46fa:	80 81       	ld	r24, Z
    46fc:	87 30       	cpi	r24, 0x07	; 7
    46fe:	09 f0       	breq	.+2      	; 0x4702 <TheSafe_vidCheck_Password+0x1094>
    4700:	d6 c0       	rjmp	.+428    	; 0x48ae <TheSafe_vidCheck_Password+0x1240>
			{
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    4702:	90 91 ee 00 	lds	r25, 0x00EE
    4706:	80 e0       	ldi	r24, 0x00	; 0
    4708:	69 2f       	mov	r22, r25
    470a:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    470e:	fe 01       	movw	r30, r28
    4710:	e8 54       	subi	r30, 0x48	; 72
    4712:	ff 4f       	sbci	r31, 0xFF	; 255
    4714:	80 81       	ld	r24, Z
    4716:	80 5d       	subi	r24, 0xD0	; 208
    4718:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    471c:	fe 01       	movw	r30, r28
    471e:	ed 5b       	subi	r30, 0xBD	; 189
    4720:	ff 4f       	sbci	r31, 0xFF	; 255
    4722:	80 e0       	ldi	r24, 0x00	; 0
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	aa ef       	ldi	r26, 0xFA	; 250
    4728:	b3 e4       	ldi	r27, 0x43	; 67
    472a:	80 83       	st	Z, r24
    472c:	91 83       	std	Z+1, r25	; 0x01
    472e:	a2 83       	std	Z+2, r26	; 0x02
    4730:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4732:	8e 01       	movw	r16, r28
    4734:	01 5c       	subi	r16, 0xC1	; 193
    4736:	1f 4f       	sbci	r17, 0xFF	; 255
    4738:	fe 01       	movw	r30, r28
    473a:	ed 5b       	subi	r30, 0xBD	; 189
    473c:	ff 4f       	sbci	r31, 0xFF	; 255
    473e:	60 81       	ld	r22, Z
    4740:	71 81       	ldd	r23, Z+1	; 0x01
    4742:	82 81       	ldd	r24, Z+2	; 0x02
    4744:	93 81       	ldd	r25, Z+3	; 0x03
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	4a ef       	ldi	r20, 0xFA	; 250
    474c:	54 e4       	ldi	r21, 0x44	; 68
    474e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4752:	dc 01       	movw	r26, r24
    4754:	cb 01       	movw	r24, r22
    4756:	f8 01       	movw	r30, r16
    4758:	80 83       	st	Z, r24
    475a:	91 83       	std	Z+1, r25	; 0x01
    475c:	a2 83       	std	Z+2, r26	; 0x02
    475e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4760:	fe 01       	movw	r30, r28
    4762:	ff 96       	adiw	r30, 0x3f	; 63
    4764:	60 81       	ld	r22, Z
    4766:	71 81       	ldd	r23, Z+1	; 0x01
    4768:	82 81       	ldd	r24, Z+2	; 0x02
    476a:	93 81       	ldd	r25, Z+3	; 0x03
    476c:	20 e0       	ldi	r18, 0x00	; 0
    476e:	30 e0       	ldi	r19, 0x00	; 0
    4770:	40 e8       	ldi	r20, 0x80	; 128
    4772:	5f e3       	ldi	r21, 0x3F	; 63
    4774:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4778:	88 23       	and	r24, r24
    477a:	2c f4       	brge	.+10     	; 0x4786 <TheSafe_vidCheck_Password+0x1118>
		__ticks = 1;
    477c:	81 e0       	ldi	r24, 0x01	; 1
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	9e af       	std	Y+62, r25	; 0x3e
    4782:	8d af       	std	Y+61, r24	; 0x3d
    4784:	46 c0       	rjmp	.+140    	; 0x4812 <TheSafe_vidCheck_Password+0x11a4>
	else if (__tmp > 65535)
    4786:	fe 01       	movw	r30, r28
    4788:	ff 96       	adiw	r30, 0x3f	; 63
    478a:	60 81       	ld	r22, Z
    478c:	71 81       	ldd	r23, Z+1	; 0x01
    478e:	82 81       	ldd	r24, Z+2	; 0x02
    4790:	93 81       	ldd	r25, Z+3	; 0x03
    4792:	20 e0       	ldi	r18, 0x00	; 0
    4794:	3f ef       	ldi	r19, 0xFF	; 255
    4796:	4f e7       	ldi	r20, 0x7F	; 127
    4798:	57 e4       	ldi	r21, 0x47	; 71
    479a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    479e:	18 16       	cp	r1, r24
    47a0:	64 f5       	brge	.+88     	; 0x47fa <TheSafe_vidCheck_Password+0x118c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47a2:	fe 01       	movw	r30, r28
    47a4:	ed 5b       	subi	r30, 0xBD	; 189
    47a6:	ff 4f       	sbci	r31, 0xFF	; 255
    47a8:	60 81       	ld	r22, Z
    47aa:	71 81       	ldd	r23, Z+1	; 0x01
    47ac:	82 81       	ldd	r24, Z+2	; 0x02
    47ae:	93 81       	ldd	r25, Z+3	; 0x03
    47b0:	20 e0       	ldi	r18, 0x00	; 0
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	40 e2       	ldi	r20, 0x20	; 32
    47b6:	51 e4       	ldi	r21, 0x41	; 65
    47b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47bc:	dc 01       	movw	r26, r24
    47be:	cb 01       	movw	r24, r22
    47c0:	bc 01       	movw	r22, r24
    47c2:	cd 01       	movw	r24, r26
    47c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47c8:	dc 01       	movw	r26, r24
    47ca:	cb 01       	movw	r24, r22
    47cc:	9e af       	std	Y+62, r25	; 0x3e
    47ce:	8d af       	std	Y+61, r24	; 0x3d
    47d0:	0f c0       	rjmp	.+30     	; 0x47f0 <TheSafe_vidCheck_Password+0x1182>
    47d2:	88 ec       	ldi	r24, 0xC8	; 200
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	9c af       	std	Y+60, r25	; 0x3c
    47d8:	8b af       	std	Y+59, r24	; 0x3b
    47da:	8b ad       	ldd	r24, Y+59	; 0x3b
    47dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    47de:	01 97       	sbiw	r24, 0x01	; 1
    47e0:	f1 f7       	brne	.-4      	; 0x47de <TheSafe_vidCheck_Password+0x1170>
    47e2:	9c af       	std	Y+60, r25	; 0x3c
    47e4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    47e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    47ea:	01 97       	sbiw	r24, 0x01	; 1
    47ec:	9e af       	std	Y+62, r25	; 0x3e
    47ee:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    47f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    47f4:	00 97       	sbiw	r24, 0x00	; 0
    47f6:	69 f7       	brne	.-38     	; 0x47d2 <TheSafe_vidCheck_Password+0x1164>
    47f8:	16 c0       	rjmp	.+44     	; 0x4826 <TheSafe_vidCheck_Password+0x11b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47fa:	fe 01       	movw	r30, r28
    47fc:	ff 96       	adiw	r30, 0x3f	; 63
    47fe:	60 81       	ld	r22, Z
    4800:	71 81       	ldd	r23, Z+1	; 0x01
    4802:	82 81       	ldd	r24, Z+2	; 0x02
    4804:	93 81       	ldd	r25, Z+3	; 0x03
    4806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    480a:	dc 01       	movw	r26, r24
    480c:	cb 01       	movw	r24, r22
    480e:	9e af       	std	Y+62, r25	; 0x3e
    4810:	8d af       	std	Y+61, r24	; 0x3d
    4812:	8d ad       	ldd	r24, Y+61	; 0x3d
    4814:	9e ad       	ldd	r25, Y+62	; 0x3e
    4816:	9a af       	std	Y+58, r25	; 0x3a
    4818:	89 af       	std	Y+57, r24	; 0x39
    481a:	89 ad       	ldd	r24, Y+57	; 0x39
    481c:	9a ad       	ldd	r25, Y+58	; 0x3a
    481e:	01 97       	sbiw	r24, 0x01	; 1
    4820:	f1 f7       	brne	.-4      	; 0x481e <TheSafe_vidCheck_Password+0x11b0>
    4822:	9a af       	std	Y+58, r25	; 0x3a
    4824:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(500);
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    4826:	90 91 ee 00 	lds	r25, 0x00EE
    482a:	80 e0       	ldi	r24, 0x00	; 0
    482c:	69 2f       	mov	r22, r25
    482e:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("*");
    4832:	87 e7       	ldi	r24, 0x77	; 119
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				if (CheckPassLcdLocation == 11)
    483a:	80 91 ee 00 	lds	r24, 0x00EE
    483e:	8b 30       	cpi	r24, 0x0B	; 11
    4840:	89 f4       	brne	.+34     	; 0x4864 <TheSafe_vidCheck_Password+0x11f6>
				{
					Check_Password = key ;
    4842:	9e 01       	movw	r18, r28
    4844:	27 54       	subi	r18, 0x47	; 71
    4846:	3f 4f       	sbci	r19, 0xFF	; 255
    4848:	fe 01       	movw	r30, r28
    484a:	e8 54       	subi	r30, 0x48	; 72
    484c:	ff 4f       	sbci	r31, 0xFF	; 255
    484e:	80 81       	ld	r24, Z
    4850:	88 2f       	mov	r24, r24
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	a0 e0       	ldi	r26, 0x00	; 0
    4856:	b0 e0       	ldi	r27, 0x00	; 0
    4858:	f9 01       	movw	r30, r18
    485a:	80 83       	st	Z, r24
    485c:	91 83       	std	Z+1, r25	; 0x01
    485e:	a2 83       	std	Z+2, r26	; 0x02
    4860:	b3 83       	std	Z+3, r27	; 0x03
    4862:	b8 c1       	rjmp	.+880    	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
				else
				{
					Check_Password = (Check_Password * 10) + key ;
    4864:	fe 01       	movw	r30, r28
    4866:	e7 54       	subi	r30, 0x47	; 71
    4868:	ff 4f       	sbci	r31, 0xFF	; 255
    486a:	80 81       	ld	r24, Z
    486c:	91 81       	ldd	r25, Z+1	; 0x01
    486e:	a2 81       	ldd	r26, Z+2	; 0x02
    4870:	b3 81       	ldd	r27, Z+3	; 0x03
    4872:	2a e0       	ldi	r18, 0x0A	; 10
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	40 e0       	ldi	r20, 0x00	; 0
    4878:	50 e0       	ldi	r21, 0x00	; 0
    487a:	bc 01       	movw	r22, r24
    487c:	cd 01       	movw	r24, r26
    487e:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    4882:	9b 01       	movw	r18, r22
    4884:	ac 01       	movw	r20, r24
    4886:	fe 01       	movw	r30, r28
    4888:	e8 54       	subi	r30, 0x48	; 72
    488a:	ff 4f       	sbci	r31, 0xFF	; 255
    488c:	80 81       	ld	r24, Z
    488e:	88 2f       	mov	r24, r24
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	a0 e0       	ldi	r26, 0x00	; 0
    4894:	b0 e0       	ldi	r27, 0x00	; 0
    4896:	fe 01       	movw	r30, r28
    4898:	e7 54       	subi	r30, 0x47	; 71
    489a:	ff 4f       	sbci	r31, 0xFF	; 255
    489c:	82 0f       	add	r24, r18
    489e:	93 1f       	adc	r25, r19
    48a0:	a4 1f       	adc	r26, r20
    48a2:	b5 1f       	adc	r27, r21
    48a4:	80 83       	st	Z, r24
    48a6:	91 83       	std	Z+1, r25	; 0x01
    48a8:	a2 83       	std	Z+2, r26	; 0x02
    48aa:	b3 83       	std	Z+3, r27	; 0x03
    48ac:	93 c1       	rjmp	.+806    	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
			}
			else if(key == 8)
    48ae:	fe 01       	movw	r30, r28
    48b0:	e8 54       	subi	r30, 0x48	; 72
    48b2:	ff 4f       	sbci	r31, 0xFF	; 255
    48b4:	80 81       	ld	r24, Z
    48b6:	88 30       	cpi	r24, 0x08	; 8
    48b8:	09 f0       	breq	.+2      	; 0x48bc <TheSafe_vidCheck_Password+0x124e>
    48ba:	c3 c0       	rjmp	.+390    	; 0x4a42 <TheSafe_vidCheck_Password+0x13d4>
			{
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    48bc:	90 91 ee 00 	lds	r25, 0x00EE
    48c0:	80 e0       	ldi	r24, 0x00	; 0
    48c2:	69 2f       	mov	r22, r25
    48c4:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    48c8:	fe 01       	movw	r30, r28
    48ca:	e8 54       	subi	r30, 0x48	; 72
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	80 81       	ld	r24, Z
    48d0:	80 5d       	subi	r24, 0xD0	; 208
    48d2:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    48d6:	80 e0       	ldi	r24, 0x00	; 0
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	aa ef       	ldi	r26, 0xFA	; 250
    48dc:	b3 e4       	ldi	r27, 0x43	; 67
    48de:	8d ab       	std	Y+53, r24	; 0x35
    48e0:	9e ab       	std	Y+54, r25	; 0x36
    48e2:	af ab       	std	Y+55, r26	; 0x37
    48e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48e6:	6d a9       	ldd	r22, Y+53	; 0x35
    48e8:	7e a9       	ldd	r23, Y+54	; 0x36
    48ea:	8f a9       	ldd	r24, Y+55	; 0x37
    48ec:	98 ad       	ldd	r25, Y+56	; 0x38
    48ee:	20 e0       	ldi	r18, 0x00	; 0
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	4a ef       	ldi	r20, 0xFA	; 250
    48f4:	54 e4       	ldi	r21, 0x44	; 68
    48f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48fa:	dc 01       	movw	r26, r24
    48fc:	cb 01       	movw	r24, r22
    48fe:	89 ab       	std	Y+49, r24	; 0x31
    4900:	9a ab       	std	Y+50, r25	; 0x32
    4902:	ab ab       	std	Y+51, r26	; 0x33
    4904:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4906:	69 a9       	ldd	r22, Y+49	; 0x31
    4908:	7a a9       	ldd	r23, Y+50	; 0x32
    490a:	8b a9       	ldd	r24, Y+51	; 0x33
    490c:	9c a9       	ldd	r25, Y+52	; 0x34
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	40 e8       	ldi	r20, 0x80	; 128
    4914:	5f e3       	ldi	r21, 0x3F	; 63
    4916:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    491a:	88 23       	and	r24, r24
    491c:	2c f4       	brge	.+10     	; 0x4928 <TheSafe_vidCheck_Password+0x12ba>
		__ticks = 1;
    491e:	81 e0       	ldi	r24, 0x01	; 1
    4920:	90 e0       	ldi	r25, 0x00	; 0
    4922:	98 ab       	std	Y+48, r25	; 0x30
    4924:	8f a7       	std	Y+47, r24	; 0x2f
    4926:	3f c0       	rjmp	.+126    	; 0x49a6 <TheSafe_vidCheck_Password+0x1338>
	else if (__tmp > 65535)
    4928:	69 a9       	ldd	r22, Y+49	; 0x31
    492a:	7a a9       	ldd	r23, Y+50	; 0x32
    492c:	8b a9       	ldd	r24, Y+51	; 0x33
    492e:	9c a9       	ldd	r25, Y+52	; 0x34
    4930:	20 e0       	ldi	r18, 0x00	; 0
    4932:	3f ef       	ldi	r19, 0xFF	; 255
    4934:	4f e7       	ldi	r20, 0x7F	; 127
    4936:	57 e4       	ldi	r21, 0x47	; 71
    4938:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    493c:	18 16       	cp	r1, r24
    493e:	4c f5       	brge	.+82     	; 0x4992 <TheSafe_vidCheck_Password+0x1324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4940:	6d a9       	ldd	r22, Y+53	; 0x35
    4942:	7e a9       	ldd	r23, Y+54	; 0x36
    4944:	8f a9       	ldd	r24, Y+55	; 0x37
    4946:	98 ad       	ldd	r25, Y+56	; 0x38
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	40 e2       	ldi	r20, 0x20	; 32
    494e:	51 e4       	ldi	r21, 0x41	; 65
    4950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4954:	dc 01       	movw	r26, r24
    4956:	cb 01       	movw	r24, r22
    4958:	bc 01       	movw	r22, r24
    495a:	cd 01       	movw	r24, r26
    495c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4960:	dc 01       	movw	r26, r24
    4962:	cb 01       	movw	r24, r22
    4964:	98 ab       	std	Y+48, r25	; 0x30
    4966:	8f a7       	std	Y+47, r24	; 0x2f
    4968:	0f c0       	rjmp	.+30     	; 0x4988 <TheSafe_vidCheck_Password+0x131a>
    496a:	88 ec       	ldi	r24, 0xC8	; 200
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	9e a7       	std	Y+46, r25	; 0x2e
    4970:	8d a7       	std	Y+45, r24	; 0x2d
    4972:	8d a5       	ldd	r24, Y+45	; 0x2d
    4974:	9e a5       	ldd	r25, Y+46	; 0x2e
    4976:	01 97       	sbiw	r24, 0x01	; 1
    4978:	f1 f7       	brne	.-4      	; 0x4976 <TheSafe_vidCheck_Password+0x1308>
    497a:	9e a7       	std	Y+46, r25	; 0x2e
    497c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    497e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4980:	98 a9       	ldd	r25, Y+48	; 0x30
    4982:	01 97       	sbiw	r24, 0x01	; 1
    4984:	98 ab       	std	Y+48, r25	; 0x30
    4986:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4988:	8f a5       	ldd	r24, Y+47	; 0x2f
    498a:	98 a9       	ldd	r25, Y+48	; 0x30
    498c:	00 97       	sbiw	r24, 0x00	; 0
    498e:	69 f7       	brne	.-38     	; 0x496a <TheSafe_vidCheck_Password+0x12fc>
    4990:	14 c0       	rjmp	.+40     	; 0x49ba <TheSafe_vidCheck_Password+0x134c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4992:	69 a9       	ldd	r22, Y+49	; 0x31
    4994:	7a a9       	ldd	r23, Y+50	; 0x32
    4996:	8b a9       	ldd	r24, Y+51	; 0x33
    4998:	9c a9       	ldd	r25, Y+52	; 0x34
    499a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    499e:	dc 01       	movw	r26, r24
    49a0:	cb 01       	movw	r24, r22
    49a2:	98 ab       	std	Y+48, r25	; 0x30
    49a4:	8f a7       	std	Y+47, r24	; 0x2f
    49a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    49a8:	98 a9       	ldd	r25, Y+48	; 0x30
    49aa:	9c a7       	std	Y+44, r25	; 0x2c
    49ac:	8b a7       	std	Y+43, r24	; 0x2b
    49ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    49b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    49b2:	01 97       	sbiw	r24, 0x01	; 1
    49b4:	f1 f7       	brne	.-4      	; 0x49b2 <TheSafe_vidCheck_Password+0x1344>
    49b6:	9c a7       	std	Y+44, r25	; 0x2c
    49b8:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    49ba:	90 91 ee 00 	lds	r25, 0x00EE
    49be:	80 e0       	ldi	r24, 0x00	; 0
    49c0:	69 2f       	mov	r22, r25
    49c2:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("*");
    49c6:	87 e7       	ldi	r24, 0x77	; 119
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				if (CheckPassLcdLocation == 11)
    49ce:	80 91 ee 00 	lds	r24, 0x00EE
    49d2:	8b 30       	cpi	r24, 0x0B	; 11
    49d4:	89 f4       	brne	.+34     	; 0x49f8 <TheSafe_vidCheck_Password+0x138a>
				{
					Check_Password = key ;
    49d6:	9e 01       	movw	r18, r28
    49d8:	27 54       	subi	r18, 0x47	; 71
    49da:	3f 4f       	sbci	r19, 0xFF	; 255
    49dc:	fe 01       	movw	r30, r28
    49de:	e8 54       	subi	r30, 0x48	; 72
    49e0:	ff 4f       	sbci	r31, 0xFF	; 255
    49e2:	80 81       	ld	r24, Z
    49e4:	88 2f       	mov	r24, r24
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	a0 e0       	ldi	r26, 0x00	; 0
    49ea:	b0 e0       	ldi	r27, 0x00	; 0
    49ec:	f9 01       	movw	r30, r18
    49ee:	80 83       	st	Z, r24
    49f0:	91 83       	std	Z+1, r25	; 0x01
    49f2:	a2 83       	std	Z+2, r26	; 0x02
    49f4:	b3 83       	std	Z+3, r27	; 0x03
    49f6:	ee c0       	rjmp	.+476    	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
				else
				{
					Check_Password = (Check_Password * 10) + key ;
    49f8:	fe 01       	movw	r30, r28
    49fa:	e7 54       	subi	r30, 0x47	; 71
    49fc:	ff 4f       	sbci	r31, 0xFF	; 255
    49fe:	80 81       	ld	r24, Z
    4a00:	91 81       	ldd	r25, Z+1	; 0x01
    4a02:	a2 81       	ldd	r26, Z+2	; 0x02
    4a04:	b3 81       	ldd	r27, Z+3	; 0x03
    4a06:	2a e0       	ldi	r18, 0x0A	; 10
    4a08:	30 e0       	ldi	r19, 0x00	; 0
    4a0a:	40 e0       	ldi	r20, 0x00	; 0
    4a0c:	50 e0       	ldi	r21, 0x00	; 0
    4a0e:	bc 01       	movw	r22, r24
    4a10:	cd 01       	movw	r24, r26
    4a12:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    4a16:	9b 01       	movw	r18, r22
    4a18:	ac 01       	movw	r20, r24
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	e8 54       	subi	r30, 0x48	; 72
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	80 81       	ld	r24, Z
    4a22:	88 2f       	mov	r24, r24
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	a0 e0       	ldi	r26, 0x00	; 0
    4a28:	b0 e0       	ldi	r27, 0x00	; 0
    4a2a:	fe 01       	movw	r30, r28
    4a2c:	e7 54       	subi	r30, 0x47	; 71
    4a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a30:	82 0f       	add	r24, r18
    4a32:	93 1f       	adc	r25, r19
    4a34:	a4 1f       	adc	r26, r20
    4a36:	b5 1f       	adc	r27, r21
    4a38:	80 83       	st	Z, r24
    4a3a:	91 83       	std	Z+1, r25	; 0x01
    4a3c:	a2 83       	std	Z+2, r26	; 0x02
    4a3e:	b3 83       	std	Z+3, r27	; 0x03
    4a40:	c9 c0       	rjmp	.+402    	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
			}
			else if(key == 9)
    4a42:	fe 01       	movw	r30, r28
    4a44:	e8 54       	subi	r30, 0x48	; 72
    4a46:	ff 4f       	sbci	r31, 0xFF	; 255
    4a48:	80 81       	ld	r24, Z
    4a4a:	89 30       	cpi	r24, 0x09	; 9
    4a4c:	09 f0       	breq	.+2      	; 0x4a50 <TheSafe_vidCheck_Password+0x13e2>
    4a4e:	c2 c0       	rjmp	.+388    	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
			{
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    4a50:	90 91 ee 00 	lds	r25, 0x00EE
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	69 2f       	mov	r22, r25
    4a58:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_voidSendData(key + '0');
    4a5c:	fe 01       	movw	r30, r28
    4a5e:	e8 54       	subi	r30, 0x48	; 72
    4a60:	ff 4f       	sbci	r31, 0xFF	; 255
    4a62:	80 81       	ld	r24, Z
    4a64:	80 5d       	subi	r24, 0xD0	; 208
    4a66:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	aa ef       	ldi	r26, 0xFA	; 250
    4a70:	b3 e4       	ldi	r27, 0x43	; 67
    4a72:	8f a3       	std	Y+39, r24	; 0x27
    4a74:	98 a7       	std	Y+40, r25	; 0x28
    4a76:	a9 a7       	std	Y+41, r26	; 0x29
    4a78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a7a:	6f a1       	ldd	r22, Y+39	; 0x27
    4a7c:	78 a5       	ldd	r23, Y+40	; 0x28
    4a7e:	89 a5       	ldd	r24, Y+41	; 0x29
    4a80:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a82:	20 e0       	ldi	r18, 0x00	; 0
    4a84:	30 e0       	ldi	r19, 0x00	; 0
    4a86:	4a ef       	ldi	r20, 0xFA	; 250
    4a88:	54 e4       	ldi	r21, 0x44	; 68
    4a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a8e:	dc 01       	movw	r26, r24
    4a90:	cb 01       	movw	r24, r22
    4a92:	8b a3       	std	Y+35, r24	; 0x23
    4a94:	9c a3       	std	Y+36, r25	; 0x24
    4a96:	ad a3       	std	Y+37, r26	; 0x25
    4a98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a9a:	6b a1       	ldd	r22, Y+35	; 0x23
    4a9c:	7c a1       	ldd	r23, Y+36	; 0x24
    4a9e:	8d a1       	ldd	r24, Y+37	; 0x25
    4aa0:	9e a1       	ldd	r25, Y+38	; 0x26
    4aa2:	20 e0       	ldi	r18, 0x00	; 0
    4aa4:	30 e0       	ldi	r19, 0x00	; 0
    4aa6:	40 e8       	ldi	r20, 0x80	; 128
    4aa8:	5f e3       	ldi	r21, 0x3F	; 63
    4aaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4aae:	88 23       	and	r24, r24
    4ab0:	2c f4       	brge	.+10     	; 0x4abc <TheSafe_vidCheck_Password+0x144e>
		__ticks = 1;
    4ab2:	81 e0       	ldi	r24, 0x01	; 1
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	9a a3       	std	Y+34, r25	; 0x22
    4ab8:	89 a3       	std	Y+33, r24	; 0x21
    4aba:	3f c0       	rjmp	.+126    	; 0x4b3a <TheSafe_vidCheck_Password+0x14cc>
	else if (__tmp > 65535)
    4abc:	6b a1       	ldd	r22, Y+35	; 0x23
    4abe:	7c a1       	ldd	r23, Y+36	; 0x24
    4ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    4ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    4ac4:	20 e0       	ldi	r18, 0x00	; 0
    4ac6:	3f ef       	ldi	r19, 0xFF	; 255
    4ac8:	4f e7       	ldi	r20, 0x7F	; 127
    4aca:	57 e4       	ldi	r21, 0x47	; 71
    4acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4ad0:	18 16       	cp	r1, r24
    4ad2:	4c f5       	brge	.+82     	; 0x4b26 <TheSafe_vidCheck_Password+0x14b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ad4:	6f a1       	ldd	r22, Y+39	; 0x27
    4ad6:	78 a5       	ldd	r23, Y+40	; 0x28
    4ad8:	89 a5       	ldd	r24, Y+41	; 0x29
    4ada:	9a a5       	ldd	r25, Y+42	; 0x2a
    4adc:	20 e0       	ldi	r18, 0x00	; 0
    4ade:	30 e0       	ldi	r19, 0x00	; 0
    4ae0:	40 e2       	ldi	r20, 0x20	; 32
    4ae2:	51 e4       	ldi	r21, 0x41	; 65
    4ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae8:	dc 01       	movw	r26, r24
    4aea:	cb 01       	movw	r24, r22
    4aec:	bc 01       	movw	r22, r24
    4aee:	cd 01       	movw	r24, r26
    4af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af4:	dc 01       	movw	r26, r24
    4af6:	cb 01       	movw	r24, r22
    4af8:	9a a3       	std	Y+34, r25	; 0x22
    4afa:	89 a3       	std	Y+33, r24	; 0x21
    4afc:	0f c0       	rjmp	.+30     	; 0x4b1c <TheSafe_vidCheck_Password+0x14ae>
    4afe:	88 ec       	ldi	r24, 0xC8	; 200
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	98 a3       	std	Y+32, r25	; 0x20
    4b04:	8f 8f       	std	Y+31, r24	; 0x1f
    4b06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b08:	98 a1       	ldd	r25, Y+32	; 0x20
    4b0a:	01 97       	sbiw	r24, 0x01	; 1
    4b0c:	f1 f7       	brne	.-4      	; 0x4b0a <TheSafe_vidCheck_Password+0x149c>
    4b0e:	98 a3       	std	Y+32, r25	; 0x20
    4b10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b12:	89 a1       	ldd	r24, Y+33	; 0x21
    4b14:	9a a1       	ldd	r25, Y+34	; 0x22
    4b16:	01 97       	sbiw	r24, 0x01	; 1
    4b18:	9a a3       	std	Y+34, r25	; 0x22
    4b1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b1c:	89 a1       	ldd	r24, Y+33	; 0x21
    4b1e:	9a a1       	ldd	r25, Y+34	; 0x22
    4b20:	00 97       	sbiw	r24, 0x00	; 0
    4b22:	69 f7       	brne	.-38     	; 0x4afe <TheSafe_vidCheck_Password+0x1490>
    4b24:	14 c0       	rjmp	.+40     	; 0x4b4e <TheSafe_vidCheck_Password+0x14e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b26:	6b a1       	ldd	r22, Y+35	; 0x23
    4b28:	7c a1       	ldd	r23, Y+36	; 0x24
    4b2a:	8d a1       	ldd	r24, Y+37	; 0x25
    4b2c:	9e a1       	ldd	r25, Y+38	; 0x26
    4b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b32:	dc 01       	movw	r26, r24
    4b34:	cb 01       	movw	r24, r22
    4b36:	9a a3       	std	Y+34, r25	; 0x22
    4b38:	89 a3       	std	Y+33, r24	; 0x21
    4b3a:	89 a1       	ldd	r24, Y+33	; 0x21
    4b3c:	9a a1       	ldd	r25, Y+34	; 0x22
    4b3e:	9e 8f       	std	Y+30, r25	; 0x1e
    4b40:	8d 8f       	std	Y+29, r24	; 0x1d
    4b42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b46:	01 97       	sbiw	r24, 0x01	; 1
    4b48:	f1 f7       	brne	.-4      	; 0x4b46 <TheSafe_vidCheck_Password+0x14d8>
    4b4a:	9e 8f       	std	Y+30, r25	; 0x1e
    4b4c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				CLCD_GoToXY(0,CheckPassLcdLocation) ;
    4b4e:	90 91 ee 00 	lds	r25, 0x00EE
    4b52:	80 e0       	ldi	r24, 0x00	; 0
    4b54:	69 2f       	mov	r22, r25
    4b56:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("*");
    4b5a:	87 e7       	ldi	r24, 0x77	; 119
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				if (CheckPassLcdLocation == 11)
    4b62:	80 91 ee 00 	lds	r24, 0x00EE
    4b66:	8b 30       	cpi	r24, 0x0B	; 11
    4b68:	89 f4       	brne	.+34     	; 0x4b8c <TheSafe_vidCheck_Password+0x151e>
				{
					Check_Password = key ;
    4b6a:	9e 01       	movw	r18, r28
    4b6c:	27 54       	subi	r18, 0x47	; 71
    4b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b70:	fe 01       	movw	r30, r28
    4b72:	e8 54       	subi	r30, 0x48	; 72
    4b74:	ff 4f       	sbci	r31, 0xFF	; 255
    4b76:	80 81       	ld	r24, Z
    4b78:	88 2f       	mov	r24, r24
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	a0 e0       	ldi	r26, 0x00	; 0
    4b7e:	b0 e0       	ldi	r27, 0x00	; 0
    4b80:	f9 01       	movw	r30, r18
    4b82:	80 83       	st	Z, r24
    4b84:	91 83       	std	Z+1, r25	; 0x01
    4b86:	a2 83       	std	Z+2, r26	; 0x02
    4b88:	b3 83       	std	Z+3, r27	; 0x03
    4b8a:	24 c0       	rjmp	.+72     	; 0x4bd4 <TheSafe_vidCheck_Password+0x1566>
				}
				else
				{
					Check_Password = (Check_Password * 10) + key ;
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	e7 54       	subi	r30, 0x47	; 71
    4b90:	ff 4f       	sbci	r31, 0xFF	; 255
    4b92:	80 81       	ld	r24, Z
    4b94:	91 81       	ldd	r25, Z+1	; 0x01
    4b96:	a2 81       	ldd	r26, Z+2	; 0x02
    4b98:	b3 81       	ldd	r27, Z+3	; 0x03
    4b9a:	2a e0       	ldi	r18, 0x0A	; 10
    4b9c:	30 e0       	ldi	r19, 0x00	; 0
    4b9e:	40 e0       	ldi	r20, 0x00	; 0
    4ba0:	50 e0       	ldi	r21, 0x00	; 0
    4ba2:	bc 01       	movw	r22, r24
    4ba4:	cd 01       	movw	r24, r26
    4ba6:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__mulsi3>
    4baa:	9b 01       	movw	r18, r22
    4bac:	ac 01       	movw	r20, r24
    4bae:	fe 01       	movw	r30, r28
    4bb0:	e8 54       	subi	r30, 0x48	; 72
    4bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb4:	80 81       	ld	r24, Z
    4bb6:	88 2f       	mov	r24, r24
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	a0 e0       	ldi	r26, 0x00	; 0
    4bbc:	b0 e0       	ldi	r27, 0x00	; 0
    4bbe:	fe 01       	movw	r30, r28
    4bc0:	e7 54       	subi	r30, 0x47	; 71
    4bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc4:	82 0f       	add	r24, r18
    4bc6:	93 1f       	adc	r25, r19
    4bc8:	a4 1f       	adc	r26, r20
    4bca:	b5 1f       	adc	r27, r21
    4bcc:	80 83       	st	Z, r24
    4bce:	91 83       	std	Z+1, r25	; 0x01
    4bd0:	a2 83       	std	Z+2, r26	; 0x02
    4bd2:	b3 83       	std	Z+3, r27	; 0x03
				}
			}

			CheckPassLcdLocation ++ ;
    4bd4:	80 91 ee 00 	lds	r24, 0x00EE
    4bd8:	8f 5f       	subi	r24, 0xFF	; 255
    4bda:	80 93 ee 00 	sts	0x00EE, r24
	CLCD_voidSendCommand(1);
	CLCD_vidSendString("Enter Pass:");

	while (1)
	{
		while (CheckPassLcdLocation <=14)
    4bde:	80 91 ee 00 	lds	r24, 0x00EE
    4be2:	8f 30       	cpi	r24, 0x0F	; 15
    4be4:	10 f4       	brcc	.+4      	; 0x4bea <TheSafe_vidCheck_Password+0x157c>
    4be6:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <TheSafe_vidCheck_Password+0x2c>
				}
			}

			CheckPassLcdLocation ++ ;
		}
		if (Check_Password == Password)
    4bea:	20 91 fa 00 	lds	r18, 0x00FA
    4bee:	30 91 fb 00 	lds	r19, 0x00FB
    4bf2:	40 91 fc 00 	lds	r20, 0x00FC
    4bf6:	50 91 fd 00 	lds	r21, 0x00FD
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	e7 54       	subi	r30, 0x47	; 71
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	80 81       	ld	r24, Z
    4c02:	91 81       	ldd	r25, Z+1	; 0x01
    4c04:	a2 81       	ldd	r26, Z+2	; 0x02
    4c06:	b3 81       	ldd	r27, Z+3	; 0x03
    4c08:	82 17       	cp	r24, r18
    4c0a:	93 07       	cpc	r25, r19
    4c0c:	a4 07       	cpc	r26, r20
    4c0e:	b5 07       	cpc	r27, r21
    4c10:	d9 f4       	brne	.+54     	; 0x4c48 <TheSafe_vidCheck_Password+0x15da>
		{
			CLCD_voidSendCommand(1);
    4c12:	81 e0       	ldi	r24, 0x01	; 1
    4c14:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
			CLCD_vidSendString("Right Password");
    4c18:	85 e8       	ldi	r24, 0x85	; 133
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
			CLCD_GoToXY(1,0);
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	60 e0       	ldi	r22, 0x00	; 0
    4c24:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
			CLCD_vidSendString("Safe Opened");
    4c28:	84 e9       	ldi	r24, 0x94	; 148
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				CLCD_voidSendCommand(1);
				CLCD_vidSendString("Enter Pass:");
			}
		}
	}
}
    4c30:	c4 54       	subi	r28, 0x44	; 68
    4c32:	df 4f       	sbci	r29, 0xFF	; 255
    4c34:	0f b6       	in	r0, 0x3f	; 63
    4c36:	f8 94       	cli
    4c38:	de bf       	out	0x3e, r29	; 62
    4c3a:	0f be       	out	0x3f, r0	; 63
    4c3c:	cd bf       	out	0x3d, r28	; 61
    4c3e:	cf 91       	pop	r28
    4c40:	df 91       	pop	r29
    4c42:	1f 91       	pop	r17
    4c44:	0f 91       	pop	r16
    4c46:	08 95       	ret
			CLCD_vidSendString("Safe Opened");
			break ;
		}
		else
		{
			if (NumberOfTries == 1)
    4c48:	80 91 ed 00 	lds	r24, 0x00ED
    4c4c:	81 30       	cpi	r24, 0x01	; 1
    4c4e:	09 f0       	breq	.+2      	; 0x4c52 <TheSafe_vidCheck_Password+0x15e4>
    4c50:	b0 c0       	rjmp	.+352    	; 0x4db2 <TheSafe_vidCheck_Password+0x1744>
			{
				u8 local_u8Seconds = 2 ;
    4c52:	fe 01       	movw	r30, r28
    4c54:	e9 54       	subi	r30, 0x49	; 73
    4c56:	ff 4f       	sbci	r31, 0xFF	; 255
    4c58:	82 e0       	ldi	r24, 0x02	; 2
    4c5a:	80 83       	st	Z, r24
				CLCD_voidSendCommand(1);
    4c5c:	81 e0       	ldi	r24, 0x01	; 1
    4c5e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
				CLCD_vidSendString("Remaining") ;
    4c62:	80 ea       	ldi	r24, 0xA0	; 160
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				CLCD_GoToXY(0 , 13);
    4c6a:	80 e0       	ldi	r24, 0x00	; 0
    4c6c:	6d e0       	ldi	r22, 0x0D	; 13
    4c6e:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("Sec");
    4c72:	8a ea       	ldi	r24, 0xAA	; 170
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				while (1)
				{
					CLCD_GoToXY(0 , 10);
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	6a e0       	ldi	r22, 0x0A	; 10
    4c7e:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
					CLCD_write_Number(local_u8Seconds);
    4c82:	fe 01       	movw	r30, r28
    4c84:	e9 54       	subi	r30, 0x49	; 73
    4c86:	ff 4f       	sbci	r31, 0xFF	; 255
    4c88:	80 81       	ld	r24, Z
    4c8a:	88 2f       	mov	r24, r24
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_write_Number>
    4c92:	80 e0       	ldi	r24, 0x00	; 0
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	aa e7       	ldi	r26, 0x7A	; 122
    4c98:	b4 e4       	ldi	r27, 0x44	; 68
    4c9a:	89 8f       	std	Y+25, r24	; 0x19
    4c9c:	9a 8f       	std	Y+26, r25	; 0x1a
    4c9e:	ab 8f       	std	Y+27, r26	; 0x1b
    4ca0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ca2:	69 8d       	ldd	r22, Y+25	; 0x19
    4ca4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ca8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4caa:	20 e0       	ldi	r18, 0x00	; 0
    4cac:	30 e0       	ldi	r19, 0x00	; 0
    4cae:	4a ef       	ldi	r20, 0xFA	; 250
    4cb0:	54 e4       	ldi	r21, 0x44	; 68
    4cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb6:	dc 01       	movw	r26, r24
    4cb8:	cb 01       	movw	r24, r22
    4cba:	8d 8b       	std	Y+21, r24	; 0x15
    4cbc:	9e 8b       	std	Y+22, r25	; 0x16
    4cbe:	af 8b       	std	Y+23, r26	; 0x17
    4cc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4cc2:	6d 89       	ldd	r22, Y+21	; 0x15
    4cc4:	7e 89       	ldd	r23, Y+22	; 0x16
    4cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    4cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    4cca:	20 e0       	ldi	r18, 0x00	; 0
    4ccc:	30 e0       	ldi	r19, 0x00	; 0
    4cce:	40 e8       	ldi	r20, 0x80	; 128
    4cd0:	5f e3       	ldi	r21, 0x3F	; 63
    4cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cd6:	88 23       	and	r24, r24
    4cd8:	2c f4       	brge	.+10     	; 0x4ce4 <TheSafe_vidCheck_Password+0x1676>
		__ticks = 1;
    4cda:	81 e0       	ldi	r24, 0x01	; 1
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	9c 8b       	std	Y+20, r25	; 0x14
    4ce0:	8b 8b       	std	Y+19, r24	; 0x13
    4ce2:	3f c0       	rjmp	.+126    	; 0x4d62 <TheSafe_vidCheck_Password+0x16f4>
	else if (__tmp > 65535)
    4ce4:	6d 89       	ldd	r22, Y+21	; 0x15
    4ce6:	7e 89       	ldd	r23, Y+22	; 0x16
    4ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    4cea:	98 8d       	ldd	r25, Y+24	; 0x18
    4cec:	20 e0       	ldi	r18, 0x00	; 0
    4cee:	3f ef       	ldi	r19, 0xFF	; 255
    4cf0:	4f e7       	ldi	r20, 0x7F	; 127
    4cf2:	57 e4       	ldi	r21, 0x47	; 71
    4cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4cf8:	18 16       	cp	r1, r24
    4cfa:	4c f5       	brge	.+82     	; 0x4d4e <TheSafe_vidCheck_Password+0x16e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cfc:	69 8d       	ldd	r22, Y+25	; 0x19
    4cfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d04:	20 e0       	ldi	r18, 0x00	; 0
    4d06:	30 e0       	ldi	r19, 0x00	; 0
    4d08:	40 e2       	ldi	r20, 0x20	; 32
    4d0a:	51 e4       	ldi	r21, 0x41	; 65
    4d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d10:	dc 01       	movw	r26, r24
    4d12:	cb 01       	movw	r24, r22
    4d14:	bc 01       	movw	r22, r24
    4d16:	cd 01       	movw	r24, r26
    4d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d1c:	dc 01       	movw	r26, r24
    4d1e:	cb 01       	movw	r24, r22
    4d20:	9c 8b       	std	Y+20, r25	; 0x14
    4d22:	8b 8b       	std	Y+19, r24	; 0x13
    4d24:	0f c0       	rjmp	.+30     	; 0x4d44 <TheSafe_vidCheck_Password+0x16d6>
    4d26:	88 ec       	ldi	r24, 0xC8	; 200
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	9a 8b       	std	Y+18, r25	; 0x12
    4d2c:	89 8b       	std	Y+17, r24	; 0x11
    4d2e:	89 89       	ldd	r24, Y+17	; 0x11
    4d30:	9a 89       	ldd	r25, Y+18	; 0x12
    4d32:	01 97       	sbiw	r24, 0x01	; 1
    4d34:	f1 f7       	brne	.-4      	; 0x4d32 <TheSafe_vidCheck_Password+0x16c4>
    4d36:	9a 8b       	std	Y+18, r25	; 0x12
    4d38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d3c:	9c 89       	ldd	r25, Y+20	; 0x14
    4d3e:	01 97       	sbiw	r24, 0x01	; 1
    4d40:	9c 8b       	std	Y+20, r25	; 0x14
    4d42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d44:	8b 89       	ldd	r24, Y+19	; 0x13
    4d46:	9c 89       	ldd	r25, Y+20	; 0x14
    4d48:	00 97       	sbiw	r24, 0x00	; 0
    4d4a:	69 f7       	brne	.-38     	; 0x4d26 <TheSafe_vidCheck_Password+0x16b8>
    4d4c:	14 c0       	rjmp	.+40     	; 0x4d76 <TheSafe_vidCheck_Password+0x1708>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    4d50:	7e 89       	ldd	r23, Y+22	; 0x16
    4d52:	8f 89       	ldd	r24, Y+23	; 0x17
    4d54:	98 8d       	ldd	r25, Y+24	; 0x18
    4d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d5a:	dc 01       	movw	r26, r24
    4d5c:	cb 01       	movw	r24, r22
    4d5e:	9c 8b       	std	Y+20, r25	; 0x14
    4d60:	8b 8b       	std	Y+19, r24	; 0x13
    4d62:	8b 89       	ldd	r24, Y+19	; 0x13
    4d64:	9c 89       	ldd	r25, Y+20	; 0x14
    4d66:	98 8b       	std	Y+16, r25	; 0x10
    4d68:	8f 87       	std	Y+15, r24	; 0x0f
    4d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d6c:	98 89       	ldd	r25, Y+16	; 0x10
    4d6e:	01 97       	sbiw	r24, 0x01	; 1
    4d70:	f1 f7       	brne	.-4      	; 0x4d6e <TheSafe_vidCheck_Password+0x1700>
    4d72:	98 8b       	std	Y+16, r25	; 0x10
    4d74:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					local_u8Seconds -- ;
    4d76:	de 01       	movw	r26, r28
    4d78:	a9 54       	subi	r26, 0x49	; 73
    4d7a:	bf 4f       	sbci	r27, 0xFF	; 255
    4d7c:	fe 01       	movw	r30, r28
    4d7e:	e9 54       	subi	r30, 0x49	; 73
    4d80:	ff 4f       	sbci	r31, 0xFF	; 255
    4d82:	80 81       	ld	r24, Z
    4d84:	81 50       	subi	r24, 0x01	; 1
    4d86:	8c 93       	st	X, r24
					if (local_u8Seconds == 0)
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e9 54       	subi	r30, 0x49	; 73
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	80 81       	ld	r24, Z
    4d90:	88 23       	and	r24, r24
    4d92:	09 f0       	breq	.+2      	; 0x4d96 <TheSafe_vidCheck_Password+0x1728>
    4d94:	72 cf       	rjmp	.-284    	; 0x4c7a <TheSafe_vidCheck_Password+0x160c>
					{
						NumberOfTries = 3 ;
    4d96:	83 e0       	ldi	r24, 0x03	; 3
    4d98:	80 93 ed 00 	sts	0x00ED, r24
						CheckPassLcdLocation = 11 ;
    4d9c:	8b e0       	ldi	r24, 0x0B	; 11
    4d9e:	80 93 ee 00 	sts	0x00EE, r24
						CLCD_voidSendCommand(1);
    4da2:	81 e0       	ldi	r24, 0x01	; 1
    4da4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
						CLCD_vidSendString("Enter Pass:");
    4da8:	89 e7       	ldi	r24, 0x79	; 121
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
    4db0:	16 cf       	rjmp	.-468    	; 0x4bde <TheSafe_vidCheck_Password+0x1570>
					}
				}
			}
			else
			{
				NumberOfTries -- ; //2 1
    4db2:	80 91 ed 00 	lds	r24, 0x00ED
    4db6:	81 50       	subi	r24, 0x01	; 1
    4db8:	80 93 ed 00 	sts	0x00ED, r24
				CheckPassLcdLocation = 11 ;
    4dbc:	8b e0       	ldi	r24, 0x0B	; 11
    4dbe:	80 93 ee 00 	sts	0x00EE, r24
				CLCD_voidSendCommand(1);
    4dc2:	81 e0       	ldi	r24, 0x01	; 1
    4dc4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
				CLCD_vidSendString("Wrong Password") ;
    4dc8:	8e ea       	ldi	r24, 0xAE	; 174
    4dca:	90 e0       	ldi	r25, 0x00	; 0
    4dcc:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				CLCD_GoToXY(1,0);
    4dd0:	81 e0       	ldi	r24, 0x01	; 1
    4dd2:	60 e0       	ldi	r22, 0x00	; 0
    4dd4:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_vidSendString("Tries Left:");
    4dd8:	8d eb       	ldi	r24, 0xBD	; 189
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
				CLCD_GoToXY(1,11);
    4de0:	81 e0       	ldi	r24, 0x01	; 1
    4de2:	6b e0       	ldi	r22, 0x0B	; 11
    4de4:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_GoToXY>
				CLCD_write_Number(NumberOfTries);
    4de8:	80 91 ed 00 	lds	r24, 0x00ED
    4dec:	88 2f       	mov	r24, r24
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	0e 94 f6 07 	call	0xfec	; 0xfec <CLCD_write_Number>
    4df4:	80 e0       	ldi	r24, 0x00	; 0
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	aa ef       	ldi	r26, 0xFA	; 250
    4dfa:	b3 e4       	ldi	r27, 0x43	; 67
    4dfc:	8b 87       	std	Y+11, r24	; 0x0b
    4dfe:	9c 87       	std	Y+12, r25	; 0x0c
    4e00:	ad 87       	std	Y+13, r26	; 0x0d
    4e02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e0c:	20 e0       	ldi	r18, 0x00	; 0
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	4a ef       	ldi	r20, 0xFA	; 250
    4e12:	54 e4       	ldi	r21, 0x44	; 68
    4e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e18:	dc 01       	movw	r26, r24
    4e1a:	cb 01       	movw	r24, r22
    4e1c:	8f 83       	std	Y+7, r24	; 0x07
    4e1e:	98 87       	std	Y+8, r25	; 0x08
    4e20:	a9 87       	std	Y+9, r26	; 0x09
    4e22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e24:	6f 81       	ldd	r22, Y+7	; 0x07
    4e26:	78 85       	ldd	r23, Y+8	; 0x08
    4e28:	89 85       	ldd	r24, Y+9	; 0x09
    4e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e2c:	20 e0       	ldi	r18, 0x00	; 0
    4e2e:	30 e0       	ldi	r19, 0x00	; 0
    4e30:	40 e8       	ldi	r20, 0x80	; 128
    4e32:	5f e3       	ldi	r21, 0x3F	; 63
    4e34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e38:	88 23       	and	r24, r24
    4e3a:	2c f4       	brge	.+10     	; 0x4e46 <TheSafe_vidCheck_Password+0x17d8>
		__ticks = 1;
    4e3c:	81 e0       	ldi	r24, 0x01	; 1
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
    4e40:	9e 83       	std	Y+6, r25	; 0x06
    4e42:	8d 83       	std	Y+5, r24	; 0x05
    4e44:	3f c0       	rjmp	.+126    	; 0x4ec4 <TheSafe_vidCheck_Password+0x1856>
	else if (__tmp > 65535)
    4e46:	6f 81       	ldd	r22, Y+7	; 0x07
    4e48:	78 85       	ldd	r23, Y+8	; 0x08
    4e4a:	89 85       	ldd	r24, Y+9	; 0x09
    4e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e4e:	20 e0       	ldi	r18, 0x00	; 0
    4e50:	3f ef       	ldi	r19, 0xFF	; 255
    4e52:	4f e7       	ldi	r20, 0x7F	; 127
    4e54:	57 e4       	ldi	r21, 0x47	; 71
    4e56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e5a:	18 16       	cp	r1, r24
    4e5c:	4c f5       	brge	.+82     	; 0x4eb0 <TheSafe_vidCheck_Password+0x1842>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e60:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e66:	20 e0       	ldi	r18, 0x00	; 0
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	40 e2       	ldi	r20, 0x20	; 32
    4e6c:	51 e4       	ldi	r21, 0x41	; 65
    4e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e72:	dc 01       	movw	r26, r24
    4e74:	cb 01       	movw	r24, r22
    4e76:	bc 01       	movw	r22, r24
    4e78:	cd 01       	movw	r24, r26
    4e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e7e:	dc 01       	movw	r26, r24
    4e80:	cb 01       	movw	r24, r22
    4e82:	9e 83       	std	Y+6, r25	; 0x06
    4e84:	8d 83       	std	Y+5, r24	; 0x05
    4e86:	0f c0       	rjmp	.+30     	; 0x4ea6 <TheSafe_vidCheck_Password+0x1838>
    4e88:	88 ec       	ldi	r24, 0xC8	; 200
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	9c 83       	std	Y+4, r25	; 0x04
    4e8e:	8b 83       	std	Y+3, r24	; 0x03
    4e90:	8b 81       	ldd	r24, Y+3	; 0x03
    4e92:	9c 81       	ldd	r25, Y+4	; 0x04
    4e94:	01 97       	sbiw	r24, 0x01	; 1
    4e96:	f1 f7       	brne	.-4      	; 0x4e94 <TheSafe_vidCheck_Password+0x1826>
    4e98:	9c 83       	std	Y+4, r25	; 0x04
    4e9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea0:	01 97       	sbiw	r24, 0x01	; 1
    4ea2:	9e 83       	std	Y+6, r25	; 0x06
    4ea4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    4eaa:	00 97       	sbiw	r24, 0x00	; 0
    4eac:	69 f7       	brne	.-38     	; 0x4e88 <TheSafe_vidCheck_Password+0x181a>
    4eae:	14 c0       	rjmp	.+40     	; 0x4ed8 <TheSafe_vidCheck_Password+0x186a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    4eb2:	78 85       	ldd	r23, Y+8	; 0x08
    4eb4:	89 85       	ldd	r24, Y+9	; 0x09
    4eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ebc:	dc 01       	movw	r26, r24
    4ebe:	cb 01       	movw	r24, r22
    4ec0:	9e 83       	std	Y+6, r25	; 0x06
    4ec2:	8d 83       	std	Y+5, r24	; 0x05
    4ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ec8:	9a 83       	std	Y+2, r25	; 0x02
    4eca:	89 83       	std	Y+1, r24	; 0x01
    4ecc:	89 81       	ldd	r24, Y+1	; 0x01
    4ece:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed0:	01 97       	sbiw	r24, 0x01	; 1
    4ed2:	f1 f7       	brne	.-4      	; 0x4ed0 <TheSafe_vidCheck_Password+0x1862>
    4ed4:	9a 83       	std	Y+2, r25	; 0x02
    4ed6:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				CLCD_voidSendCommand(1);
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
				CLCD_vidSendString("Enter Pass:");
    4ede:	89 e7       	ldi	r24, 0x79	; 121
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_vidSendString>
    4ee6:	7b ce       	rjmp	.-778    	; 0x4bde <TheSafe_vidCheck_Password+0x1570>

00004ee8 <TheSafe_Reset>:
		}
	}
}

void TheSafe_Reset(void)
{
    4ee8:	df 93       	push	r29
    4eea:	cf 93       	push	r28
    4eec:	cd b7       	in	r28, 0x3d	; 61
    4eee:	de b7       	in	r29, 0x3e	; 62
	Reset_System_Flag = 1;
    4ef0:	81 e0       	ldi	r24, 0x01	; 1
    4ef2:	80 93 f9 00 	sts	0x00F9, r24
}
    4ef6:	cf 91       	pop	r28
    4ef8:	df 91       	pop	r29
    4efa:	08 95       	ret

00004efc <main>:
#include "Bit_Math.h"
#include "types1.h"
#include "The_Safe_Interface.h"

void main(void)
{
    4efc:	df 93       	push	r29
    4efe:	cf 93       	push	r28
    4f00:	0f 92       	push	r0
    4f02:	cd b7       	in	r28, 0x3d	; 61
    4f04:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8SetPasswordFlag = 0 ;
    4f06:	19 82       	std	Y+1, r1	; 0x01

	TheSafe_vidInit();
    4f08:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <TheSafe_vidInit>

	if (local_u8SetPasswordFlag == 0)
    4f0c:	89 81       	ldd	r24, Y+1	; 0x01
    4f0e:	88 23       	and	r24, r24
    4f10:	61 f4       	brne	.+24     	; 0x4f2a <main+0x2e>
	{
		TheSafe_Set_VidPassword();
    4f12:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <TheSafe_Set_VidPassword>
		local_u8SetPasswordFlag ++ ;
    4f16:	89 81       	ldd	r24, Y+1	; 0x01
    4f18:	8f 5f       	subi	r24, 0xFF	; 255
    4f1a:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_voidSendDataByte((u8)local_u8SetPasswordFlag , 0x56);
    4f1c:	89 81       	ldd	r24, Y+1	; 0x01
    4f1e:	88 2f       	mov	r24, r24
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	66 e5       	ldi	r22, 0x56	; 86
    4f24:	70 e0       	ldi	r23, 0x00	; 0
    4f26:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <EEPROM_voidSendDataByte>
	}

	TheSafe_vidCheck_Password();
    4f2a:	0e 94 37 1b 	call	0x366e	; 0x366e <TheSafe_vidCheck_Password>
}
    4f2e:	0f 90       	pop	r0
    4f30:	cf 91       	pop	r28
    4f32:	df 91       	pop	r29
    4f34:	08 95       	ret

00004f36 <__mulsi3>:
    4f36:	62 9f       	mul	r22, r18
    4f38:	d0 01       	movw	r26, r0
    4f3a:	73 9f       	mul	r23, r19
    4f3c:	f0 01       	movw	r30, r0
    4f3e:	82 9f       	mul	r24, r18
    4f40:	e0 0d       	add	r30, r0
    4f42:	f1 1d       	adc	r31, r1
    4f44:	64 9f       	mul	r22, r20
    4f46:	e0 0d       	add	r30, r0
    4f48:	f1 1d       	adc	r31, r1
    4f4a:	92 9f       	mul	r25, r18
    4f4c:	f0 0d       	add	r31, r0
    4f4e:	83 9f       	mul	r24, r19
    4f50:	f0 0d       	add	r31, r0
    4f52:	74 9f       	mul	r23, r20
    4f54:	f0 0d       	add	r31, r0
    4f56:	65 9f       	mul	r22, r21
    4f58:	f0 0d       	add	r31, r0
    4f5a:	99 27       	eor	r25, r25
    4f5c:	72 9f       	mul	r23, r18
    4f5e:	b0 0d       	add	r27, r0
    4f60:	e1 1d       	adc	r30, r1
    4f62:	f9 1f       	adc	r31, r25
    4f64:	63 9f       	mul	r22, r19
    4f66:	b0 0d       	add	r27, r0
    4f68:	e1 1d       	adc	r30, r1
    4f6a:	f9 1f       	adc	r31, r25
    4f6c:	bd 01       	movw	r22, r26
    4f6e:	cf 01       	movw	r24, r30
    4f70:	11 24       	eor	r1, r1
    4f72:	08 95       	ret

00004f74 <__udivmodhi4>:
    4f74:	aa 1b       	sub	r26, r26
    4f76:	bb 1b       	sub	r27, r27
    4f78:	51 e1       	ldi	r21, 0x11	; 17
    4f7a:	07 c0       	rjmp	.+14     	; 0x4f8a <__udivmodhi4_ep>

00004f7c <__udivmodhi4_loop>:
    4f7c:	aa 1f       	adc	r26, r26
    4f7e:	bb 1f       	adc	r27, r27
    4f80:	a6 17       	cp	r26, r22
    4f82:	b7 07       	cpc	r27, r23
    4f84:	10 f0       	brcs	.+4      	; 0x4f8a <__udivmodhi4_ep>
    4f86:	a6 1b       	sub	r26, r22
    4f88:	b7 0b       	sbc	r27, r23

00004f8a <__udivmodhi4_ep>:
    4f8a:	88 1f       	adc	r24, r24
    4f8c:	99 1f       	adc	r25, r25
    4f8e:	5a 95       	dec	r21
    4f90:	a9 f7       	brne	.-22     	; 0x4f7c <__udivmodhi4_loop>
    4f92:	80 95       	com	r24
    4f94:	90 95       	com	r25
    4f96:	bc 01       	movw	r22, r24
    4f98:	cd 01       	movw	r24, r26
    4f9a:	08 95       	ret

00004f9c <__prologue_saves__>:
    4f9c:	2f 92       	push	r2
    4f9e:	3f 92       	push	r3
    4fa0:	4f 92       	push	r4
    4fa2:	5f 92       	push	r5
    4fa4:	6f 92       	push	r6
    4fa6:	7f 92       	push	r7
    4fa8:	8f 92       	push	r8
    4faa:	9f 92       	push	r9
    4fac:	af 92       	push	r10
    4fae:	bf 92       	push	r11
    4fb0:	cf 92       	push	r12
    4fb2:	df 92       	push	r13
    4fb4:	ef 92       	push	r14
    4fb6:	ff 92       	push	r15
    4fb8:	0f 93       	push	r16
    4fba:	1f 93       	push	r17
    4fbc:	cf 93       	push	r28
    4fbe:	df 93       	push	r29
    4fc0:	cd b7       	in	r28, 0x3d	; 61
    4fc2:	de b7       	in	r29, 0x3e	; 62
    4fc4:	ca 1b       	sub	r28, r26
    4fc6:	db 0b       	sbc	r29, r27
    4fc8:	0f b6       	in	r0, 0x3f	; 63
    4fca:	f8 94       	cli
    4fcc:	de bf       	out	0x3e, r29	; 62
    4fce:	0f be       	out	0x3f, r0	; 63
    4fd0:	cd bf       	out	0x3d, r28	; 61
    4fd2:	09 94       	ijmp

00004fd4 <__epilogue_restores__>:
    4fd4:	2a 88       	ldd	r2, Y+18	; 0x12
    4fd6:	39 88       	ldd	r3, Y+17	; 0x11
    4fd8:	48 88       	ldd	r4, Y+16	; 0x10
    4fda:	5f 84       	ldd	r5, Y+15	; 0x0f
    4fdc:	6e 84       	ldd	r6, Y+14	; 0x0e
    4fde:	7d 84       	ldd	r7, Y+13	; 0x0d
    4fe0:	8c 84       	ldd	r8, Y+12	; 0x0c
    4fe2:	9b 84       	ldd	r9, Y+11	; 0x0b
    4fe4:	aa 84       	ldd	r10, Y+10	; 0x0a
    4fe6:	b9 84       	ldd	r11, Y+9	; 0x09
    4fe8:	c8 84       	ldd	r12, Y+8	; 0x08
    4fea:	df 80       	ldd	r13, Y+7	; 0x07
    4fec:	ee 80       	ldd	r14, Y+6	; 0x06
    4fee:	fd 80       	ldd	r15, Y+5	; 0x05
    4ff0:	0c 81       	ldd	r16, Y+4	; 0x04
    4ff2:	1b 81       	ldd	r17, Y+3	; 0x03
    4ff4:	aa 81       	ldd	r26, Y+2	; 0x02
    4ff6:	b9 81       	ldd	r27, Y+1	; 0x01
    4ff8:	ce 0f       	add	r28, r30
    4ffa:	d1 1d       	adc	r29, r1
    4ffc:	0f b6       	in	r0, 0x3f	; 63
    4ffe:	f8 94       	cli
    5000:	de bf       	out	0x3e, r29	; 62
    5002:	0f be       	out	0x3f, r0	; 63
    5004:	cd bf       	out	0x3d, r28	; 61
    5006:	ed 01       	movw	r28, r26
    5008:	08 95       	ret

0000500a <_exit>:
    500a:	f8 94       	cli

0000500c <__stop_program>:
    500c:	ff cf       	rjmp	.-2      	; 0x500c <__stop_program>
